{"id": 80877583, "iid": 2641, "project_id": 7603319, "title": "Hubspot API config not working", "description": "After installing the tap-hubspot extractor using : `meltano add --custom extractor tap-hubspot`\n\nI try to do some tests using the API token and not the standard credentials. However, when I try to invoke Meltano, it requires the standard credentials [[screenshot](https://p479.p0.n0.cdn.getcloudapp.com/items/E0u91xqZ/31e83b3b-0f77-4cb3-93af-2ae453b13e1a.jpg?v=190f7e8e9efb98837ace959c3aa99910)] although the official tap doesn't as the documentation [stipulates](https://github.com/singer-io/tap-hubspot) : \n> To use an API key, include a hapikey configuration variable in your config.json and set it to the value of your HubSpot API key. Any OAuth authentication parameters in your config.json will be ignored if this key is present!\n\nI tried using the tap directly and my configuration worked, so I'm guessing that Meltano is not passing the right file to the tap.", "state": "opened", "created_at": "2021-03-14T12:26:14.900000Z", "updated_at": "2021-03-14T12:26:14.900000Z", "closed_at": null, "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2641", "weight": null, "has_tasks": false, "author_id": 8399343, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80821164, "iid": 2640, "project_id": 7603319, "title": "Meltano should validate ability to write to loader at elt invocation", "description": "In testing `tap-gitlab` and `tap-zendesk` the extraction failed because there was a problem while loading data (`target-snowflake`).\n\nIn my specific case, the target was expecting the schema to already exist in Snowflake. The full extract would run a number of API calls and then when it tried to load it would bomb out without a clear way to retry with the data already \"extracted\".\n\nHaving a validation step that happens invisibly when you invoked `elt` would be good. Or we could have a separate `meltano validate` step. \n\nThoughts @meltano/core-team ?", "state": "opened", "created_at": "2021-03-12T17:37:03.054000Z", "updated_at": "2021-03-12T17:48:32.234000Z", "closed_at": null, "labels": ["Discussion", "Testing"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2640", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80820772, "iid": 2639, "project_id": 7603319, "title": "Add detail to tap-zendesk about email for API access", "description": "", "state": "closed", "created_at": "2021-03-12T17:28:01.054000Z", "updated_at": "2021-03-12T17:48:34.527000Z", "closed_at": "2021-03-12T17:48:34.359000Z", "labels": ["Documentation", "flow::Review"], "assignees": [1942272], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2639", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 1942272, "closed_by_id": 87854, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80815156, "iid": 2638, "project_id": 7603319, "title": "Unclear pattern inheritance / resolution", "description": "While adding `tap-gitlab` for https://gitlab.com/meltano/meta/-/issues/4 I ran across a weird UX.\n\nI was testing out excluding everything to see what would happen using `meltano select tap-gitlab --exclude \"*\"` That appropriately added `!*.*` to the `select:` list.\n\nI then added users.* by running `meltano select tap-gitlab users \"*\"`. I would have expected this to remove the full exclusion list and actually select users.*. The enabled patterns looked like:\n\n```\nEnabled patterns:\n\t!*.*\n\tusers.*\n```\n\nWhen I read that I guess that it would exclude everything, but then include users.*. What happened is that it would just exclude everything. There was no clear way to remove the `!*.*` from the command line.", "state": "opened", "created_at": "2021-03-12T16:24:19.460000Z", "updated_at": "2021-03-12T17:58:22.904000Z", "closed_at": null, "labels": ["CLI", "Configuration", "Extract"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2638", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80681786, "iid": 2637, "project_id": 7603319, "title": "Singer Hub: Guidance re: scalability of creds-per-source approach", "description": "Opening this issue to discuss merits and limitations associated with the `creds-for-each-source` approach to maintaining a valid test status on all taps and targets.\n\nPros:\n\n- Strong affirmative confirmation on end-to-end test status all sources and targets.\n- Enables full end-to-end testing for all sources and targets.\n- ...\n\n\nCons:\n\n- Scalable to hundreds perhaps, but likely not scalable to thousands\n- Password rotation requirements\n- Difficult to decentralize\n- Scalability limitations of traditional environment-var-CI secrets approach\n   - Would at a certain scale require us to move towards a distributed \"vault\" approach where CI has keys to vault and vault is managed in a distributed fashion.\n- ...\n\nAlternatives:\n\n1. Distributed `vault` of credentials to sample profiles.\n2. Source and target partners have more ownership over their own connectors (taps and targets).\n3. Parter sources and targets actively sponsor and/or manage credentials for their pespective test environments.\n4. Standardized emulation test harness, enabling source-like behavior without actual connections.\n5. ...", "state": "opened", "created_at": "2021-03-11T02:09:31.674000Z", "updated_at": "2021-03-11T23:30:31.118000Z", "closed_at": null, "labels": ["Exploration"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2637", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80623631, "iid": 2636, "project_id": 7603319, "title": "Create Meltano template for easy deployments using monk.io", "description": "### Problem to solve\nWe would like to offer Meltano users the ability to easily deploy Meltano as an off the shelf (pre-configured) stack using Monk.io\n\nWith Monk.io the users would simply run `monk run meltano/system` (or similar) and deploy it either locally or on their cloud provider of choice.\n\nIn near future, the template configuration would also utilize Monk jobs for the Meltano schedule feature.\n\n### Target audience\nMeltano users running their infrastructure on AWS, GCP, Azure and Digital Ocean.\nMeltano prospects who would like to try out Meltano locally.\n\n\n### What does success look like, and how can we measure that?\n- Increased number of Meltano users measured by the number of running deployments using Monk.io\n\n\n### Links / references\nhttps://monk.io\nhttps://monkhub.io", "state": "opened", "created_at": "2021-03-10T10:17:20.270000Z", "updated_at": "2021-03-11T21:26:54.269000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Deployment"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2636", "weight": null, "has_tasks": false, "author_id": 7366524, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80614375, "iid": 2635, "project_id": 7603319, "title": "A canonical guide to deploying Meltano in production", "description": "The existing deployment guide at https://meltano.com/docs/production.html#your-meltano-project is good, but I think it'd be quite useful to have a canonical, step-by-step guide to deploying Meltano in production.\n\nThe actual deployment details are sort of left as an exercise for the reader at the moment, and I think it'd be good to have a more detailed guide to how to do it in a best practice way.\n\nI personally have spent some time trying to deploy it on Google Cloud Run, which I ended up not progressing with in the end as I ran into several issues. I'm sure there's a better way.\n\nJust starting this issue to see if anyone has any input on how this could be tackled. I understand there was some work on a Helm chart but I'm not sure what the status of that is. Kubernetes is overkill for some people, maybe just some Terraform config or an Ansible playbook would be a starting point?", "state": "opened", "created_at": "2021-03-10T08:32:11.170000Z", "updated_at": "2021-03-11T21:26:54.970000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Deployment", "Documentation", "flow::Triage"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2635", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80593044, "iid": 2634, "project_id": 7603319, "title": "Explore potential for out-of-box data repository, data lake, and/or SQL interface layer", "description": "While many potential users of Meltano will already be bought into a specific SQL platform, some users likely have not, and some may have other reasons why they would rather start fresh in a new DataOps-friendly ecosystem rather than tying more dependency to their existing/legacy SQL platform.\n\nThere are a few options we could explore for serverless or turn-key data platforms which are still modern and scalable.\n\nMeltano currently ships with guidance regarding spinning up a docker-based PostgreSQL database, but it would be potentially valuable to add support for a more modern, scalable, and cloud-friendly option such as [Spark](https://github.com/fishtown-analytics/dbt-spark) (perhaps on Databricks?), [ClickHouse](https://clickhouse.te), or similar. Importantly, we should strive to support at least one turn-key platform which is capable of scaling storage separate from compute, which is not the case with traditional RDBMS systems like PostgreSQL.\n\nAnother option would be to provide scripts to setup a new Snowflake environment, assuming users would spin up a 30-day Snowflake trial, which only requires an email address.", "state": "opened", "created_at": "2021-03-09T22:55:40.020000Z", "updated_at": "2021-03-13T00:35:03.871000Z", "closed_at": null, "labels": ["Discussion"], "assignees": [], "user_notes_count": 10, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2634", "weight": null, "has_tasks": false, "author_id": 8358463, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80515191, "iid": 2633, "project_id": 7603319, "title": "Meltano Vision Work", "description": "By Thursday:\n\n* What could Meltano be in 5 years?\n* What do we want it to be within the year?\n* What's not part of the vision?\n* What excites you about this space and your vision?", "state": "opened", "created_at": "2021-03-08T22:45:18.545000Z", "updated_at": "2021-03-12T17:53:22.491000Z", "closed_at": null, "labels": ["Strategy"], "assignees": [87854, 1942272, 4809760], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": "2021-03-11", "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2633", "weight": 1, "has_tasks": false, "author_id": 1942272, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80483572, "iid": 2632, "project_id": 7603319, "title": "Singer tap that takes a SQL query as input", "description": "This could be an interesting add-on to any existing database taps. This is similar to what https://www.hightouch.io/ does. we could encode the SQL query in the meltano.yml file and then send it anywhere.", "state": "opened", "created_at": "2021-03-08T15:46:58.590000Z", "updated_at": "2021-03-08T15:47:07.803000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2632", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80370686, "iid": 2631, "project_id": 7603319, "title": "Update handbook with corrections and new sections", "description": "", "state": "closed", "created_at": "2021-03-06T00:29:34.490000Z", "updated_at": "2021-03-06T00:42:13.805000Z", "closed_at": "2021-03-06T00:42:13.750000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2631", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1865739, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80368562, "iid": 2630, "project_id": 7603319, "title": "tap-bing-ads documentation is incomplete", "description": "@Asastry1 [wrote on Slack](https://meltano.slack.com/archives/C013EKWA2Q1/p1614906731083200?thread_ts=1614897775.059300&cid=C013EKWA2Q1):\n\n>>>\n- You definitely want `require_live_connect: false` in your `meltano.yml`, I couldn't get the live connect endpoint to work for me when set to `true`\n- If you're using the code grant flow (refresh token) you should not need a Redirect URI\n- OAuth Scopes: `scope=openid%20profile%20https://ads.microsoft.com/ads.manage%20offline_access`\n>>>\n\nThe `require_live_connect` and `redirect_uri` settings are not currently documented on https://meltano.com/plugins/extractors/bing-ads.html#getting-started, nor are the required scopes mentioned at all.\n\nThe `require_live_connect` setting is on by default, and its \"on\" value is [`'True'`](https://github.com/singer-io/tap-bing-ads/blob/master/tap_bing_ads/__init__.py#L107), rather than `'true'` or `true`, so Meltano may need to do some conversion there to let it be configured as a boolean.\n\nIf we definitely want to disable it by default, as suggested above, we can just set `False`.", "state": "opened", "created_at": "2021-03-05T22:30:03.891000Z", "updated_at": "2021-03-08T16:46:35.805000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2630", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80359948, "iid": 2629, "project_id": 7603319, "title": "meltano transform confusing user experience", "description": "A user from the dbt slack group (Matt Trinkle) was having some trouble running transforms. \n\nHe was running `meltano elt tap-braintree target-postgres --transform only` and meltano/dbt wasn't actually running any models.\n\n<summary>\nmeltano output\n</summary>\n<details>\n<code>\nmeltano | Extract & load skipped.\nmeltano | Running transformation...\ndbt     | Running with dbt=0.16.1\ndbt     | Checking ../.meltano/transformers/dbt/target/*\ndbt     | ERROR: not cleaning ../.meltano/transformers/dbt/target/* because it is protected\ndbt     | Checking dbt_modules/*\ndbt     |  Cleaned dbt_modules/*\ndbt     | Checking logs/*\ndbt     |  Cleaned logs/*\ndbt     | Finished cleaning all paths.\ndbt     | Running with dbt=0.16.1\ndbt     | Warning: No packages were found in packages.yml\ndbt     | Running with dbt=0.16.1\ndbt     | WARNING: Test 'test.fixd_meltano.unique_subscriptions_id' (models/braintree/models.yml) depends on a node named 'subscriptions' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.not_null_subscriptions_id' (models/braintree/models.yml) depends on a node named 'subscriptions' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.not_null_subscriptions_created_at' (models/braintree/models.yml) depends on a node named 'subscriptions' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.not_null_subscription_status_history_subscription_id' (models/braintree/models.yml) depends on a node named 'subscription_status_history' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.not_null_subscription_status_history_timestamp' (models/braintree/models.yml) depends on a node named 'subscription_status_history' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.unique_transactions_id' (models/braintree/models.yml) depends on a node named 'transactions' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.not_null_transactions_id' (models/braintree/models.yml) depends on a node named 'transactions' which was not found\ndbt     | WARNING: Test 'test.fixd_meltano.not_null_transactions_timestamp' (models/braintree/models.yml) depends on a node named 'transactions' which was not found\ndbt     | WARNING: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\ndbt     | There are 3 unused configuration paths:\ndbt     | - snapshots.gitlab.issues_snapshot\ndbt     | - snapshots.gitlab\ndbt     | - snapshots.gitlab.merge_requests_snapshot\ndbt     | \ndbt     | Found 20 models, 125 tests, 2 snapshots, 0 analyses, 131 macros, 0 operations, 4 seed files, 14 sources\ndbt     | WARNING: Nothing to do. Try checking your model configs and model specification args\nmeltano | Transformation complete!\n```\n</code>\n</details>\n\nwe eventually figured out that the schema.yml (model.yml in his case) wasn't quite right with a missing column key. But more fundamentally the folder directory was wrong. Meltano was looking for `tap_gitlab` or `tap_braintree` but he had `gitlab` and `braintree` in the structure.\n\n* Is there a way to override the directory name when calling out to dbt?\n* Is there a way to pass to dbt from meltano dbt-specific commands? i.e. `dbt run --models braintree_subscription`", "state": "opened", "created_at": "2021-03-05T18:34:33.457000Z", "updated_at": "2021-03-05T22:04:22.146000Z", "closed_at": null, "labels": ["Community", "Transform", "ux"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2629", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80286274, "iid": 2628, "project_id": 7603319, "title": "meltano elt tap-spreadsheets-anywhere target-postgres writing 0 records for stream", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\nI am unable to write any records to the database using tap-spreadsheets-anywhere. \n\n### What is the expected *correct* behavior?\n_What should be happening?_\nWhen running `meltano elt tap-spreadsheets-anywhere target-postgres` everything should be loaded into the postgres database from the specified xls file.  \n\n\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\n```\n# project setup\n1. meltano init \n2. meltano add extractor tap-spreadsheets-anywhere\n3. meltano add loader target-postgres --variant meltano \n4. meltano elt tap-spreadsheets-anywhere target-postgres\n```\n\n# the link to the dataset \nhttps://dataverse.harvard.edu/file.xhtml?persistentId=doi:10.7910/DVN/27763/ADYC1Q&version=1.0\n\n# my meltano.yml file \n\n```\nversion: 1\nsend_anonymous_usage_stats: true\nproject_id: c5e43ad3-aa5f-4b0a-8152-74183e9ec814\nplugins:\n  extractors:\n  - name: tap-spreadsheets-anywhere\n    variant: original\n    pip_url: git+https://github.com/ets/tap-spreadsheets-anywhere.git\n    config:\n      tables:\n      - path: https://dataverse.harvard.edu/api/access/datafile/\n        name: us__military_deaths\n        pattern: ':persistentId?persistentId=doi:10.7910/DVN/27763/ADYC1Q'\n        start_date: '2014-11-04T18:38:22Z'\n        key_properties: []\n        format: excel\n        worksheet_name: Worldwide\n    capabilities:\n    - catalog\n    - discover\n    - state\n  loaders:\n  - name: target-postgres\n    variant: meltano\n    pip_url: git+https://github.com/meltano/target-postgres.git\n    config:\n      user: military\n      host: 127.0.0.1\n      port: 5432\n      dbname: military_deaths\n```\n\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\n\n```\nmeltano                   | Running extract & load...\nmeltano                   | No state was found, complete import.\ntap-spreadsheets-anywhere | INFO Using supplied catalog /Users/asharma/military_data_analysis/meltano/.meltano/run/elt/2021-03-04T222427--tap-spreadsheets-anywhere--target-postgres/567b2418-26a7-4b43-94a3-41377b22abda/tap.properties.json.\ntap-spreadsheets-anywhere | INFO Syncing stream:us__military_deaths\ntap-spreadsheets-anywhere | INFO Assembled https://dataverse.harvard.edu/api/access/datafile//:persistentId?persistentId=doi:10.7910/DVN/27763/ADYC1Q as the URL to a source file.\ntarget-postgres           | INFO Table 'us__military_deaths' exists\ntap-spreadsheets-anywhere | WARNING URL did not return a last-modified header so using current date and time.\ntap-spreadsheets-anywhere | INFO Wrote 0 records for stream \"us__military_deaths\".\nmeltano                   | Extract & load complete!\nmeltano                   | Transformation skipped.\n```\n\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\nI'm not quite sure what is happening. I believe it could potentially be a problem with the last-modified-header warning, but I'm not really sure.\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2021-03-04T22:38:48.112000Z", "updated_at": "2021-03-06T17:39:03.287000Z", "closed_at": "2021-03-06T17:39:03.215000Z", "labels": ["Customer Support", "Extract", "bug"], "assignees": [4403563], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2628", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 8334065, "assignee_id": 4403563, "closed_by_id": 4403563, "milestone_id": 1865739, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80284911, "iid": 2627, "project_id": 7603319, "title": "Meltano Invoke/Select does not invalidate cache after reinstalling a tap", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\nTaps are using cached properties for `meltano invoke/select` even if the tap's properties have changed after `meltano install`.\n\n\n\n### What is the expected *correct* behavior?\nWhen running `meltano install`, a tap's properties cache should be invalidated so that `meltano invoke/select` should effectively \"rediscover\" the tap's properties.\n\n\n\n### Steps to reproduce\n```\n# install all taps\n1. meltano install\n2. meltano invoke tap-custom-tap\n# update tap-custom-tap repo with some new schema properties\n3. meltano install tap-custom-tap\n4. meltano invoke tap-custom-tap\n```\n\n\n### Relevant logs and/or screenshots\nAfter running `meltano install extractor tap-s3-toast`\n```\n> meltano --log-level=debug invoke tap-s3-toast\n[2021-03-04 21:28:53,618] [1|MainThread|root] [DEBUG] Creating engine <meltano.core.project.Project object at 0x7f510102d160>@sqlite:////projects/.meltano/meltano.db\n[2021-03-04 21:28:54,642] [1|MainThread|root] [DEBUG] Created configuration at /projects/.meltano/run/tap-s3-toast/tap.config.json\n[2021-03-04 21:28:54,643] [1|MainThread|root] [DEBUG] Could not find tap.properties.json in /projects/.meltano/extractors/tap-s3-toast/tap.properties.json, skipping.\n[2021-03-04 21:28:54,643] [1|MainThread|root] [DEBUG] Could not find tap.properties.cache_key in /projects/.meltano/extractors/tap-s3-toast/tap.properties.cache_key, skipping.\n[2021-03-04 21:28:54,643] [1|MainThread|root] [DEBUG] Could not find state.json in /projects/.meltano/extractors/tap-s3-toast/state.json, skipping.\n[2021-03-04 21:28:54,643] [1|MainThread|meltano.core.plugin.singer.tap] [DEBUG] Using cached catalog file\n```\n\n### Possible fixes\nAccording to @DouweM and my [Slack conversation](https://meltano.slack.com/archives/C013EKWA2Q1/p1614892532050300), `meltano invoke/select` should have some logic to invalidate caches. Other options are removing the cache when running `meltano install` either by default or with an optional cli flag.\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2021-03-04T21:55:13.432000Z", "updated_at": "2021-03-08T16:45:30.395000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "bug", "flow::To Do"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2627", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7836798, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80282339, "iid": 2626, "project_id": 7603319, "title": "Send tap data to two targets", "description": "A use case came up in Slack around sending data to BigQuery and also to S3 for backup purposes. This seems eminently doable from a high-level perspective.\n\n```yaml\n- name: data-to-bigquery\n  extractor: tap-data\n  loader: target-s3\n  loader: target-bigquery\n  transform: skip\n  interval: '@daily'\n  start_date: 2020-12-03\n```\n\n:point_up: seems like a simple declaration, but care would have to be taken to not duplicate everything behind the scenes. I think we'd really want it to be a single stream that's sent to 2 (or more) locations.\n\nThere are also questions about what happens when both loaders don't have the same state or if one fails while loading.", "state": "opened", "created_at": "2021-03-04T20:33:24.154000Z", "updated_at": "2021-03-13T01:00:36.424000Z", "closed_at": null, "labels": ["Community", "Discussion", "Load", "feature requests"], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2626", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80277755, "iid": 2625, "project_id": 7603319, "title": "Streamline process to add new discoverable taps/targets and variants", "description": "We can do much better than https://meltano.com/docs/contributor-guide.html#discoverable-plugins and can go beyond https://gitlab.com/meltano/meltano/-/issues/2608.\n\nOn https://gitlab.com/meltano/meltano/-/issues/2600, users should be able to sign in and submit new taps/targets through the UI, even if this would still result in merge requests to some repo behind the scenes.", "state": "opened", "created_at": "2021-03-04T18:52:53.341000Z", "updated_at": "2021-03-04T18:52:53.619000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2625", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80186626, "iid": 2624, "project_id": 7603319, "title": "Central validation infrastructure for tap/target integration testing", "description": "Following from https://gitlab.com/meltano/meltano/-/issues/2612#note_518395941 it would be useful to have some centralized redundant validation that a tap/target does what it say it can do.\n\n@DouweM mentioned that realistically we may not be able to do more than validating `<executable> --help` works, but even having basic documentation checks would be useful to better encourage useability across the ecosystem.", "state": "opened", "created_at": "2021-03-03T15:59:33.814000Z", "updated_at": "2021-03-11T14:28:55.409000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Testing"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2624", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80186344, "iid": 2623, "project_id": 7603319, "title": "Adding Testing/Validation status badges on plugin pages", "description": "Following from https://gitlab.com/meltano/meltano/-/issues/2612#note_518395941, it would be good to indicate to users the validity of a given tap or target in a programmatic way. We've started to do this manually by adding Repository, Maintainer, and Maintenance Status on plugin pages (see https://meltano.com/plugins/extractors/chargebee.html) but we should be able to programmatically pull from repositories.", "state": "opened", "created_at": "2021-03-03T15:56:41.712000Z", "updated_at": "2021-03-04T22:39:52.293000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Testing"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2623", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80129376, "iid": 2622, "project_id": 7603319, "title": "Add fork of `singer-io/target-csv` as new default variant", "description": "- All forks: https://github.com/singer-io/target-csv/network\n- Promising candidate: https://github.com/hotgluexyz/target-csv", "state": "opened", "created_at": "2021-03-02T23:46:30.995000Z", "updated_at": "2021-03-08T22:28:18.410000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::To Do"], "assignees": [8178925], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2622", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 8178925, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80129351, "iid": 2621, "project_id": 7603319, "title": "Add fork of `singer-io/tap-zendesk` as new default variant", "description": "- All forks: https://github.com/singer-io/tap-zendesk/network\n- Promising candidate: https://github.com/BenjMaq/tap-zendesk/branches", "state": "opened", "created_at": "2021-03-02T23:45:52.137000Z", "updated_at": "2021-03-08T16:33:58.150000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::Doing"], "assignees": [7994172], "user_notes_count": 6, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2621", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 7994172, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80129344, "iid": 2620, "project_id": 7603319, "title": "Add fork of `singer-io/tap-shopify` as new default variant", "description": "- All forks: https://github.com/singer-io/tap-shopify/network\n- Promising candidate: https://github.com/goes-funky/tap-shopify", "state": "opened", "created_at": "2021-03-02T23:45:22.506000Z", "updated_at": "2021-03-08T23:27:47.617000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::To Do"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2620", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80129335, "iid": 2619, "project_id": 7603319, "title": "Add fork of `singer-io/tap-recharge` as new default variant", "description": "- All forks: https://github.com/singer-io/tap-recharge/network\n- Promising candidate: https://github.com/brooklyn-data/tap-recharge/tree/workarounds", "state": "opened", "created_at": "2021-03-02T23:44:25.028000Z", "updated_at": "2021-03-03T23:40:32.988000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::To Do"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2619", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80129315, "iid": 2618, "project_id": 7603319, "title": "Add fork of `singer-io/tap-mongodb` as new default variant", "description": "- All forks: https://github.com/singer-io/tap-mongodb/network\n- Promising candidate: https://github.com/blotoutio/tap-mongodb", "state": "opened", "created_at": "2021-03-02T23:43:30.651000Z", "updated_at": "2021-03-04T18:02:51.156000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::To Do"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2618", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80129270, "iid": 2617, "project_id": 7603319, "title": "Add fork of `singer-io/tap-bing-ads` as new default variant", "description": "- All forks: https://github.com/singer-io/tap-bing-ads/network\n- Promising candidate: https://github.com/wheelhousedev/tap-bing-ads", "state": "opened", "created_at": "2021-03-02T23:42:42.260000Z", "updated_at": "2021-03-05T22:30:20.498000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::To Do"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2617", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 80002326, "iid": 2616, "project_id": 7603319, "title": "Investigate using Apache Arrow (or other interchange formats)", "description": "As mentioned in https://news.ycombinator.com/item?id=26284253#26300348, it would be interesting to see how the [Singer Spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#example) could evolve to support other interchange formats such as [Apache Arrow](https://arrow.apache.org/).", "state": "opened", "created_at": "2021-03-01T12:25:03.207000Z", "updated_at": "2021-03-01T15:45:56.004000Z", "closed_at": null, "labels": ["Community", "Discussion"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2616", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79899566, "iid": 2615, "project_id": 7603319, "title": "Add tap-gmail to list of extractors", "description": "https://github.com/Mashey/tap-gmail", "state": "opened", "created_at": "2021-02-26T18:28:26.139000Z", "updated_at": "2021-03-08T16:34:10.246000Z", "closed_at": null, "labels": ["Extract", "flow::To Do"], "assignees": [1942272], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2615", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": 1942272, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79899557, "iid": 2614, "project_id": 7603319, "title": "Add tap-zoom to list of discoverable extractors", "description": "https://github.com/Mashey/tap-zoom", "state": "closed", "created_at": "2021-02-26T18:27:52.981000Z", "updated_at": "2021-03-04T18:29:02.640000Z", "closed_at": "2021-03-04T18:29:02.549000Z", "labels": ["Extract", "flow::To Do"], "assignees": [1942272], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2614", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": 1942272, "closed_by_id": 87854, "milestone_id": 1865739, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79899501, "iid": 2613, "project_id": 7603319, "title": "Add tap-slack to list of discoverable extractors", "description": "https://github.com/Mashey/tap-slack", "state": "opened", "created_at": "2021-02-26T18:26:27.236000Z", "updated_at": "2021-03-08T16:34:11.432000Z", "closed_at": null, "labels": ["Extract", "flow::To Do"], "assignees": [1942272], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2613", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": 1942272, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79892251, "iid": 2612, "project_id": 7603319, "title": "Singer tap and target testing and validation framework", "description": "The [Singer SDK](https://gitlab.com/meltano/meltano/-/issues/2401) will make it easy to build new taps and targets. That solves one of the challenges in the community, but another challenge will be to easily understand which taps and targets are _currently_ working and validated - including info about behavior, supported features, and maintenance status. This would certainly go along with a centralized hub of listed connectors. \n\nWe'll need to dive into this more, but immediate thoughts are:\n\n* CI suite that validates the connector is following the spec\n* Tests that mock the target API and validate data is sent appropriately\n* Where possible, a live sandbox tap/target would be ideal (get orgs' buy-in on this?)\n\n|Connector|Passes Spec|API Validation|Live Sandbox Test|\n|:-:|:-:|:-:|:-:|\n|tap-postgres|:white_check_mark: |:white_check_mark: |:white_check_mark: |\n|tap-salesforce|:white_check_mark: |:white_check_mark: |:octagonal_sign:  |", "state": "opened", "created_at": "2021-02-26T16:09:24.681000Z", "updated_at": "2021-03-11T23:30:31.174000Z", "closed_at": null, "labels": ["Testing"], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2612", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79889156, "iid": 2611, "project_id": 7603319, "title": "Metadata view of Meltano", "description": "One of the things I'm thinking about is how Meltano can be more aware about the data it's generating - the metadata. In a future where much of a data team's data workflow is in Meltano, there are a ton of insights we can gather and surface to be more useful.", "state": "opened", "created_at": "2021-02-26T15:39:20.086000Z", "updated_at": "2021-03-05T22:57:06.170000Z", "closed_at": null, "labels": ["Exploration", "feature requests"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2611", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79744692, "iid": 2610, "project_id": 7603319, "title": "Link from docs to new \"Unlock the evolution of the Singer spec\" epic", "description": "- https://gitlab.com/groups/meltano/-/epics/88\n- https://meltano.com/docs/#embracing-singer", "state": "closed", "created_at": "2021-02-24T20:59:12.786000Z", "updated_at": "2021-02-24T22:03:14.000000Z", "closed_at": "2021-02-24T22:03:13.415000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2610", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79735656, "iid": 2609, "project_id": 7603319, "title": "Add `meltano config <plugin> test` to test connection", "description": "The \"Test Connection\" button in the UI tests an extractor by running it and seeing if it outputs any `RECORD` messages: https://gitlab.com/meltano/meltano/-/blob/85e1b339e35d7094b48cc73b25195479c890d57e/src/meltano/api/controllers/orchestrations.py#L371\n\nThe new command could do the same thing, unless extractor or loader has the `test` capability and implements its own testing logic: https://gitlab.com/meltano/singer-sdk/-/issues/14", "state": "opened", "created_at": "2021-02-24T18:19:48.115000Z", "updated_at": "2021-03-12T17:48:32.719000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Configuration"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2609", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79731774, "iid": 2608, "project_id": 7603319, "title": "Add MR templates for adding new extractors and loaders", "description": "With checkboxes for requirements listed under https://meltano.com/docs/contributor-guide.html#discoverable-plugins, new logos, and README.md addition.\n\nAn example of a complete MR: https://gitlab.com/meltano/meltano/-/merge_requests/2042", "state": "opened", "created_at": "2021-02-24T17:18:51.784000Z", "updated_at": "2021-03-08T16:34:14.745000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "flow::Triage"], "assignees": [1942272], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2608", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 1942272, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79731266, "iid": 2607, "project_id": 7603319, "title": "Add `--orchestrate` flag to `meltano ui` to start orchestrator in background", "description": "Related to https://gitlab.com/meltano/meltano/-/issues/2105 and https://gitlab.com/meltano/meltano/-/issues/2231.", "state": "opened", "created_at": "2021-02-24T17:10:53.419000Z", "updated_at": "2021-02-24T17:10:53.419000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Orchestrate", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2607", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79731044, "iid": 2606, "project_id": 7603319, "title": "Let `meltano ui` also start UIs for Airflow and other plugins", "description": "I imagine that `meltano ui airflow superset` would start Meltano's UI, _and_ invoke `airflow webserver` and `superset run` (https://gitlab.com/meltano/meltano/-/issues/2605). \n\nThis could work with any plugin that defines a `ui` command (https://gitlab.com/meltano/meltano/-/issues/2560), just like `meltano orchestrate` will work with any that defines an `orchestrate` command (https://gitlab.com/meltano/meltano/-/issues/2231).\n\nSince `meltano ui` may need to know (and control) each web server's port to prevent conflicts, plugins may need a setting to set the port and a `ui_port` extra to get it in a consistent fashion.", "state": "opened", "created_at": "2021-02-24T17:08:38.382000Z", "updated_at": "2021-02-24T17:13:00.869000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Integrations", "UI"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2606", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79729839, "iid": 2605, "project_id": 7603319, "title": "Add Superset as plugin of new `analyzer` type", "description": "- https://superset.apache.org/\n- https://github.com/apache/superset\n- https://pypi.org/project/apache-superset\n\n```bash\nmeltano add analyzer superset\n\nmeltano invoke superset db upgrade # Run automatically?\nmeltano invoke superset fab create-admin\nmeltano invoke superset init # Run automatically?\nmeltano invoke superset run\n```\n\nMeltano can manage Superset configuration (https://superset.apache.org/docs/installation/configuring-superset) by allowing values to be set for the keys in https://github.com/apache/superset/blob/master/superset/config.py, automatically generating `superset_config.py`, and pointing Superset there by using the `SUPERSET_CONFIG_PATH` env var. Users should also be able to set `SUPERSET_CONFIG_PATH` (or `meltano config superset set config_path <path>`) themselves to use their own config file.\n\nIdeally, Meltano would also be able to inject database connection strings corresponding to loaders directly into Superset so that these don't need to be managed in two places: https://superset.apache.org/docs/databases/installing-database-drivers, https://superset.apache.org/docs/databases/postgres. Possibly through the `DB_CONNECTION_MUTATOR` setting? https://github.com/apache/superset/issues/9045", "state": "opened", "created_at": "2021-02-24T16:52:39.171000Z", "updated_at": "2021-03-08T16:34:08.111000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Integrations", "Plugin Management", "Visualization", "flow::Doing"], "assignees": [8272195], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2605", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 8272195, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79729078, "iid": 2604, "project_id": 7603319, "title": "Add `meltano config <plugin> get <setting>` to view current value", "description": "Counterpart to `meltano config <plugin> set <setting> <value>`", "state": "opened", "created_at": "2021-02-24T16:41:21.582000Z", "updated_at": "2021-02-24T16:41:21.582000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Configuration"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2604", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79728386, "iid": 2603, "project_id": 7603319, "title": "Mention `meltano schedule run` whenever we discuss `meltano schedule`", "description": "- https://meltano.com/docs/getting-started.html#schedule-pipelines-to-run-regularly\n- https://meltano.com/docs/orchestration.html#create-a-schedule", "state": "opened", "created_at": "2021-02-24T16:31:28.222000Z", "updated_at": "2021-02-24T16:31:28.222000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2603", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79727893, "iid": 2602, "project_id": 7603319, "title": "Define framework for the proposal and consideration of optional extensions to the Singer spec", "description": "", "state": "opened", "created_at": "2021-02-24T16:24:51.030000Z", "updated_at": "2021-03-08T16:39:39.960000Z", "closed_at": null, "labels": ["Documentation", "flow::Triage", "improve-singer"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2602", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79727604, "iid": 2601, "project_id": 7603319, "title": "Add page listing maintainers of discoverable extractors and loaders", "description": "", "state": "opened", "created_at": "2021-02-24T16:20:59.529000Z", "updated_at": "2021-03-08T16:34:20.739000Z", "closed_at": null, "labels": ["Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2601", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79727355, "iid": 2600, "project_id": 7603319, "title": "Move index of discoverable taps and targest to dedicated website", "description": "This will be the Singer equivalent of PyPI, Docker Hub, or dbt Hub.\n\nWe may want to call it SingerHub: https://gitlab.com/meltano/meltano/-/issues/2597", "state": "opened", "created_at": "2021-02-24T16:17:33.998000Z", "updated_at": "2021-03-04T18:52:53.999000Z", "closed_at": null, "labels": ["improve-singer"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2600", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79647283, "iid": 2599, "project_id": 7603319, "title": "`meltano install <type> <name>` doesn't update inherited plugins", "description": "When using plugin inheritance, for example:\n\n```yaml\nextractors:\n  - name: tap-shopify\n    namespace: tap-shopify\n    pip_url: tap-shopify==1.2.0\n    executable: tap-shopify\n    capabilities:\n    - catalog\n    - state\n    - discover\n    settings:\n    - name: api_key\n    - name: shop\n    - name: start_date\n  - name: tap-shopify-foo\n    namespace: tap_shopify_foo\n    inherit_from: tap-shopify\n    config:\n      api_key: $TAP_SHOPIFY_API_KEY_FOO\n      shop: foo\n      start_date: '2020-01-01'\n```\n\nLet's say you update the inherited plugin version to `pip_url: tap-shopify==1.2.6`.\n\nYou might be tempted to use `meltano install extractor tap-shopify` to get the latest version. However, you'll also need to do this for all the child plugins (`meltano install extractor tap-shopify-foo`) as well.\n\nThe current behavior makes sense, but this example could be an easy mistake to make. I think most people just do `meltano install` and refresh all the plugins, but this can be painfully slow with a lot of plugins.\n\nA few solution ideas:\n\n- document this behavior, and/or warn about it in the console\n- detect when `meltano install` is called on a parent plugin and install all the child plugins, as either the default behavior or behind a flag (`--recursive`? `--cascade`? Needs a more friendly name)\n- some form of hashing to detect if a plugin needs to be installed, increasing the performance of a complete `meltano install` since unchanged plugins could be skipped. This could even happen at the start of meltano commands the same way database migrations do.", "state": "closed", "created_at": "2021-02-23T16:02:31.605000Z", "updated_at": "2021-02-25T23:32:13.339000Z", "closed_at": "2021-02-25T23:32:13.299000Z", "labels": ["Plugin Management", "feature requests"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2599", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": null, "closed_by_id": 689351, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79629640, "iid": 2598, "project_id": 7603319, "title": "Link to Singer on main repo is broken", "description": "On the main repo there is a link to Singer. This is pointing to https://gitlab.com/singer.io/ and it is currently not accessible.\n\n![Screenshot_2021-02-23_at_13.09.44](/uploads/d10d6ee7ca2e4278f6a96cd5222905c3/Screenshot_2021-02-23_at_13.09.44.png)", "state": "closed", "created_at": "2021-02-23T12:10:25.677000Z", "updated_at": "2021-02-23T17:09:49.009000Z", "closed_at": "2021-02-23T16:16:25.201000Z", "labels": ["bug"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2598", "weight": null, "has_tasks": false, "author_id": 4391348, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79587162, "iid": 2597, "project_id": 7603319, "title": "Register SingerHub.io", "description": "We may want to go with that name for the \"Singer equivalent of PyPI or Docker Hub\" described in  in https://meltano.com/docs/#embracing-singer that will \"give users (and tools) a central place to learn about the behavior, supported features, and maintenance status of all taps and targets in the ecosystem\"\n\nLet's reserve it before anyone else can :)", "state": "closed", "created_at": "2021-02-22T21:26:49.639000Z", "updated_at": "2021-02-24T16:17:37.903000Z", "closed_at": "2021-02-22T21:28:05.833000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2597", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79513049, "iid": 2596, "project_id": 7603319, "title": "Adding pipelinewise target_redshift to discoverable plugins", "description": "Adding support for AWS Redshift as a loader target by incorprating the pipelinewise target_redshift plugin to the discoverable plugins. https://github.com/transferwise/pipelinewise-target-redshift.", "state": "closed", "created_at": "2021-02-22T06:07:58.224000Z", "updated_at": "2021-02-22T16:30:43.689000Z", "closed_at": "2021-02-22T16:30:43.539000Z", "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2596", "weight": null, "has_tasks": false, "author_id": 8245693, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79504151, "iid": 2595, "project_id": 7603319, "title": "Add Jupyter as a Meltano plugin", "description": "By adding Jupyter/Jupyterhub as a plugin for Meltano it will be easy to create notebooks for exploratory data analysis. As @DouweM mentioned in the discussion on [this issue](https://gitlab.com/meltano/meltano/-/issues/539#note_512452727), this could tie in with [issue #2546](https://gitlab.com/meltano/meltano/-/issues/2546) by allowing relevant environment variables to be loaded as part of the `invoke` command e.g. `--with: meltano invoke --with=target-postgres jupyter notebook`\n\nIt'd be good to get a list of Jupyter-specific configuration which might need to be set up as part of this command. The first one which springs to mind is the database connection setup, which should use the connection parameters specified as part of the loader config.", "state": "opened", "created_at": "2021-02-22T00:10:53.561000Z", "updated_at": "2021-03-01T18:26:59.931000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Integrations", "feature requests"], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2595", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79441205, "iid": 2594, "project_id": 7603319, "title": "Taylor Introduction Blog Post", "description": "- [x] Get feedback on https://docs.google.com/document/d/1gFifKg6mzBD2E4gEDY4JVIdlNWH7atJUbE_H9kFu_To/edit\n- [x] Add to Wordpress\n- [x] Publish and close", "state": "closed", "created_at": "2021-02-19T21:21:40.603000Z", "updated_at": "2021-03-02T18:31:51.271000Z", "closed_at": "2021-02-26T18:14:20.147000Z", "labels": ["flow::Doing"], "assignees": [1942272], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2594", "weight": null, "has_tasks": true, "task_status": "3 of 3 tasks completed", "author_id": 1942272, "assignee_id": 1942272, "closed_by_id": 1942272, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79424568, "iid": 2593, "project_id": 7603319, "title": "Add `hotgluexyz` variant of `tap-intacct`", "description": "* https://github.com/hotgluexyz/tap-intacct\n* https://docs.hotglue.xyz/sources/intacct", "state": "closed", "created_at": "2021-02-19T16:18:26.092000Z", "updated_at": "2021-02-22T18:05:10.549000Z", "closed_at": "2021-02-22T18:05:10.365000Z", "labels": ["flow::Review"], "assignees": [8178925], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2593", "weight": null, "has_tasks": false, "author_id": 8178925, "assignee_id": 8178925, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79370504, "iid": 2592, "project_id": 7603319, "title": "Meltano Questions", "description": "Meta issue for capturing questions I have and either getting somebody to answer them or linking to the answer.", "state": "closed", "created_at": "2021-02-18T21:24:57.193000Z", "updated_at": "2021-02-26T18:22:06.949000Z", "closed_at": "2021-02-26T18:22:06.863000Z", "labels": [], "assignees": [1942272], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2592", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": 1942272, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79367422, "iid": 2591, "project_id": 7603319, "title": "Taylor Murphy - Onboarding", "description": "Initial Priorities:\n\n* @DouweM: Get access to systems\n  * [x] Google Workspace\n  * [x] 1Password\n  * [x] meltano.com/blog WordPress\n  * [x] gitlab.com/meltano maintainer\n  * [x] Slack workspace admin\n* Introduction Blog Post as a follow on from tweet thread https://twitter.com/tayloramurphy/status/1359957884562518016\n  * https://gitlab.com/meltano/meltano/-/issues/2594\n* Get Meltano stood up for Meltano https://gitlab.com/meltano/meta/-/issues/4\n  * Data Sources:\n    * Slack\n    * GitLab\n    * Twitter?\n    * Google Analytics\n    * Zendesk\n    * Intercom\n  * Warehouse: ??\n  * Infra: k8s? \n* Gain familiarity with Meltano codebase\n* Plan initial Meltano Demo Day (Target March?)\n* Updates to website/handbook (no particular order):\n  * History Page\n  * Direction\n  * Thinking about Metadata / Analytics\n  * Community strategy / plan\n  * More...\n* Make accounts:\n  * Intercom\n\nWork Days:\n\n|Dates|% Time on Meltano|\n|:-|:-:|\n|2021-02-19 | 25% |\n|2021-02-24 | 20% |\n|2021-03-03 & 2021-03-05 | 40% |\n|2021-03-11 & 2021-03-12 | 40% |\n|2021-03-17 to 2021-03-19 | 40% |\n|2021-03-22 and on | 100% |", "state": "closed", "created_at": "2021-02-18T19:54:19.427000Z", "updated_at": "2021-03-01T16:45:51.590000Z", "closed_at": "2021-02-26T18:21:58.248000Z", "labels": [], "assignees": [1942272], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2591", "weight": null, "has_tasks": true, "task_status": "5 of 5 tasks completed", "author_id": 1942272, "assignee_id": 1942272, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79296575, "iid": 2590, "project_id": 7603319, "title": "Add `hotgluexyz` variant of `tap-chargebee`", "description": "* https://github.com/hotgluexyz/tap-chargebee\n* https://docs.hotglue.xyz/sources/chargebee", "state": "closed", "created_at": "2021-02-17T20:15:54.621000Z", "updated_at": "2021-02-18T23:00:28.259000Z", "closed_at": "2021-02-18T23:00:28.213000Z", "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2590", "weight": null, "has_tasks": false, "author_id": 8178925, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79227428, "iid": 2589, "project_id": 7603319, "title": "Update Mission statement", "description": "", "state": "closed", "created_at": "2021-02-17T00:25:05.407000Z", "updated_at": "2021-02-17T01:03:44.310000Z", "closed_at": "2021-02-17T01:03:43.762000Z", "labels": ["Documentation", "Marketing", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2589", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1819600, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79221037, "iid": 2588, "project_id": 7603319, "title": "Add documentation for enabling logical replication in pipelinewise postgres tap", "description": "### Problem to solve\nMeltano docs do not reference the prerequisites for setting up the prerequisites needed for syncing via logical replication.\n\n- Meltano docs - https://meltano.com/plugins/extractors/postgres.html#settings\n\nThe steps needed are only mentioned in the GitHub docs of the Pipelinewise Tap Postgres, and not on their website docs.\n\n- Prerequisites - https://github.com/transferwise/pipelinewise-tap-postgres#log-based-replication-requirements\n\nAlso, here is a guide how to enable logical replication on AWS RDS - https://aws.amazon.com/blogs/database/using-logical-replication-to-replicate-managed-amazon-rds-for-postgresql-and-amazon-aurora-to-self-managed-postgresql/\n\n### Target audience\nEverybody who is using the transferwise (pipelinewise) tap postgres and want to setup logical replication\n\n### Further details\nLogical Replication is pretty much the best sync method, Meltano docs should cover everything without needing to go to the docs of Pipelinewise\n\n### Proposal\nAdd step by step guide mostly taken from https://github.com/transferwise/pipelinewise-tap-postgres#log-based-replication-requirements and https://aws.amazon.com/blogs/database/using-logical-replication-to-replicate-managed-amazon-rds-for-postgresql-and-amazon-aurora-to-self-managed-postgresql/\n\n### What does success look like, and how can we measure that?\nMeltano docs have all the steps how to setup Pipelinewise Tap Postgres with logical replication as the sync method", "state": "closed", "created_at": "2021-02-16T21:01:23.900000Z", "updated_at": "2021-03-02T22:45:27.943000Z", "closed_at": "2021-03-02T22:45:27.873000Z", "labels": ["Accepting Merge Requests", "Documentation", "Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2588", "weight": null, "has_tasks": false, "author_id": 298827, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1865739, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79213413, "iid": 2587, "project_id": 7603319, "title": "Discussion: how could Singer spec be changed to make generic tap/target entity", "description": "I want to flesh out the thinking on this a bit more over time, but it struck me today that it would be really cool if a single codebase could be used for taps and targets to the same service. Imagine instead of having `tap-snowflake` and `target-snowflake` there could be a generic `connector-snowflake` (or whatever we would want to call it). \n\nThis would simplify some things - mainly boilerplate around connection information and referencing a single connector if data is flowing both directions. Directionality could be controlled via Meltano or it could intuit it based on which side of the unix pipe it's on.", "state": "opened", "created_at": "2021-02-16T18:13:01.035000Z", "updated_at": "2021-03-03T15:07:00.412000Z", "closed_at": null, "labels": ["Discussion", "Exploration", "feature requests"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2587", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79201262, "iid": 2586, "project_id": 7603319, "title": "Fix typo in extractor Salesforce docs", "description": "The Salesforce docs currently list the `Select Fields By Default` option name as `is_sandbox`\n\nhttps://gitlab.com/meltano/meltano/-/blob/master/docs/src/plugins/extractors/salesforce.md#L304", "state": "closed", "created_at": "2021-02-16T15:09:23.102000Z", "updated_at": "2021-02-16T17:00:03.154000Z", "closed_at": "2021-02-16T17:00:03.075000Z", "labels": ["Documentation", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2586", "weight": null, "has_tasks": false, "author_id": 8178925, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1819600, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79158290, "iid": 2585, "project_id": 7603319, "title": "'A pipeline for data source [MY_CUSTOM_TAP] has not run yet' error when accessing report builder in Meltano UI", "description": "### Steps to reproduce\nAdd a custom tap (whose definition doesn't appear in the discover.yml file) and then after running a pipeline for this tap, then go to the Report builder section in the Meltano UI. The following error will appear in a red error message box: `A pipeline for data source [MY_CUSTOM_TAP] has not run yet. Please set up your connection.`\n\n\n### Possible fixes\n`find_definition_by_namespace` (https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin_discovery_service.py#L250) is called from the the `find_namespace_schedule` method of `ScheduleService` (https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/schedule_service.py#L135). However, this doesn't find a plugin definition in this case due to it being added as a custom extractor and its definition not been added to the discovery.yml file.\n\nAn easy fix might be to just add this custom definition to the discovery.yml file. However, in this particular case, the extractor is unlikely to be used by many other people, so perhaps it doesn't make sense to add it to the [public Meltano discovery.yml](https://www.meltano.com/discovery.yml). Instead, I could just use a local `discovery.yml` file.\n\nAn alternative would be to change the code so that it can discover custom plugins by inspecting `meltano.yml`. What are your thoughts on the best approach?", "state": "closed", "created_at": "2021-02-16T05:19:23.202000Z", "updated_at": "2021-02-23T17:17:42.650000Z", "closed_at": "2021-02-23T17:17:42.585000Z", "labels": ["Accepting Merge Requests", "Analyze", "UI", "bug", "flow::Doing"], "assignees": [5042742], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2585", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": 5042742, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79151124, "iid": 2584, "project_id": 7603319, "title": "Data Integration - Identity Lifecycle (HR -> IT) with Meltano", "description": "**What**\n\nVision - All organizations should have a fully automated HR -> IT process. Manually doing the same thing over and over again is insanity. \n\nIdentity Lifecycle management in a nutshell is how an organization creates, updates, and removes employees in their systems. Generally when an organization gets to ~50 users they'll have a HR (Human Resources) system (Workday, BambooHR, Rippling, ADP WorkforceNow, etc etc), and they'll also have some kind of IT system(s) for identity's (Google Workspace, Azure AD, Active Directory) some may even go as far as (Okta, Onelogin, Jumpcloud, etc). Enterprises generally have multiple IDPs that are integrated in different fashions. \n\nToday most SMBs 50-500 employees have a manual process for creating IT accounts. Their HR team contacts their IT team via email and the account's get created, updated or deleted. Manual processes lead to mistakes, check out https://www.onelogin.com/press-center/press-releases/new-research-from-onelogin-finds-over-50-of-ex-employees-still-have-access-to-corporate-applications.\n\nBusinesses that have this automated have multiple commercial options, but generally I believe Meltano could be very attractive to businesses that are maintaining their own scripts. \n\nAfter employees are in an organizations IDP they can generally take advantage of [SCIM ](http://www.simplecloud.info/)for applications that support SCIM. Applications that doesn't support SCIM are another interesting avenue but a bit outside the scope of this issue. \n\nHere's a short 3 minute video of me going over BambooHR -> Active Directory and should give the general gist of the idea. https://www.youtube.com/watch?v=9kO4St2TRk0 . \n\n**How**\n\nIdentity Lifecycle is pretty much an ETL job. We could Pull data from BambooHR (tap), push it to Active Directory, or Google(target). I understand that Meltano, Fivetran, Stick, etc are designed for loading data from systems to populate a Datawarehouse. I think the tooling overlaps enough that doing a data integration for identity is an interesting overlap. \n\nTo start I'll look at using a datawarehouse as an intermediate DB. Ideally all transformations will happen via DBT, and the google-admin-target can pull from one of the materializations. \n1. bamboohr-tap, google-admin-tap, postgres-target\n2. postgres-tap, google-admin-target\n\nThere's more work that's needed for Matching data between the two systems, and making the DBT transformations easy to work with but this seems like a good start.\n\nDoes anyone have any pointers or examples of people doing this with Data warehouses? I have a bunch of experience doing these integrations, but very little experience on the \"Big data\" side.  \n\n\n**My next steps right now:**\n- [x] Run through Python tutorial - https://docs.python.org/3/tutorial/index.html\n- [x] Connect Meltano to Google Analytics \n- [x] Run through DBT fundamentals https://courses.getdbt.com/courses/take/fundamentals/lessons\n- [x] Setup a tap / target with a DBT transformation in Meltano (can just follow the main website for this with gitlab / postgres)\n- [x] Map out what an integration would look like to Google Workspace (AdminSDK) with DBT doing the transformation. High level (Write a google-admin tap?, Write a target? etc) Write next steps\n\n\n@DouweM here's the write up, this is basically my business model but I firmly believe everyone should automate their Identity Lifecycle. I believe open sourcing this will lead more organizations automating their processes and will lead to a community of people working together to remove the old manual HR to IT processes.", "state": "opened", "created_at": "2021-02-16T01:13:45.710000Z", "updated_at": "2021-03-04T14:17:42.198000Z", "closed_at": null, "labels": ["Discussion", "Exploration", "Extract", "Load", "feature requests"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2584", "weight": null, "has_tasks": true, "task_status": "5 of 5 tasks completed", "author_id": 5562019, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79149092, "iid": 2583, "project_id": 7603319, "title": "Add `demo_project_discovery` job that will test changed discovery with last release", "description": "", "state": "opened", "created_at": "2021-02-15T23:38:17.950000Z", "updated_at": "2021-03-08T16:37:49.955000Z", "closed_at": null, "labels": ["Testing", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2583", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79148624, "iid": 2582, "project_id": 7603319, "title": "Fix link to repo in homepage footer", "description": "", "state": "closed", "created_at": "2021-02-15T23:12:52.685000Z", "updated_at": "2021-02-15T23:52:56.695000Z", "closed_at": "2021-02-15T23:52:56.627000Z", "labels": ["Documentation", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2582", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1819600, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79146381, "iid": 2581, "project_id": 7603319, "title": "`$r` and `$6` are stripped from `meltano.yml` config values because they're interpreted as env vars", "description": "This came up [in Slack](https://meltano.slack.com/archives/CFG3C3C66/p1613426116193200?thread_ts=1613416536.189700&cid=CFG3C3C66):\n\n>>>\nThe issue turned out that to be that Meltano interpreted `$r` and `$6` in passwords as [environment variable expansion](https://meltano.com/docs/configuration.html#expansion-in-setting-values), and would complain that the env vars `r` and `6` didn't exist, and strip out those variables from the password :face_palm:\n>>>\n\nWe can fix https://gitlab.com/meltano/meltano/-/blob/ba9f031a08df2241e95ba547dcf4a3110fb3c103/src/meltano/core/utils/__init__.py#L312 to only catch `ALL_CAPS` env vars at least N characters (TBD) long.", "state": "opened", "created_at": "2021-02-15T21:58:11.260000Z", "updated_at": "2021-03-08T16:45:31.478000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2581", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79144886, "iid": 2580, "project_id": 7603319, "title": "Support for flit, conda (or similar) based plugin installs", "description": "### Problem to solve\nBy supporting a wider group of package builders/installers we can allow for easier plugin development and (in certain cases) a more flexible usage pattern in production.\n\n### Target audiences\n- A developer who doesn't like/can't use pip.  \n- A developer who doesn't like/can't use setuptools and requires installing taps/targets locally (pip does not allow local installs to utilize PEP-517, which pretty much forces you to use setuptools instead-- this is my current use case, and probably a semi-common one for plugin devs).\n\n### Proposal\nInclude an optional plugin-level parameter that overrides the entire install process maybe? `install_command` option at the plugin level which could be `flit install -s path/to/plugin` or whatever your heart desired.  Obviously you would have to manage the given environment so the necessary tools could be installed (does this already exist in meltano?  It feels like it should somewhere)\n\n### What does success look like, and how can we measure that?\nPlugins can be installed via a number of different package installer systems.", "state": "opened", "created_at": "2021-02-15T21:21:03.775000Z", "updated_at": "2021-02-15T22:10:39.467000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests", "flow::To Do"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2580", "weight": null, "has_tasks": false, "author_id": 8208043, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79059686, "iid": 2579, "project_id": 7603319, "title": "Docs Development Steps NPM run serve:docs Missing Script", "description": "### Steps to reproduce\n```\n$ npm run serve:docs\nnpm ERR! missing script: serve:docs\nnpm ERR!\nnpm ERR! Did you mean one of these?\nnpm ERR!     dev:docs\n```\n\n\n### Possible fixes\n`npm run dev:docs` is what works from /docs/package.json\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2021-02-14T21:58:04.018000Z", "updated_at": "2021-02-15T21:11:37.372000Z", "closed_at": "2021-02-15T21:11:37.323000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [5562019], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2579", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 5562019, "assignee_id": 5562019, "closed_by_id": 87854, "milestone_id": 1805565, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79059271, "iid": 2578, "project_id": 7603319, "title": "Source 'tap-postgres' could not be installed, documentation update to match target", "description": "### What is the current *bug* behavior?\n_What is happening now?_\n\n\n\n### What is the expected *correct* behavior?\n_What should be happening?_\n\n\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\n```\n$ meltano install extractor tap-postgres\nInstalling 1 plugins...\nInstalling extractor 'tap-postgres'...\nExtractor 'tap-postgres' could not be installed: failed to install plugin 'tap-postgres'.\n```\n\n### Relevant logs and/or screenshots\nSame problem but for the tap side of postgres #2487\n\n\n### Possible fixes\nInstall libpq-dev\n\nFor debian\n`sudo apt install libpq-dev -y` \n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2021-02-14T21:36:53.692000Z", "updated_at": "2021-02-15T21:19:34.248000Z", "closed_at": "2021-02-15T21:19:34.195000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [5562019], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2578", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 5562019, "assignee_id": 5562019, "closed_by_id": 87854, "milestone_id": 1805565, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79004070, "iid": 2577, "project_id": 7603319, "title": "Add `hotgluexyz` variant of `tap-quickbooks`", "description": "* https://github.com/hotgluexyz/tap-quickbooks\n* https://docs.hotglue.xyz/sources/quickbooks", "state": "closed", "created_at": "2021-02-12T21:52:23.727000Z", "updated_at": "2021-02-16T18:28:00.287000Z", "closed_at": "2021-02-16T18:28:00.220000Z", "labels": ["flow::Review"], "assignees": [8178925], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2577", "weight": null, "has_tasks": false, "author_id": 8178925, "assignee_id": 8178925, "closed_by_id": 87854, "milestone_id": 1819600, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79000623, "iid": 2576, "project_id": 7603319, "title": "Make Airflow 2.0 the default", "description": "Follow-up to https://gitlab.com/meltano/meltano/-/issues/2558, depends on https://gitlab.com/meltano/meltano/-/issues/2575.", "state": "opened", "created_at": "2021-02-12T20:45:00.487000Z", "updated_at": "2021-02-12T20:53:00.847000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2576", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 79000530, "iid": 2575, "project_id": 7603319, "title": "Let plugin `pip_url` take into account Python version", "description": "The `pip_url` for `airflow` is currently `apache-airflow==1.10.14 --constraint https://raw.githubusercontent.com/apache/airflow/constraints-1.10.14/constraints-3.6.txt`, using a constraints file built specifically for Python 3.6, regardless of the version that's actually used.\n\nWith Airflow 1.10.14, this is OK, because the constraints file is actually valid on 3.7 and 3.8 as well, but this is not the case for Airflow 2.0.1's https://raw.githubusercontent.com/apache/airflow/constraints-2.0.1/constraints-3.6.txt.\n\nThis can be seen in https://gitlab.com/meltano/meltano/-/merge_requests/2032 and pipelines https://gitlab.com/michelrado/meltano/-/jobs/1026252711 (3.7) and https://gitlab.com/michelrado/meltano/-/jobs/1025856502 (3.8).\n\nOne way to solve this would be to let a `PYTHON_VERSION` environment variable to referenced from `pip_url`, like so:\n\n```yaml\npip_url: 'apache-airflow==2.0.1 --constraint https://raw.githubusercontent.com/apache/airflow/constraints-2.0.1/constraints-${PYTHON_VERSION}.txt'\n```", "state": "opened", "created_at": "2021-02-12T20:43:52.805000Z", "updated_at": "2021-03-08T16:40:00.223000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2575", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893435, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78854625, "iid": 2574, "project_id": 7603319, "title": "Highlight the importance of job_id parameter in the docs", "description": "### Problem to solve\nDocumentation mentions the `job_id` (last chapter in the [Getting Started](https://meltano.com/docs/getting-started.html#configure-the-loader), Storing logs in the [Deployment To Production](https://meltano.com/docs/production.html#storing-logs)...), but for newcomers it is easy to miss it because it is not stressed enough the importance of the parameter, as it is easy to miss/not understand for new Meltano users.\n\n\n### Target audience\nMostly people who are new or first timers with Meltano\n\n\n### Further details\nI have lost a whole day figuring out why the logical replication always does `logical_initial` on each run, and given that I was a new user to Meltano, I didn't understand the importance of the `job_id` parameter, as a lot of stuff was new to me, and basically the `job_id` is the most important feature/parameter as this enables incremental refreshes, which is one of the most important aspects of an ETL process.\n\n\n### Proposal\nDescribe a bit more in-depth the importance of the `job_id` parameter, probably make it as a Tip or Note section (different colour maybe), especially in the Getting Started page, so newcomers immediately understand that as the most important part.\n\n\n### What does success look like, and how can we measure that?\nBetter documentation, simple as that\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\nNot Applicable\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2021-02-10T20:47:52.778000Z", "updated_at": "2021-03-08T16:44:06.341000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "Load", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2574", "weight": null, "has_tasks": false, "author_id": 298827, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78841510, "iid": 2573, "project_id": 7603319, "title": "When executable doesn't exist, `meltano invoke airflow` fails with error about `airflow.cfg` instead of missing executable", "description": "As reported [in Slack](https://meltano.slack.com/archives/CQUDGG7U2/p1612906795008100?thread_ts=1612903195.006900&cid=CQUDGG7U2) by Pankaj Saini.\n\n```\n[Errno 2] No such file or directory: '/project/.meltano/run/airflow/airflow.cfg'\n```\n\nThis happens because [`Airflow.before_cleanup`](https://gitlab.com/meltano/meltano/-/blob/426dcc019b98077a14cabece934532e0bdd4779b/src/meltano/core/plugin/airflow.py#L98) attempts to delete the config file even if it was never created, as would be the case when the Airflow executable couldn't be found in the first place.\n\nWe should suppress `FileNotFound` errors in this method.", "state": "opened", "created_at": "2021-02-10T17:47:26.478000Z", "updated_at": "2021-02-10T17:47:26.478000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2573", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78840945, "iid": 2572, "project_id": 7603319, "title": "When `meltano install` was run outside of Docker, `meltano invoke` and `meltano elt` fail with `ExecutableNotFoundError` inside Docker", "description": "As reported [in Slack](https://meltano.slack.com/archives/CQUDGG7U2/p1612906795008100?thread_ts=1612903195.006900&cid=CQUDGG7U2) by Pankaj Saini.\n\nError:\n\n```\nmeltano.core.plugin_invoker.ExecutableNotFoundError: Executable 'airflow' could not be found. Orchestrator 'airflow' may not have been installed yet using `meltano install orchestrator airflow`, or the executable name may be incorrect.\n```\n\nCaused by:\n\n```\nFileNotFoundError: [Errno 2] No such file or directory: '/project/.meltano/orchestrators/airflow/venv/bin/airflow': '/project/.meltano/orchestrators/airflow/venv/bin/airflow'\n```\n\nUnlike the error suggests, the plugin's own executable actually does exist at the identified path (relative from the Docker container), but the `python` executable pointed at by plugin executable's hashbang doesn't, since it uses an absolute path that was determined when `meltano install` was run outside of the Docker container, which won't be valid inside the container's environment.\n\nThe solution is to always run `meltano install` and `meltano invoke`/`meltano elt` in the same environment, but we should:\n- [ ] make the error message less confusing\n- [ ] document this explicitly in https://meltano.com/docs/containerization.html#docker-compose / https://gitlab.com/meltano/files-docker-compose", "state": "opened", "created_at": "2021-02-10T17:43:36.103000Z", "updated_at": "2021-03-08T16:40:27.176000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Docker", "Documentation", "bug", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2572", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78836901, "iid": 2571, "project_id": 7603319, "title": "Ensure Google Analytics is set up on blog", "description": "Paths under https://meltano.com/blog/ are not currently showing up in GA.", "state": "closed", "created_at": "2021-02-10T17:16:51.108000Z", "updated_at": "2021-02-10T17:23:12.049000Z", "closed_at": "2021-02-10T17:23:12.017000Z", "labels": ["Marketing", "flow::To Do"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2571", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78836394, "iid": 2570, "project_id": 7603319, "title": "Show unsupported streams as such in `meltano select --list --all`", "description": "`meltano select --list --all` currently lists streams and properties that are defined in the catalog as `inclusion: unsupported` as if they were simply excluded, which suggests to the user that they could select these using `meltano select <plugin> <stream> <property>`, even though this would actually be ignored and they will continue to show up as excluded. \n\nTo prevent confusion, we should explicitly show these streams/properties as unsupported.", "state": "opened", "created_at": "2021-02-10T17:13:05.272000Z", "updated_at": "2021-02-10T17:13:05.272000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Extract", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2570", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78835621, "iid": 2569, "project_id": 7603319, "title": "Interpret `<stream>` `select` rules as `<stream>.*`", "description": "Right now, [`select` extra](https://meltano.com/docs/plugins.html#select-extra) entries need to have the format `<stream>.<property>`, which means that `tags.*` will correctly select the `tags` stream and all of its properties, but `tags` will only select the `tags` stream itself, but not any of its properties. \n\nThis distinction is not of much use, and we should interpret omission of `<property>` as `*`, just like `meltano select tap-foo stream-bar` is already short for `meltano select tap-foo stream-bar '*'`.", "state": "opened", "created_at": "2021-02-10T17:07:31.722000Z", "updated_at": "2021-02-10T17:07:31.722000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Extract", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2569", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78834737, "iid": 2568, "project_id": 7603319, "title": "Add command to reset state for a Job ID/schedule", "description": "When using an orchestrator to run pipelines on a schedule, it may be more practical to say \"do a full refresh on the next run\" by resetting the incremental replication state, and then leaving it to the orchestrator to perform the next run when appropriate, than it is to explicitly do a full refresh by manually logging into the environment and using the `--full-refresh` flag on `meltano elt` or `meltano schedule run`.\n\nWe could realize this by inserting a new row into the `job` table without state that will still be taken into account when the next run tries to determine the latest state, but it may be odd to have `job` rows that don't actually correspond to runs, especially when we start listing runs in the UI and CLI: https://gitlab.com/meltano/meltano/-/issues/2567\n\nAnother option would be to flip a flag on the most recent run record to say its state should be ignored, so that we don't end up with extra \"fake\" runs.\n\nSince this should work for all Job IDs, not just those that have a corresponding schedule, `meltano reset(-state) <job_id>` would be more appropriate than `meltano schedule reset(-state) <schedule>`, although I don't love how it looks.\n\nSine we have `--dump=state` on `meltano elt` and `meltano schedule run`, it may make sense to add `meltano state <job_id>` (to dump) and `meltano state <job_id> reset`, like we have `meltano config <plugin>` (to dump) and `meltano config <plugin> reset`.", "state": "opened", "created_at": "2021-02-10T17:01:15.902000Z", "updated_at": "2021-02-10T17:02:27.205000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Extract", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2568", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78833985, "iid": 2567, "project_id": 7603319, "title": "Add command to list recent/all runs for a job ID", "description": "Equivalent to running `SELECT * FROM job WHERE job_id='<job_id>'` against the system database.", "state": "opened", "created_at": "2021-02-10T16:56:26.003000Z", "updated_at": "2021-02-10T17:01:48.648000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Extract", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2567", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78832542, "iid": 2566, "project_id": 7603319, "title": "Document how to manage incremental replication state without a persistent system database", "description": "As I wrote on Slack:\n\n>>>\nNote that there's already a workaround for state management with ephemeral system databases: since `meltano elt` (and `meltano schedule run`) can take a `--state` argument to run with a specific state, and can be run with `--dump=state` to dump the current state instead of running the underlying pipeline, a serverless ELT wrapper can:\n- download the state from S3\n- run the pipeline with `--state=<downloaded state>`\n- dump the current state (from the local ephemeral system database) to a file with `--dump=state > new-state.json`\n- upload the new state to S3\n>>>", "state": "opened", "created_at": "2021-02-10T16:46:47.822000Z", "updated_at": "2021-02-11T18:41:22.466000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2566", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78832180, "iid": 2565, "project_id": 7603319, "title": "Document that moving the `start_date` into the past doesn't have effect when incremental replication state is used", "description": "Since the bookmark dates in the incremental replication state will take priority over the `start_date` setting, moving the `start_date` into the past will not result in more historical data being pulled unless a `--full-refresh` `meltano elt` run is performed.", "state": "opened", "created_at": "2021-02-10T16:44:46.126000Z", "updated_at": "2021-02-10T16:44:46.408000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2565", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78831502, "iid": 2564, "project_id": 7603319, "title": "List products that are built using Meltano on website", "description": "Some data products use Meltano/Singer to power their internal data integration needs, often without directly exposing the Meltano project to the end user.\n\n- Blotout.io\n- Halosight.com\n- Singerly (once it's out of alpha)", "state": "opened", "created_at": "2021-02-10T16:39:11.035000Z", "updated_at": "2021-03-08T22:16:00.402000Z", "closed_at": null, "labels": ["Marketing", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2564", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78831219, "iid": 2563, "project_id": 7603319, "title": "Download discovery.yml access logs to learn about unique users and versions", "description": "We can learn more from these logs now that we have https://gitlab.com/meltano/meltano/-/issues/2502 https://gitlab.com/meltano/meltano/-/issues/2503.\n\nWe can start by just downloading the files, but should eventually build a custom tap!", "state": "opened", "created_at": "2021-02-10T16:36:09.413000Z", "updated_at": "2021-03-08T16:37:16.760000Z", "closed_at": null, "labels": ["flow::To Do"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": "2021-03-12", "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2563", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78830865, "iid": 2562, "project_id": 7603319, "title": "Remove tutorials that are totally outdated", "description": "Some that currently have a warning at the top should be removed entirely https://meltano.com/tutorials/", "state": "opened", "created_at": "2021-02-10T16:33:15.015000Z", "updated_at": "2021-03-08T16:44:13.327000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Tutorials", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2562", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78750062, "iid": 2561, "project_id": 7603319, "title": "Misconfigured tests are passing incorrectly", "description": "While working on #2560 I noticed the tests in [`test_invoke.py`](https://gitlab.com/meltano/meltano/-/blob/master/tests/meltano/cli/test_invoke.py#L42) are false positives. The actual functionality under test is working as expected, but if it were to break the tests would continue to pass.\n\nThe tests call `invoke.called_with` which rather than asserting that the mock was called with the given arguments, actually just calls a mocked method `called_with`. You can verify this behavior with a breakpoint and calling `invoke.call_count`, `invoke.called`, etc. Changing the call to `invoke.assert_called_with([\"--help\"])` will cause the test to fail. Presumably this is because the mocked `PluginInvoker` isn't being used by the code under test.", "state": "opened", "created_at": "2021-02-09T21:03:00.783000Z", "updated_at": "2021-03-08T16:34:03.071000Z", "closed_at": null, "labels": ["Testing", "bug", "flow::Review"], "assignees": [689351], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2561", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 689351, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78680135, "iid": 2560, "project_id": 7603319, "title": "Add support for shortcut commands for plugins", "description": "[As discussed](https://gitlab.com/meltano/meltano/-/issues/2544#note_502908659) in #2544, add a new `--command` flag to `meltano invoke` which can run variants of the plugin with different arguments as defined in `meltano.yml`. For example:\n\n```yaml\n  - name: dbt\n    namespace: dbt\n    pip_url: dbt==0.16.1\n    executable: dbt\n    commands:\n      seed: seed --project-dir $DBT_PROJECT_DIR --profile $DBT_PROFILE --target $MELTANO_EXTRACTOR_NAMESPACE --select $DBT_MODEL\n      snapshot: snapshot --project-dir $DBT_PROJECT_DIR --profile $DBT_PROFILE --target $MELTANO_EXTRACTOR_NAMESPACE --select $DBT_MODEL\n```\n\nWhich could then be invoked with `meltano invoke --command dbt seed` (note that the commands above are illustrative and may not actually be correct).\n\nThis functionality could apply to all plugins that have an executable, regardless of type.\n\nThe value prop here is to abstract common commands for a plugin to a shortcut so that specific arguments can be shared with other users of the project.", "state": "opened", "created_at": "2021-02-09T00:20:37.455000Z", "updated_at": "2021-03-08T16:34:01.954000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Doing"], "assignees": [689351], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2560", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 689351, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78659586, "iid": 2559, "project_id": 7603319, "title": "Bump Airflow to 1.10.14", "description": "Ahead of upgrade to Airflow 2: https://gitlab.com/meltano/meltano/-/issues/2558", "state": "closed", "created_at": "2021-02-08T17:31:12.891000Z", "updated_at": "2021-02-08T18:11:41.094000Z", "closed_at": "2021-02-08T18:11:40.924000Z", "labels": ["Orchestrate", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2559", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1805565, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78627709, "iid": 2558, "project_id": 7603319, "title": "Add support for Airflow 2.0", "description": "### Problem to solve\nIt's not possible to use Airflow 2.0 as an orchestrator out of the box with Meltano today. This is due to Airflow's change of the CLI commands for database initialization. Airflow 1.x uses `airflow initdb` and 2.x uses the new format `airflow db init`.\n\n### Target audience\nData engineers who want to use the new features in Airflow 2.0 for their pipelines.\n\n### Proposal\nAs for `airflow db init`, we should be able to branch here based on the result of airflow --version: [https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/airflow.py#L80](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/airflow.py#L80)\n\nIf there are also changes in how DAGs are defined, we'd also need changes in [https://gitlab.com/meltano/files-airflow/-/blob/master/bundle/orchestrate/dags/meltano.py](https://gitlab.com/meltano/files-airflow/-/blob/master/bundle/orchestrate/dags/meltano.py)\n\n\n### What does success look like, and how can we measure that?\nBoth Airflow 1.x & Airflow 2.x are supported by the Meltano CLI.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n[Upgrading to Airflow 2.x](https://airflow.apache.org/docs/apache-airflow/stable/upgrading-to-2.html)", "state": "closed", "created_at": "2021-02-08T10:02:41.673000Z", "updated_at": "2021-02-15T22:11:50.874000Z", "closed_at": "2021-02-15T22:11:50.812000Z", "labels": ["Accepting Merge Requests", "Orchestrate", "flow::Doing"], "assignees": [100165], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2558", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 100165, "assignee_id": 100165, "closed_by_id": 87854, "milestone_id": 1805565, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78515365, "iid": 2557, "project_id": 7603319, "title": "Add `discover` and `catalog` capabilities to tap-gitlab and document streams that depend on settings", "description": "To do once https://gitlab.com/meltano/tap-gitlab/-/merge_requests/34 is merged and https://gitlab.com/meltano/tap-gitlab/-/issues/25 resolved.\n\n- `epics` and `epic_issues` streams depend on `ultimate_license` setting\n- `merge_request_commits` stream depends on `fetch_merge_request_commits` setting\n- `pipelines_extended` stream depends on `fetch_pipelines_extended` setting", "state": "closed", "created_at": "2021-02-05T18:33:15.262000Z", "updated_at": "2021-02-11T17:50:23.140000Z", "closed_at": "2021-02-11T17:50:23.078000Z", "labels": ["Accepting Merge Requests", "Extract", "feature requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2557", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1805565, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78456143, "iid": 2556, "project_id": 7603319, "title": "Don't select streams and fields with `selected-by-default: false` metadata by default", "description": "The default value of an extractor's [`select` extra](https://meltano.com/docs/plugins.html#select-extra) is currently `['*.*']`, which means \"select all streams and all fields\", even though some streams and fields may have the [`selected-by-default` metadata](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#metadata) (\"Indicates if a node in the schema should be replicated if a user has not expressed any opinion on whether or not to replicate it.\") set to `false` and should therefore _not_ be selected by default, when the user hasn't explicitly overridden the selection rules.\n\nMeltano can't currently distinguish between the default `*.*` value, and a user-provided `*.*` value coming from `meltano.yml`, so in both cases it'll just select all streams that show up in the catalog as `inclusion: available`. To support `selected-by-default` properly, Meltano would need to have an alternative to `*` that doesn't mean \"all available\", but \"all selected-by-default\".\n\nExisting users who did not override the selection rules and rely on the default would be surprised if the meaning of \"default\" suddenly changes from \"all available\" to \"all selected-by-default\" though.\n\nIf we change the default, we will need to clearly document this and guide users through updating their selection rules.", "state": "opened", "created_at": "2021-02-04T21:12:53.320000Z", "updated_at": "2021-02-05T18:05:58.548000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2556", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78452728, "iid": 2555, "project_id": 7603319, "title": "Allow default values to be overridden with `null`", "description": "### Problem to solve\nGCP doesn't require an explicit GOOGLE_APPLICATION_CREDENTIALS file to be set if credentials can be determined from the default account when running in/on Compute Engine, Google Kubernetes Engine, App Engine, Cloud Run, and Cloud Functions https://cloud.google.com/docs/authentication/production#automatically\n\n\n### Target audience\nFor those deploying Meltano within GCP, it is easier and more secure to not have to create and manage a service account file.\n\n### Proposal\nAllow default values, such as https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L1063, to be overridden with null\n\nThis way the Application Default Credentials library will attempt to use the default service account that Compute Engine, Google Kubernetes Engine, App Engine, Cloud Run, and Cloud Functions provide.", "state": "opened", "created_at": "2021-02-04T19:44:21.374000Z", "updated_at": "2021-02-04T21:45:23.195000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Configuration", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2555", "weight": null, "has_tasks": false, "author_id": 6002862, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78444760, "iid": 2554, "project_id": 7603319, "title": "Document competitors of Meltano", "description": "As Meltano grows it would be useful to keep track of competitors to the product. Thinking along the lines of https://about.gitlab.com/devops-tools/ as a comparison, it'd be good to have a list to refer back to since more people are probably familiar with other tools initially rather than Meltano.", "state": "opened", "created_at": "2021-02-04T16:46:18.414000Z", "updated_at": "2021-02-04T17:36:23.684000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Marketing"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2554", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78318033, "iid": 2553, "project_id": 7603319, "title": "Some links to Airflow docs are broken because they link to `stable` instead of `1.10.14`", "description": "We should double-check all links to `https://airflow.apache.org/docs`.\n\nAdditionally, [this link](https://gitlab.com/meltano/meltano/-/blob/master/docs/src/docs/production.md#L192) to https://airflow.apache.org/docs/stable/best-practices.html#deployment-in-production should point at https://airflow.apache.org/docs/apache-airflow/1.10.14/production-deployment.html instead or additionally.", "state": "closed", "created_at": "2021-02-02T21:42:11.539000Z", "updated_at": "2021-02-08T21:46:22.724000Z", "closed_at": "2021-02-08T21:46:22.616000Z", "labels": ["Documentation", "Orchestrate", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2553", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1805565, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78316040, "iid": 2552, "project_id": 7603319, "title": "Slack has 700+ users now", "description": "The homepage still says 600+.", "state": "closed", "created_at": "2021-02-02T21:27:27.846000Z", "updated_at": "2021-02-02T21:28:36.722000Z", "closed_at": "2021-02-02T21:28:36.665000Z", "labels": ["Marketing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2552", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795247, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78132619, "iid": 2551, "project_id": 7603319, "title": "Improve error messages for `meltano add` when applied to non-standard plugins without the `--custom` flag", "description": "### Problem to solve\n\nError message when running `meltano add` can be more helpful towards new users. The current error message for `meltano add extractor tap-pardot` is `Extractor 'tap-pardot' is not known to Meltano`.\n\n### Target audience\n\nThis is mostly targeted towards new users who are less familiar with the cli syntax.\n\n### Further details\n\nThe tap is configurable using the `--custom` flag and we can hint to new users what the proper syntax should be.\n\n### Proposal\n\nExpand the error message and provide sample cli usage and/or sample invocations for users who should rerun the command using `--custom`.\n\n\n### What does success look like, and how can we measure that?\n\nSuccess would be measured by faster onboarding for new users.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2021-01-31T03:27:04.398000Z", "updated_at": "2021-02-02T19:05:02.840000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2551", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78115479, "iid": 2550, "project_id": 7603319, "title": "Airflow orchestrator to postgresql means not all airflow configs are in sync", "description": "After switching the airflow orchestrator to use a Postgres instance as described here: https://meltano.com/docs/production.html#airflow-orchestrator The webserver doesn't work anymore.\n\n`meltano invoke airflow scheduler` works perfectly and the tables are generated in the postgres database.\n\nRunning `meltano invoke airflow webserver` gives the following error:\n```\nCan't initialize database: (sqlite3.OperationalError) locking protocol\n[SQL: PRAGMA journal_mode=WAL]\n(Background on this error at: http://sqlalche.me/e/13/e3q8)\n```\n\nAs the webserver tries to connect to sqlite I assume that there is a an error with the configuration.", "state": "closed", "created_at": "2021-01-30T13:54:16.478000Z", "updated_at": "2021-02-15T22:37:31.587000Z", "closed_at": "2021-02-15T22:37:31.433000Z", "labels": ["Customer Support", "Orchestrate"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2550", "weight": null, "has_tasks": false, "author_id": 8097371, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78104342, "iid": 2549, "project_id": 7603319, "title": "DataOps, not DevOps", "description": "It's been pointed out to me that \u201cDataOps era\u201d would be better than \u201cDevOps era\u201d: https://www.reddit.com/r/dataengineering/comments/l863az/meltano_elt_for_the_devops_era_open_source/", "state": "closed", "created_at": "2021-01-30T01:24:59.166000Z", "updated_at": "2021-01-30T01:26:26.808000Z", "closed_at": "2021-01-30T01:26:26.747000Z", "labels": ["Marketing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2549", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78086997, "iid": 2548, "project_id": 7603319, "title": "Tweak logos and spacing on homepage", "description": "- [x] Remove logos for least well known companies\n- [x] Make logos larger\n- [x] Fit \"ELT for the DevOps era\" on one line on mobile", "state": "closed", "created_at": "2021-01-29T17:32:13.729000Z", "updated_at": "2021-01-29T17:45:52.881000Z", "closed_at": "2021-01-29T17:45:52.793000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2548", "weight": null, "has_tasks": true, "task_status": "3 of 3 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78030261, "iid": 2547, "project_id": 7603319, "title": "Add native support for running `dbt test` as part of `meltano elt`", "description": "### Problem to solve\nAs a fan of `dbt`, I really like the ability to run `dbt test` as part of my regular ELT pipelines. In fact, outside of Meltano I'd probably setup Airflow DAGs that would run a dbt project in stages like:\n1. `dbt test` against the source rows that have been EL'd in\n2. `dbt run` to build the analytics models\n3. `dbt test` again to validate the analytics models\n\nIf any of those tasks fail, the whole DAG would fail. However, there doesn't seem to be a way to actually run `dbt test` as part of a `meltano elt` pipeline, which means that I would have to refactor my project to use Meltano for \"EL\" but dbt and airflow separately for the rest...\n\nSo overall, the problem is that: **I want meltano to support running dbt tests in my pipelines so I can be confident about the quality of my pipeline runs without configuring a separate dbt project**.\n\n\n### Target audience\nData engineers who want to use `dbt test` to automate schema and data tests for their pipelines.\n\n\n### Proposal\nMy initial idea would maybe be to extend `meltano elt` with another argument, like...\n```\nmeltano elt tap-gitlab target-postgres --transform run --test\n```\n\nIf the `transformer` supports it, that would add a \"test\" stage on the end of the pipeline so that it would become tap > target > transform > test.\n\n\n### What does success look like, and how can we measure that?\nNot sure; I'm sure the maintainers here would have a better idea of how to tackle this...\n\nFor me, success would be that I could guarantee that `dbt test` runs every time the related tap runs :smile: \n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2021-01-28T23:29:53.019000Z", "updated_at": "2021-02-25T00:05:21.638000Z", "closed_at": null, "labels": ["feature requests"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 3, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2547", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7542822, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78029849, "iid": 2546, "project_id": 7603319, "title": "Add option to include config env vars of other plugins in plugin invocation environment", "description": "### What is the current *bug* behavior?\nI've configured a handful of dbt tests in my meltano project, but when I try to run them via `meltano invoke dbt test` a rather cryptic error occurs:\n```\nroot@1d67acfca30b:/project# meltano invoke dbt test\nRunning with dbt=0.16.1\nEncountered an error:\nCompilation Error\n  Env var required but not provided: 'DBT_TARGET'\n```\n\nA workaround for this is to manually specify all the ENV vars that the dbt command seems to rely on, e.g.\n```\nroot@66ebf1065348:/project# DBT_TARGET=postgres PG_ADDRESS=postgres PG_PORT=5432 PG_USERNAME=... PG_PASSWORD=... PG_DATABASE=... meltano invoke dbt test\n```\n\n### What is the expected *correct* behavior?\nI'd expect that, since the `dbt` transform stage works correctly when invoked via `meltano elt`, it should also be possible to run `meltano invoke dbt` commands directly through some mechanism.\n\n\n### Steps to reproduce\n1. Create a new meltano project with a tap and loader\n2. Install dbt as a transformer\n3. Define a `schema.yml` file with at least one schema test (see dbt docs for this)\n4. Run the pipeline transform via `meltano elt`, using the `--transform only` flag, and check the dbt output to ensure your tests exist:\n```\nroot@66ebf1065348:/project# meltano schedule run mysql-to-postgres --transform only\nmeltano | Extract & load skipped.\nmeltano | Running transformation...\ndbt     | Running with dbt=0.16.1\ndbt     | Checking ../.meltano/transformers/dbt/target/*\ndbt     | Found 1 model, 8 tests, 0 snapshots, 0 analyses, 127 macros, 0 operations, 0 seed files, 0 sources\n```\n(notice the \"8 tests\" in the log above)\n\n5. Try running `meltano invoke dbt test`\n6. Notice an error like the above\n\n\n### Relevant logs and/or screenshots\nSee examples above\n\n\n### Possible fixes\nIt seems the root cause for this is that `meltano invoke dbt` is lacking the \"pipeline\" context that `meltano elt` has, which configures the various tap/target env vars that the dbt invoker relies on. This makes sense to me- it wouldn't be possible for meltano to \"know\" how to invoke dbt correctly if there were multiple taps & targets configured in the project, each of which might have their own dbt project (?).\n\nA reasonable solution to this would be something like: `meltano invoke dbt --with-schedule mysql-to-postgres` or something similar, which would load the same context that `meltano schedule run` uses...?\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2021-01-28T23:19:02.326000Z", "updated_at": "2021-03-08T16:39:31.914000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2546", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7542822, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78029472, "iid": 2545, "project_id": 7603319, "title": "Support Python 3.9", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\nInstalling meltano via pip3 doesn't work using Python 3.9.0 (tested on Macbook Pro OS 10.15.7)\n\n\n### What is the expected *correct* behavior?\n_What should be happening?_\npip3 install succeeds\n\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\n```\n$ mkdir .venv\n$ python -m venv .venv/meltano\n$ python --version\nPython 3.9.0\n$ source .venv/meltano/bin/activate\n$ pip3 install meltano\n```\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\n\nsnippet of error below, full log attached [log.txt](/uploads/8db6bfac6b9e11947fc4ac52d018da82/log.txt)\n\n```\n12 warnings and 1 error generated.\n        error: Command \"clang -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk -I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -Inumpy/core/include -Ibuild/src.macosx-10.15-x86_64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/usr/local/include -I/usr/local/opt/openssl@1.1/include -I/usr/local/opt/sqlite/include -I/Users/arjunbanker/Development/test/meltano/.venv/meltano/include -I/usr/local/Cellar/python@3.9/3.9.0_4/Frameworks/Python.framework/Versions/3.9/include/python3.9 -Ibuild/src.macosx-10.15-x86_64-3.9/numpy/core/src/common -Ibuild/src.macosx-10.15-x86_64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-10.15-x86_64-3.9/numpy/core/src/common -Ibuild/src.macosx-10.15-x86_64-3.9/numpy/core/src/npymath -c numpy/random/mtrand/mtrand.c -o build/temp.macosx-10.15-x86_64-3.9/numpy/random/mtrand/mtrand.o -MMD -MF build/temp.macosx-10.15-x86_64-3.9/numpy/random/mtrand/mtrand.o.d\" failed with exit status 1\n        ----------------------------------------\n    ERROR: Command errored out with exit status 1: /Users/arjunbanker/Development/test/meltano/.venv/meltano/bin/python -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/private/var/folders/84/3d_vvqws75v94jfvhw8bys7c0000gn/T/pip-install-j_wbwgzp/numpy/setup.py'\"'\"'; __file__='\"'\"'/private/var/folders/84/3d_vvqws75v94jfvhw8bys7c0000gn/T/pip-install-j_wbwgzp/numpy/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /private/var/folders/84/3d_vvqws75v94jfvhw8bys7c0000gn/T/pip-record-30sq7_m4/install-record.txt --single-version-externally-managed --prefix /private/var/folders/84/3d_vvqws75v94jfvhw8bys7c0000gn/T/pip-build-env-w4adfc8s/overlay --compile --install-headers /private/var/folders/84/3d_vvqws75v94jfvhw8bys7c0000gn/T/pip-build-env-w4adfc8s/overlay/include/site/python3.9/numpy Check the logs for full command output.\n```\n\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\nUnsure currently, I worked around using a docker image.\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2021-01-28T23:06:05.312000Z", "updated_at": "2021-03-08T16:12:05.261000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug", "flow::To Do"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2545", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 8087944, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78026959, "iid": 2544, "project_id": 7603319, "title": "Support for a generic plugin type for arbitrary python cli plugins", "description": "[As discussed](https://gitlab.com/meltano/meltano/-/issues/2336#note_496504775) in #2336, a new plugin type which is a light wrapper around the `BasePlugin` interface would allow arbitrary python packages which have an executable to be usable with `meltano invoke`, leveraging Meltano's venv isolation and environment variables.", "state": "opened", "created_at": "2021-01-28T21:44:08.818000Z", "updated_at": "2021-03-08T16:34:04.474000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Review"], "assignees": [689351], "user_notes_count": 8, "merge_requests_count": 2, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2544", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 689351, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78026262, "iid": 2543, "project_id": 7603319, "title": "PyPI claims Python 3.9 is supported", "description": "This requirement is incorrect: https://gitlab.com/meltano/meltano/-/blob/8034a24b2f3aa8eb76e132590627b07a5c2809e2/pyproject.toml#L20\n\n3.9 is not actually supported yet: https://meltano.com/docs/installation.html#python-3-6-3-7-or-3-8", "state": "closed", "created_at": "2021-01-28T21:23:06.697000Z", "updated_at": "2021-01-28T22:08:46.005000Z", "closed_at": "2021-01-28T22:08:44.586000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2543", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 78020389, "iid": 2542, "project_id": 7603319, "title": "Move logos to separate section on homepage", "description": "This will create more room for text in the section above the fold, and will allow us to list some more logos from https://gitlab.com/meltano/meltano/-/issues/2531.", "state": "closed", "created_at": "2021-01-28T18:43:29.676000Z", "updated_at": "2021-01-28T18:48:17.856000Z", "closed_at": "2021-01-28T18:48:17.803000Z", "labels": ["Marketing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2542", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77957531, "iid": 2541, "project_id": 7603319, "title": "Table on Partners page is too narrow on mobile", "description": "", "state": "closed", "created_at": "2021-01-27T21:27:37.939000Z", "updated_at": "2021-01-27T21:29:11.790000Z", "closed_at": "2021-01-27T21:29:11.739000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2541", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77829323, "iid": 2540, "project_id": 7603319, "title": "`meltano schedule run` exits with status 0 even when `meltano elt` fails", "description": "", "state": "closed", "created_at": "2021-01-25T23:21:49.187000Z", "updated_at": "2021-01-26T16:58:59.809000Z", "closed_at": "2021-01-26T16:58:59.732000Z", "labels": ["Extract", "Load", "Orchestrate", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2540", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77827051, "iid": 2539, "project_id": 7603319, "title": "Add #introductions Slack channel", "description": "We can automatically send new users a welcome message suggesting that they post there describing who they are, where they work, what use case they're evaluating Meltano/Singer for, and what sources/destinations they're primarily interested in.", "state": "closed", "created_at": "2021-01-25T22:06:27.828000Z", "updated_at": "2021-03-02T20:53:49.873000Z", "closed_at": "2021-03-02T18:39:05.108000Z", "labels": ["Community", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2539", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826816, "iid": 2538, "project_id": 7603319, "title": "Add Troubleshooting docs", "description": "We already have one Troubleshooting section: https://meltano.com/plugins/loaders/postgres.html#troubleshooting, but we should one for pipelines in general, on the Data Integration (EL) guide, and linked from the `meltano elt` docs.\n\nThe first recommendation will often be to enable debugging mode: https://meltano.com/docs/command-line-interface.html#debugging", "state": "opened", "created_at": "2021-01-25T21:55:53.488000Z", "updated_at": "2021-03-08T16:43:29.137000Z", "closed_at": null, "labels": ["Documentation", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2538", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826650, "iid": 2537, "project_id": 7603319, "title": "Improve tutorial about how building a custom extractor", "description": "https://meltano.com/tutorials/create-a-custom-extractor.html can be much improved, and we don't need to wait until https://gitlab.com/meltano/meltano/-/issues/2401 is ready. \n\nWe can of course refer to the upcoming Singer SDK, but can start with better links and instructions around existing Singer documentation.", "state": "opened", "created_at": "2021-01-25T21:50:19.893000Z", "updated_at": "2021-03-08T16:45:03.360000Z", "closed_at": null, "labels": ["Documentation", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2537", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826619, "iid": 2536, "project_id": 7603319, "title": "Determine pages to improve by looking at most visited pages and most frequent search queries", "description": "Related to https://gitlab.com/meltano/meltano/-/issues/2515", "state": "opened", "created_at": "2021-01-25T21:48:24.476000Z", "updated_at": "2021-03-08T16:43:58.701000Z", "closed_at": null, "labels": ["Documentation", "Marketing", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2536", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826607, "iid": 2535, "project_id": 7603319, "title": "Explain on Tutorials page that contributions are more than welcome", "description": "", "state": "opened", "created_at": "2021-01-25T21:48:02.499000Z", "updated_at": "2021-03-08T16:44:18.705000Z", "closed_at": null, "labels": ["Documentation", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2535", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826589, "iid": 2534, "project_id": 7603319, "title": "Explain current status of Singer ecosystem and how we plan to lift it up", "description": "Related to https://gitlab.com/meltano/meltano/-/issues/2515", "state": "closed", "created_at": "2021-01-25T21:47:10.211000Z", "updated_at": "2021-02-20T01:17:21.282000Z", "closed_at": "2021-02-20T01:17:21.234000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2534", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1819600, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826558, "iid": 2533, "project_id": 7603319, "title": "Clarify that current focus is primarily on data engineers at consultancies", "description": "https://meltano.com/docs/#focus\n\nData engineers at consultancies will have the in-house skills and inclination to create and maintain new Singer taps/targets and contribute to (or adopt: https://gitlab.com/meltano/meltano/-/issues/2515) existing ones.\n\nThe Hobbyist persona can be removed.", "state": "closed", "created_at": "2021-01-25T21:46:06.278000Z", "updated_at": "2021-02-26T00:36:35.286000Z", "closed_at": "2021-02-26T00:36:35.164000Z", "labels": ["Documentation", "Marketing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2533", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826418, "iid": 2532, "project_id": 7603319, "title": "Update DockerHub description", "description": "The description on https://hub.docker.com/r/meltano/meltano is significantly outdated.", "state": "closed", "created_at": "2021-01-25T21:42:04.016000Z", "updated_at": "2021-01-28T23:05:41.431000Z", "closed_at": "2021-01-28T23:05:41.375000Z", "labels": ["Marketing", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2532", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77826351, "iid": 2531, "project_id": 7603319, "title": "Add company logos to website", "description": "Let's list logos of some Meltano users on the website!\n\nA selection among recently active users in Slack:\n\n- GitLab\n- Twilio\n- Netlify\n- LivePerson\n- MIT\n- FIXD\n- Tails.com\n- Smartr\n- Halosight\n- Penta\n- ReceiptBank\n- Blotout.io\n- Firm24\n- Gigsmart\n- ID.me\n- Zenlytic\n- Poll Everywhere", "state": "closed", "created_at": "2021-01-25T21:38:37.231000Z", "updated_at": "2021-01-28T18:48:25.416000Z", "closed_at": "2021-01-26T22:32:52.753000Z", "labels": ["Marketing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2531", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77824700, "iid": 2530, "project_id": 7603319, "title": "List implementation partners on website", "description": "Let's add a Partners page listing consultancies that can help set up Meltano and build custom Singer taps. We can rank them by the amount of contributions they've made to Meltano and/or the number of (discoverable) taps they maintain.\n\n- DataTeer\n- Mashey\n- Commencis\n- RFA (Applied Labs)\n- b.telligent\n- Wheelhouse DMG\n- Slalom", "state": "closed", "created_at": "2021-01-25T20:50:39.051000Z", "updated_at": "2021-02-24T21:26:47.592000Z", "closed_at": "2021-01-27T19:54:48.863000Z", "labels": ["Marketing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2530", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77711575, "iid": 2529, "project_id": 7603319, "title": "Remove unnecessary `start_date` from `schedules` in `meltano.yml`", "description": "This came up in a discussion with @umutykaya:\n\nWhen a new schedule is created using `meltano schedule`, the new entry under `schedules` in `meltano.yml` gets a `start_date` value that [defaults to](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/schedule_service.py#L54) the value of the extractor's [`start_date` setting](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/schedule_service.py#L79), which then also shows up in the [`meltano schedule list --format=json` output](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/cli/schedule.py#L112) so that the [default Airflow DAG generator](https://gitlab.com/meltano/files-airflow/-/blob/e06bc92439114ab530cd98f3be1612d890690e70/bundle/orchestrate/dags/meltano.py#L61) can use it.\n\nAirflow DAGs that have a `schedule_interval` need a `start_date`, but as we don't need [catchup](https://airflow.apache.org/docs/apache-airflow/1.10.14/dag-run.html#catchup), the only requirement is that it is in the past. The actual value does not matter, but having it in `meltano.yml` gives users the mistaken impression that it does.\n\nI think we can remove the key from `meltano.yml` and hard-code a value like `1970-01-01` in the DAG generator (for new users) and in the `meltano schedule list --format=json` output (for existing DAG generators that expect the `start_date` key).", "state": "opened", "created_at": "2021-01-22T23:17:38.434000Z", "updated_at": "2021-03-08T16:40:09.687000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Orchestrate", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2529", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77710021, "iid": 2528, "project_id": 7603319, "title": "Pipelines UI should let an arbitrary cron expression be chosen as a schedule interval", "description": "`meltano schedule` already supports arbitrary cron expressions, e.g. `0 */6 * * *` to mean \"every 6 hours\": https://meltano.com/docs/command-line-interface.html#schedule\n\nThe UI should support this as well, both when creating a new pipeline and editing an existing one.\n\nAt the same time, we should show these intervals correctly: https://gitlab.com/meltano/meltano/-/issues/2527", "state": "opened", "created_at": "2021-01-22T22:00:04.111000Z", "updated_at": "2021-01-22T22:00:47.324000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2528", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77709981, "iid": 2527, "project_id": 7603319, "title": "Pipelines UI does not show interval when a cron expression is used", "description": "As seen on a call with with @umutykaya:\n\nIf a schedule is created using [`meltano schedule`](https://meltano.com/docs/command-line-interface.html#schedule) (or a direct edit to [`schedules` in `meltano.yml`](https://meltano.com/docs/project.html#schedules)) that uses a cron expression for its `interval`, e.g. `0 */6 * * *` to mean \"every 6 hours\", the \"Interval\" dropdown in the Pipelines UI does not have a way to represent this and defaults to the \"Select interval\" option, because it only has options for `@daily`, `@hourly`, etc.\n\nThe dropdown should respect the custom value and show it to the user, even if it does not (yet) allow an arbitrary new cron expression to be entered/selected.", "state": "opened", "created_at": "2021-01-22T21:58:42.556000Z", "updated_at": "2021-01-22T22:00:45.685000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2527", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77709603, "iid": 2526, "project_id": 7603319, "title": "When target process fails, `meltano elt` may report `ConnectionResetError` or `BrokenPipeError` error instead of loader failure", "description": "As reported by @cooley1 [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1611076265035100?thread_ts=1610560265.206500&cid=CFG3C3C66):\n\nWhen the target process dies (because of an error or being killed by the OS) and its stdin stream is closed, the [`capture_subprocess_output(p_tap.stdout, p_target.stdin)`](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/runner/singer.py#L119) call that's responsible for forwarding tap output to the target may encounter a `BrokenPipeError` in [`writer.write(line)`](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/logging/utils.py#L71) or a `ConnectionResetError` in [`await writer.drain()`](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/logging/utils.py#L72) _before_ [`p_target.wait()`](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/runner/singer.py#L139) realizes that the target has quit, resulting in the [exception being re-raised](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/runner/singer.py#L178) immediately and reported to the user, instead of the [target's remaining output being processed](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/runner/singer.py#L204) and the [target's failure being reported](https://gitlab.com/meltano/meltano/-/blob/91bdd3d7e7c6b8e8965cbed91aa16cce0ac6ec77/src/meltano/core/runner/singer.py#L229) as the reason `meltano elt` failed.\n\n`capture_subprocess_output` may need to rescue these `ConnectionResetError` or `BrokenPipeError` errors and finish silently, so that `p_target.wait()` gets a chance to realize that the process died, which we would then handle as appropriate.\n\nAlternatively, we could explicitly detect when `capture_subprocess_output(p_tap.stdout, p_target.stdin)` raises  `ConnectionResetError` or `BrokenPipeError`, deduce that this means that `p_target.stdin` is closed, and handle this just like we would `p_target` dying.", "state": "opened", "created_at": "2021-01-22T21:47:03.186000Z", "updated_at": "2021-03-08T16:45:28.992000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "bug", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2526", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77709282, "iid": 2525, "project_id": 7603319, "title": "`meltano schedule run` fails when `meltano` is not in `$PATH`", "description": "As reported by @Dherbst on Slack, `meltano schedule run <schedule_name>` fails with `file meltano not found` when `meltano` is not in the `$PATH`. As a workaround, he is now running `meltano elt <extractor> <loader> --job_id=<schedule_name>` directly, which is equivalent but less straightforward.\n\nThe culprit appears to be [`MeltanoInvoker`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/meltano_invoker.py), which is used by [`ScheduleService.run`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/schedule_service.py#L156) to run the schedule's `meltano elt` command.\n\nIt currently assumes that the `meltano` executable can be executed by name (requiring it to be in the `$PATH`), instead of simply reusing the executable that `meltano schedule run` itself was called with.\n\nWe already have [some logic in `Project.activate`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/project.py#L81) that determines the location of the `meltano` executable and creates a symlink to it at `.meltano/run/bin`. We can use similar logic in `MeltanoInvoker`.", "state": "closed", "created_at": "2021-01-22T21:33:22.840000Z", "updated_at": "2021-01-26T17:19:37.859000Z", "closed_at": "2021-01-26T17:19:37.808000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2525", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77627403, "iid": 2524, "project_id": 7603319, "title": "Documentation proposal: how to perform \"non-destructive\" data loads", "description": "## Background\n\nFor the purpose of this ticket, a \"non-destructive\" data load is a load which does not permanently delete or replace (aka does not \"destroy\") existing data when loading new data. As summarized mentioned in this slack message:\n\n> Most taps are upsert only; either FULL_TABLE (all records) or INCREMENTAL (only records on/after the bookmark).\n\nHowever, a common requirement for data engineering pipelines is to retain all prior versions of records, which allows full capability to build slowly changing dimensions with the raw output data.\n\n## Some Possible Solutions\n\nThere may be other options I'm not aware of but there are a few basic methods I've identified:\n\n1. If the stream supports incremental extracts: **Run in `incremental` mode with forced `null` `key_properties` (primary key).**\n   - By nulling out the primary key indicator, we prevent the target from knowing how to run a merge upsert, essentially forcing `append` behavior instead of `upsert`.\n2. If the stream does not support incremental extract: **Run in `full_table` mode with forced `null` `key_properties` (primary key).**\n   - As with above, we prevent the upsert behavior by nulling out the primary key.\n   - **Caution:** It is up to the particular tap implementation to determine whether the target is fully-replaced (destructive) or appended (non-destructive). I don't believe there's a consistent spec on this behavior so the user must test/evaluate the target to ensure \"append\" behavior is performed and not \"replace-all\".\n   - Without a replication key, the amount of duplicated data will be very significant. Some streams can tolerate this amount of duplication but in an ideal scenario the target would have some mode for inserting only those records which have changed.\n3. Regardless of extract mode, **the target must support adding `_sdc_*` metadata columns** such as the batching timestamp. These timestamps are critical to allow the downstream transformation system to identify which row versions are newest and which row versions are \"replaced\" by newer versions.\n    - In SQL, this would is commonly expressed as one or both of the following in a downstream system such as dbt:\n      - `ROW_NUMBER() over (PARTITION by <id_cols> ORDER BY _sdc_batched_at DESC) as recency_rank` - (`1` = latest)\n      - `ROW_NUMBER() over (PARTITION by <id_cols> ORDER BY _sdc_batched_at ASC)  as record_version_num` - (`1` = first)\n\nThere may be other methods I'm not aware of but the above hopefully describes the basic landscape of the problem we would be trying to solve.\n\nTable stakes for a user implementing this approach a decision that deduping will be performed in the transformation layer based on `_sdc_batched_at` timestamp column (or a similar method).\n\n## Objective\n\nIn opening this ticket, I'm hoping to start a conversation regarding best practices for \"non-destructive loads\". Based on our findings and the outcome of our analysis here, I hope that we can create documentation (or link to existing docs if they exist) which make this more straightforward for users of the Meltano and Singer ecosystems.", "state": "opened", "created_at": "2021-01-21T17:50:11.011000Z", "updated_at": "2021-03-12T19:04:55.999000Z", "closed_at": null, "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2524", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77440709, "iid": 2523, "project_id": 7603319, "title": "Resolve incompatibility with alembic 1.5.0", "description": "As seen in https://gitlab.com/meltano/meltano/-/jobs/970668586, Meltano is currently incompatible with Alembic 1.5.0, which is why we moved back to 1.4.x in https://gitlab.com/meltano/meltano/-/commit/1e15eb0f223fd1fce7224d077d57c0287e8f916d.\n\nLet's actually resolve this.", "state": "closed", "created_at": "2021-01-19T00:47:20.554000Z", "updated_at": "2021-01-19T20:53:35.629000Z", "closed_at": "2021-01-19T20:53:35.568000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2523", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77246945, "iid": 2522, "project_id": 7603319, "title": "`meltano ui` warns about \"line buffering (buffering=1) isn't supported in binary mode\" on Python 3.8", "description": "\n### Overview\nI'm currently hosting Meltano on production grade. Thanks to state deployment guidelines and best practises in the \n`Meltano` documentation. \n- https://meltano.com/docs/production.html#deployment-in-production\n- https://meltano.com/docs/orchestration.html#orchestration\n- https://gitlab.com/meltano/files-docker-compose/-/tree/master/bundle\n\nWe had a quick chat with @DouweM related to issue.\nDouble checked each of what mentioned on the entire documentation page. However, I'm not able to overcome error by myself. Airflow is not consistent. So, I'm slog on to move forward. I need your helps to fix the error.\n\nI had a try with multiple meltano images that you provide on pipeline `meltano/meltano:latest`, `latest-python3.6`, `latest-python3.7` and `latest-python3.8`. I would say the most stable one was 3.6 and the logs belong to it.\n\n- Airflow logs can be found in here: [logs.txt](/uploads/b856009182e750ae047067e8c03d7bcf/logs.txt)\n\n```\nTraceback (most recent call last):\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask/app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask/app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask/app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask/app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask_admin/base.py\", line 69, in inner\n    return self._run_view(f, *args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask_admin/base.py\", line 368, in _run_view\n    return fn(self, *args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/flask_login/utils.py\", line 258, in decorated_view\n    return func(*args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/www/utils.py\", line 384, in view_func\n    return f(*args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/www/utils.py\", line 290, in wrapper\n    return f(*args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/utils/db.py\", line 74, in wrapper\n    return func(*args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/www/views.py\", line 1611, in tree\n    start_date=min_date, end_date=base_date, session=session)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/utils/db.py\", line 70, in wrapper\n    return func(*args, **kwargs)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/models/dag.py\", line 867, in get_task_instances\n    tis = tis.order_by(TaskInstance.execution_date).all()\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/orm/query.py\", line 3373, in all\n    return list(self)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/orm/loading.py\", line 100, in instances\n    cursor.close()\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py\", line 70, in __exit__\n    with_traceback=exc_tb,\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/util/compat.py\", line 182, in raise_\n    raise exception\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/orm/loading.py\", line 80, in instances\n    rows = [proc(row) for row in fetch]\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/orm/loading.py\", line 80, in <listcomp>\n    rows = [proc(row) for row in fetch]\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/orm/loading.py\", line 588, in _instance\n    populators,\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/orm/loading.py\", line 725, in _populate_full\n    dict_[key] = getter(row)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/sqlalchemy/sql/sqltypes.py\", line 1723, in process\n    return loads(value)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/dill/_dill.py\", line 283, in loads\n    return load(file, ignore, **kwds)\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/dill/_dill.py\", line 278, in load\n    return Unpickler(file, ignore=ignore, **kwds).load()\n  File \"/project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/dill/_dill.py\", line 481, in load\n    obj = StockUnpickler.load(self)\nValueError: unsupported pickle protocol: 5\n```\n\n- ![meltano_google-to-snowflake](/uploads/e6614cc6d91cfcbef7339cde61f9c81b/meltano_google-to-snowflake.png)\n\n### Similar Issues\n\n- https://gitlab.com/meltano/meltano/-/issues/2498\n- https://gitlab.com/meltano/meltano/-/issues/2261\n- https://gitlab.com/meltano/meltano/-/issues/1105\n\n### Possible fixes\nI assume that airflow bundle should be maintained https://gitlab.com/meltano/files-airflow\n\n### Further regression test\nTo reproduce the error follow below steps:\n- [ ] Create virtual environment and init \n- [ ] Populate Meltano project with `tap-adwords`,`tap-facebook` and `target-snowflake` \n    - meltano add extractor tap-facebook\n    - meltano add extractor tap-adwords\n    - meltano add loader target-snowflake\n- [ ] Add Airflow orchestration to the project.\n    - meltano add orchestrator airflow\n    - meltano add files airflow\n    - meltano schedule facebook-to-snowflake tap-facebook target-snowflake @daily --transform=skip\n    - meltano schedule google-to-snowflake tap-adwords target-snowflake @daily --transform=skip \n- [ ] Build Meltano with docker-compose bundle.\n    - docker-compose -f docker-compose.prod.yml up -d --build\n- [ ] Testing & Debugging logs\n    - docker-compose logs airflow-scheduler", "state": "opened", "created_at": "2021-01-14T20:41:06.860000Z", "updated_at": "2021-01-29T15:38:05.806000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "bug"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2522", "weight": null, "has_tasks": true, "task_status": "0 of 5 tasks completed", "author_id": 4706310, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77238577, "iid": 2521, "project_id": 7603319, "title": "Monitor tap and target process memory usage and warn when limit is exceeded", "description": "### Problem to solve\n(Summarize the problem we are trying to solve in the form of we need to do [A], so that [B] can [C])\n\n\n### Target audience\n(For whom are we doing this? Include a persona)\n\n\n### Further details\ncf post in Slack: https://meltano.slack.com/archives/C013EKWA2Q1/p1610642250000700?thread_ts=1608595339.296300&cid=C013EKWA2Q1\n\nTap-zendesk was using a lot of memory and it got killed with `-9`. It was very hard to debug since the only error message received was `ELT could not be completed: Tap failed`.\n\n\n\n### Proposal\nWould be great to receive a warning if/when a memory limit is exceeded\n\n\n### What does success look like, and how can we measure that?\nReceive a warning because the job is killed due to a tap/target using too much memory.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2021-01-14T17:25:29.200000Z", "updated_at": "2021-01-14T17:41:47.097000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2521", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7994172, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77189415, "iid": 2520, "project_id": 7603319, "title": "Remove flakehell now that it's no longer being maintained", "description": "https://github.com/life4/flakehell was added in https://gitlab.com/meltano/meltano/-/merge_requests/1970, but the maintainer has now archived the project: https://github.com/wemake-services/wemake-python-styleguide/issues/1817.\n\nSince it's no longer being maintained, we should move away from it and start using `flake8 --diff` directly.\nThe docs at https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/legacy.html will likely come in handy as well.", "state": "opened", "created_at": "2021-01-13T22:09:47.612000Z", "updated_at": "2021-02-11T16:55:13.506000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::To Do"], "assignees": [199793], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2520", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 199793, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77181072, "iid": 2519, "project_id": 7603319, "title": "Disable unnecessary `nodejs-scan-sast` job which often times out", "description": "Meltano doesn't use https://github.com/ajinabraham/nodejsscan so we have no need for it.", "state": "closed", "created_at": "2021-01-13T18:34:05.080000Z", "updated_at": "2021-01-13T19:23:04.700000Z", "closed_at": "2021-01-13T19:23:04.611000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2519", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77176282, "iid": 2518, "project_id": 7603319, "title": "`poetry install` fails intermittently on CI with `KeyError`", "description": "As seen in:\n- https://gitlab.com/meltano/meltano/-/jobs/959171140\n- https://gitlab.com/meltano/meltano/-/jobs/958990039\n- https://gitlab.com/meltano/meltano/-/jobs/943749242\n\n```\n  KeyError\n  'POSTGRES_ENV_CI_SERVER_VERSION_MINOR'\n  at /usr/local/lib/python3.6/os.py:669 in __getitem__\n       665\u2502         try:\n       666\u2502             value = self._data[self.encodekey(key)]\n       667\u2502         except KeyError:\n       668\u2502             # raise KeyError with the original key value\n    \u2192  669\u2502             raise KeyError(key) from None\n       670\u2502         return self.decodevalue(value)\n       671\u2502 \n       672\u2502     def __setitem__(self, key, value):\n       673\u2502         key = self.encodekey(key)\n```", "state": "closed", "created_at": "2021-01-13T16:45:48.393000Z", "updated_at": "2021-01-13T18:16:03.397000Z", "closed_at": "2021-01-13T18:16:03.333000Z", "labels": ["Testing", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2518", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77126253, "iid": 2517, "project_id": 7603319, "title": "Fix incompatibility between tap-mongodb and meltano variant of target-postgres", "description": "As raised by @nathan5280 [in Slack](https://meltano.slack.com/archives/CFG3C3C66/p1610042390173300):\n\n>>>\nIf I run just the tap-mongodb portion with `meltano invoke tap-mongodb > output/b.jsonl` I can see that the tap generates a schema of type object which makes sense.\n\n```json\n{\n    \"type\": \"SCHEMA\",\n    \"stream\": \"stuff\",\n    \"schema\": {\"type\": \"object\"},\n    \"key_properties\": [\"_id\"],\n}\n{\n    \"type\": \"RECORD\",\n    \"stream\": \"stuff\",\n    \"record\": {\n        \"_id\": \"5ff64e1191e2891d8b6ba683\",\n        \"id\": 4711,\n        \"tasks\": [\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 657},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 353},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 839},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 214},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 905},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 852},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 47},\n            {\"created_on\": \"2021-01-06T16:56:01.058005\", \"value\": 858},\n        ],\n        \"updated_on\": \"2021-01-06T16:57:39.025265\",\n    },\n    \"version\": 1610041761516,\n    \"time_extracted\": \"2021-01-07T17:49:21.517186Z\",\n}\n```\n\nWhen I run the full EL `meltano elt tap-mongodb target-postgres` I get the following error.\n\n```py\nmeltano         | Running extract & load...\nmeltano         | No state was found, complete import.\ntap-mongodb     | INFO Connected to MongoDB host: localhost, version: 4.2.11\ntap-mongodb     | INFO Starting full table sync for junk-stuff\ntap-mongodb     | INFO Querying junk-stuff with:\ntap-mongodb     | \tFind Parameters: {'$lte': ObjectId('5ff64e7891e2891d8b6c5551')}\ntarget-postgres | Traceback (most recent call last):\ntarget-postgres |   File \"/home/nate/projects/wemlo-data-engineering/experiment/ELT-meltano/demo-project/.meltano/loaders/target-postgres/venv/bin/target-postgres\", line 10, in <module>\ntarget-postgres |     sys.exit(main())\ntarget-postgres |   File \"/home/nate/projects/wemlo-data-engineering/experiment/ELT-meltano/demo-project/.meltano/loaders/target-postgres/venv/lib/python3.7/site-packages/target_postgres/__init__.py\", line 188, in main\ntarget-postgres |     state = persist_lines(config, input)\ntarget-postgres |   File \"/home/nate/projects/wemlo-data-engineering/experiment/ELT-meltano/demo-project/.meltano/loaders/target-postgres/venv/lib/python3.7/site-packages/target_postgres/__init__.py\", line 150, in persist_lines\ntarget-postgres |     stream_to_sync[stream] = DbSync(config, o)\ntarget-postgres |   File \"/home/nate/projects/wemlo-data-engineering/experiment/ELT-meltano/demo-project/.meltano/loaders/target-postgres/venv/lib/python3.7/site-packages/target_postgres/db_sync.py\", line 121, in __init__\ntarget-postgres |     self.flatten_schema = flatten_schema(stream_schema_message['schema'])\ntarget-postgres |   File \"/home/nate/projects/wemlo-data-engineering/experiment/ELT-meltano/demo-project/.meltano/loaders/target-postgres/venv/lib/python3.7/site-packages/target_postgres/db_sync.py\", line 66, in flatten_schema\ntarget-postgres |     for k, v in d['properties'].items():\ntarget-postgres | KeyError: 'properties'\nmeltano         | Loading failed (1): KeyError: 'properties'\nmeltano         | ELT could not be completed: Tap and target failed\nELT could not be completed: Tap and target failed\n```\n>>>\n\nI responded:\n\n>>>\nThe problem appears to be that `target-postgres`  requires the `SCHEMA` message to define all of the record's properties so that it can create the appropriate tables, which `tap-mongodb` isn't doing (for understandable reasons).\n\nTo work around this, you can explicitly specify the schema for each stream in `meltano.yml` using https://meltano.com/docs/plugins.html#schema-extra\n\nIn your case that would look something like:\n\n```yml\nschema:\n  junk-stuff:\n    _id:\n      type: string\n    id:\n      type: integer\n    tasks:\n      type: array\n      items:\n        type: object\n        properties:\n          created_on:\n            type: string\n            format: date-time\n          value:\n            type: integer\n    updated_on:\n      type: string\n      format: date-time\n```\n\nThen if you run `meltano invoke tap-mongodb`, you should see a more complete `SCHEMA` message.\n>>>", "state": "closed", "created_at": "2021-01-12T23:34:17.484000Z", "updated_at": "2021-01-19T22:34:54.566000Z", "closed_at": "2021-01-19T22:18:53.967000Z", "labels": ["Documentation", "Extract", "flow::Doing"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2517", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77126016, "iid": 2516, "project_id": 7603319, "title": "Automatically generate extractor/loader documentation from `discovery.yml`", "description": "The docs at https://meltano.com/plugins/extractors/ and https://meltano.com/plugins/loaders/ are currently maintained separately from https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml, which can lead to inconsistency between the docs and discovery.yml, and between docs for different plugins.", "state": "opened", "created_at": "2021-01-12T23:24:15.114000Z", "updated_at": "2021-02-26T21:51:44.063000Z", "closed_at": null, "labels": ["Documentation"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2516", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77125966, "iid": 2515, "project_id": 7603319, "title": "Document process of adopting abandoned taps/targets", "description": "As suggested in https://gitlab.com/meltano/meltano/-/issues/2514:\n\n> We can also explain that poorly maintained taps can be \"adopted\" by a new maintainer, and that we will gladly make the new fork the default variant.", "state": "opened", "created_at": "2021-01-12T23:21:17.109000Z", "updated_at": "2021-03-08T16:34:22.153000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2515", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77125840, "iid": 2514, "project_id": 7603319, "title": "Document maintainer and maintainership status of discoverable extractor and loaders", "description": "It'll be useful for users to know that some discoverable extractors and loaders are actively maintained (like the `pipelinewise` and `datamill-co` variants), while others are essentially abandonware (like some `singer-io` variants).\n\nWe can also explain that poorly maintained taps can be \"adopted\" by a new maintainer, and that we will gladly make the new fork the default variant: https://gitlab.com/meltano/meltano/-/issues/2515", "state": "closed", "created_at": "2021-01-12T23:17:20.076000Z", "updated_at": "2021-03-03T00:21:52.629000Z", "closed_at": "2021-03-03T00:21:52.495000Z", "labels": ["Accepting Merge Requests", "Documentation", "Extract", "Load", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2514", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1865739, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77125412, "iid": 2513, "project_id": 7603319, "title": "Document default/overridden values for extras on discoverable extractor and loader pages", "description": "Some discoverable extractors have a default value for the [`select` extra](https://meltano.com/docs/plugins.html#select-extra): https://gitlab.com/meltano/meltano/-/blob/84aaa6eee51efcda492862ab8ebcfec72bf0f007/src/meltano/core/bundle/discovery.yml#L18. Since the user will need to be aware of this when overriding the value in their own `meltano.yml`, we should explicitly document the value.\n\nSome discoverable loaders have default values for [`dialect`](https://meltano.com/docs/plugins.html#dialect-extra) and [`target_schema`](https://meltano.com/docs/plugins.html#target-schema-extra) extras: https://gitlab.com/meltano/meltano/-/blob/84aaa6eee51efcda492862ab8ebcfec72bf0f007/src/meltano/core/bundle/discovery.yml#L1047-1048. Since these values may affect the plugin's behavior and interaction with other plugins, we should explicitly document these default values.", "state": "opened", "created_at": "2021-01-12T23:11:17.596000Z", "updated_at": "2021-03-08T16:34:19.124000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "Load", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2513", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77125299, "iid": 2512, "project_id": 7603319, "title": "Let buffer size be configured on a per-extractor basis using a `buffer_size` extra", "description": "Follow-up to https://gitlab.com/meltano/meltano/-/issues/2392. \n\nBesides an `elt.buffer_size` setting, we could add a `buffer_size` extractor extra so that the value can be overridden on a per-extractor basis, since it's directly tied to the maximum message length, which is a property of an individual extractor.\n\nThis would also let us set a higher `buffer_size` for a specific discoverable extractor if we know the global default of 10MiB doesn't cut it.\n\nWhen both the setting and extra are set, we could pick the maximum value.", "state": "opened", "created_at": "2021-01-12T23:05:56.697000Z", "updated_at": "2021-01-12T23:09:53.129000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Configuration", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2512", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77125060, "iid": 2511, "project_id": 7603319, "title": "Document capabilities supported by extractors (`discover`: entity selection, `state`: incremental replication)", "description": "We already track whether discoverable taps have the `discover` and `state` capabilities in `discovery.yml` (e.g. https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L16-17), but don't currently explicitly document this support on their pages under https://meltano.com/plugins/extractors/", "state": "opened", "created_at": "2021-01-12T22:55:46.046000Z", "updated_at": "2021-03-08T16:34:16.833000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2511", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124972, "iid": 2510, "project_id": 7603319, "title": "Track in `discovery.yml` whether extractor and loaders support `ACTIVATE_VERSION`", "description": "Requirement for https://gitlab.com/meltano/meltano/-/issues/2509.", "state": "opened", "created_at": "2021-01-12T22:51:04.276000Z", "updated_at": "2021-01-12T22:51:10.496000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2510", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124922, "iid": 2509, "project_id": 7603319, "title": "Warn if tap that uses `ACTIVATE_VERSION` is used with target that doesn't support it", "description": "`ACTIVATE_VERSION` is an experimental and mostly-undocumented Singer feature that is nonetheless used/supported by a few popular taps and targets: https://gitlab.com/meltano/meltano/-/issues/2508\n\nIf a target doesn't understand the `ACTIVATE_VERSION` messages output by a tap, it may error out, or silently ignore the message and end up with duplicated records. We can help the user debug this.\n\nThis will require us to start tracking in `discovery.yml` whether taps and targets support this feature.", "state": "opened", "created_at": "2021-01-12T22:49:50.568000Z", "updated_at": "2021-01-12T22:51:04.794000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2509", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124878, "iid": 2508, "project_id": 7603319, "title": "Document unofficial Singer extension: `ACTIVATE_VERSION`", "description": "As explained by Jeff Huth [in Slack](https://meltano.slack.com/archives/CFG3C3C66/p1601148878022700?thread_ts=1600699540.015800&cid=CFG3C3C66):\n\n>>>\nMost taps are upsert only; either `FULL_TABLE` (all records) or `INCREMENTAL` (only records on/after the bookemark). But there are a few taps out there that use `ACTIVATE_VERSION` . This is an undocumented feature and only works if the target is set up to deal with this... basically, it loads ALL records with a version, then (logically?) deletes earlier version(s) of the records with the same Primary Key. These allow you to upsert + delete (to logically delete the \"delta\" records).\n\nImagine you load 100 records from a table today; then you delete 5 records and load 95 records tomorrow. This feature \"deletes\" the delta 5 records.\n\nMost database targets allow for this. But some file-based targets and even singer-check-tap target fail when you try to run these taps.\n\n`tap-google-sheets` is a tap that uses this.\n>>>\n\nThe `ACTIVATE_VERSION` message is not currently documented in the the Singer spec (issue to change that: https://github.com/singer-io/getting-started/issues/71), but it is included in the `singer-python` library (where it's marked as experimental): https://github.com/singer-io/singer-python/blob/master/singer/messages.py#L137\n\nWhile this feature may be experimental from the Singer spec's perspective, it is implemented by at least one tap/target pair that's supported out of the box by Meltano, so it's effectively standardized and worth documenting:\n\n- https://meltano.com/plugins/extractors/salesforce.html\n  - https://github.com/singer-io/tap-salesforce/pull/6\n  - https://gitlab.com/meltano/tap-salesforce/-/blob/a241d97714aaae19a094bfa0a522420f599b23ce/tap_salesforce/__init__.py#L351\n  - https://gitlab.com/meltano/tap-salesforce/-/blob/a241d97714aaae19a094bfa0a522420f599b23ce/tap_salesforce/sync.py#L162\n- https://meltano.com/plugins/loaders/postgres.html\n  - https://github.com/datamill-co/target-postgres/blob/9c095d91e215f932caa897a6587c6dc6278db8cf/target_postgres/target_tools.py#L142-L153\n\nWe are also planning to support this feature in taps and targets built using the Singer SDK: https://gitlab.com/meltano/singer-sdk/-/issues/18", "state": "opened", "created_at": "2021-01-12T22:46:35.598000Z", "updated_at": "2021-03-02T20:51:12.167000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "Load"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2508", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124413, "iid": 2507, "project_id": 7603319, "title": "Track in `discovery.yml` whether loaders append or upsert (or both)", "description": "Going beyond https://gitlab.com/meltano/meltano/-/issues/2505 to enable https://gitlab.com/meltano/meltano/-/issues/2506.", "state": "opened", "created_at": "2021-01-12T22:27:27.859000Z", "updated_at": "2021-01-12T22:52:18.882000Z", "closed_at": null, "labels": ["Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2507", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124404, "iid": 2506, "project_id": 7603319, "title": "Warn/fail when incremental replication is used with a target that appends instead of upserts", "description": "As I wrote [in Slack](https://meltano.slack.com/archives/CFG3C3C66/p1602609468175400?thread_ts=1602522150.168400&cid=CFG3C3C66) in response to the conversation that led to the creation of https://gitlab.com/meltano/meltano/-/issues/2504:\n\n>>>\nMeltano should warn users when they attempt to use incremental replication with a target that doesn't actually support it correctly, which starts with specifying in our discoverable plugin definitions (https://meltano.com/docs/contributor-guide.html#discoverable-plugins) whether a target supports incremental replication. \n\nMeltano would then detect whether incremental replication is used (read: whether we're passing a state file to the tap) and fail hard if the target doesn't support it, and suggest the user use full-table replication instead, or a different target. \n\nMeltano could also detect this and simply fall back on full-table replication, although this wouldn't actually be better with append-only formats like CSV and JSONL, or targets that wouldn't wipe the existing data before inserting new records. \n\nSome targets support `ACTIVATE_VERSION` (https://meltano.slack.com/archives/CFG3C3C66/p1601148878022700?thread_ts=1600699540.015800&cid=CFG3C3C66) which we may also be able to pay special consideration to.\n>>>\n\nThis requires us to not just document which targets append instead of upsert (https://gitlab.com/meltano/meltano/-/issues/2505), but also track this in `discover.yml`: https://gitlab.com/meltano/meltano/-/issues/2507", "state": "opened", "created_at": "2021-01-12T22:26:57.095000Z", "updated_at": "2021-01-12T22:50:14.394000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2506", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124333, "iid": 2505, "project_id": 7603319, "title": "Document whether discoverable loaders append or upsert (or both)", "description": "So that users will know whether https://gitlab.com/meltano/meltano/-/issues/2504 applies.", "state": "opened", "created_at": "2021-01-12T22:22:54.419000Z", "updated_at": "2021-01-12T22:52:18.923000Z", "closed_at": null, "labels": ["Documentation", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2505", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77124270, "iid": 2504, "project_id": 7603319, "title": "Document that incremental replication is incompatible with targets that append instead of upsert", "description": "As raised by @paul.tiplady [in Slack](https://meltano.slack.com/archives/CFG3C3C66/p1602522150168400):\n\n>>>\nwondering if you have any thoughts on this Singer issue that I raised: https://github.com/singer-io/tap-mysql/issues/131#issuecomment-703777662\n\nTLDR is that incremental replication mode intentionally duplicates the last-emitted record to guard against race conditions.\n\nI've not seen a lot of discussion around incremental vs. full-table extract around here, but it looks like Singer taps' incremental update mode is fundamentally designed for target DBs where you're handling de-duplication of records, so naively pointing a singer tap at a CSV file or SQL database target in incremental update mode is not in general a sound operation (i.e. you can't update a SQL DB target incrementally because you'll get multiple records emitted with the same primary key).\n\nThis behavior from Singer was pretty surprising to me, just wanted to see if you had hit this already. Feels like this should be at least documented in https://meltano.com/docs/integration.html#pipeline-state, although I'm wondering whether this behavior actually makes sense for Meltano's case.\n>>>\n\n>>>\nthe Stitch docs actually go into a lot of detail here: https://www.stitchdata.com/docs/replication/replication-methods/key-based-incremental, so it seems it's just par for the course.\n\nI do wonder if it's possible to mark targets as an unsafe sink for duplicated records (i.e. incremental-unsafe); I was able to wire up some tap-target combinations that really should have error'd. Seems like a footgun waiting to happen.\n>>>\n\n---\n\nIncremental replication is only compatible with targets that upsert rather than append because the tap can output the same source record multiple times:\n- because of the behavior described above and in https://www.stitchdata.com/docs/replication/replication-methods/key-based-incremental#limitation-3--replication-key-inclusivity, the last record(s) output by one sync run will be output again by a subsequent run as the first record(s)\n- source records that were updated since the last sync are included again because key-based incremental replication typically uses `updated_at` columns as replication keys rather than `created_at columns`, and log-based incremental replication takes into account `UPDATE`s", "state": "opened", "created_at": "2021-01-12T22:19:27.318000Z", "updated_at": "2021-03-08T23:07:36.533000Z", "closed_at": null, "labels": ["Documentation", "Extract", "Load", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2504", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77123864, "iid": 2503, "project_id": 7603319, "title": "Add `X-Project-ID` header with `project_id` to https://meltano.com/discovery.yml request", "description": "This will help us determine how many unique projects are out there.\n\nWe should only add this if the http://meltano.com/docs/settings.html#send-anonymous-usage-stats setting is enabled.", "state": "closed", "created_at": "2021-01-12T22:01:34.615000Z", "updated_at": "2021-02-10T16:36:09.922000Z", "closed_at": "2021-01-13T22:46:17.454000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2503", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77123843, "iid": 2502, "project_id": 7603319, "title": "Add `User-Agent` header with Meltano version to https://meltano.com/discovery.yml request", "description": "This will help us determine how quickly users move to new versions.", "state": "closed", "created_at": "2021-01-12T22:00:26.227000Z", "updated_at": "2021-02-10T16:36:09.881000Z", "closed_at": "2021-01-13T19:01:04.306000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2502", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 77110196, "iid": 2501, "project_id": 7603319, "title": "Cached discovery.yml manifest version not updated", "description": "We are running Meltano in production.\n- Meltano version: 1.64.1\n- MELTANO_DISCOVERY_URL=false \n\nI just realised early today a warning message:\n```\n[2021-01-12 15:48:15,411] [7|MainThread|root] [WARNING] The cached `discovery.yml` manifest has version 1, while this version of Meltano requires version 16.\n```\n\nThank to @DouweM for the quick support. \n- Removed files in the cache location `.meltano/cache/discovery.yml`. Then, run `meltano discover`. However, there is no file in the root project and cached file is the same with default cached file. \n\nTo summarize, I want to be sure that discovery.yml will be automatically updated by the Meltano releases.", "state": "closed", "created_at": "2021-01-12T17:34:21.600000Z", "updated_at": "2021-01-12T21:09:47.642000Z", "closed_at": "2021-01-12T21:09:47.576000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2501", "weight": null, "has_tasks": false, "author_id": 4706310, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76938215, "iid": 2500, "project_id": 7603319, "title": "When tap finishes before target, not all messages (records) actually make it to target but `meltano elt` succeeds anyway", "description": "The only indication that anything went wrong is a `ConnectionResetError: connection lost` in the `meltano elt` output/logs.\n\nAs reported by Yordan Ivanov [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1610109040182900):\n\n>>>\nI just updated to Meltano v1.64.0 and I faced an error.  I wonder if it\u2019s because I do something wrong, or It\u2019s a bug in the new version. Here\u2019s the stack trace\n\n```\nmeltano          | Task exception was never retrieved\nfuture: <Task finished coro=<capture_subprocess_output() done, defined at /usr/local/lib/python3.7/site-packages/meltano/core/logging/utils.py:57> exception=ConnectionResetError(\u2018Connection lost\u2019)>\nTraceback (most recent call last):\n  File \u201c/usr/local/lib/python3.7/site-packages/meltano/core/logging/utils.py\u201d, line 73, in capture_subprocess_output\n    writer.writeline(line.decode())\nAttributeError: \u2018StreamWriter\u2019 object has no attribute \u2018writeline\u2019\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \u201c/usr/local/lib/python3.7/site-packages/meltano/core/logging/utils.py\u201d, line 76, in capture_subprocess_output\n    await writer.drain()\n  File \u201c/usr/local/lib/python3.7/asyncio/streams.py\u201d, line 348, in drain\n    await self._protocol._drain_helper()\n  File \u201c/usr/local/lib/python3.7/asyncio/streams.py\u201d, line 202, in _drain_helper\n    raise ConnectionResetError(\u2018Connection lost\u2019)\nConnectionResetError: Connection lost\n```\n>>>\n\nThis was introduced by https://gitlab.com/meltano/meltano/-/merge_requests/1989 which was released in v1.64.0.", "state": "closed", "created_at": "2021-01-08T17:16:43.056000Z", "updated_at": "2021-01-09T00:10:00.076000Z", "closed_at": "2021-01-09T00:09:59.959000Z", "labels": ["bug", "flow::Review", "regression"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2500", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1757384, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76896906, "iid": 2499, "project_id": 7603319, "title": "tap-mongodb discovery generates duplicate entries per stream", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\nDiscovery generates multiple entries for each stream.   When the tap is invoked it outputs two lines for every document in the collection.\n\n\n### What is the expected *correct* behavior?\nIt seems like there should only be one entry in the catalog.  When one of the duplicates is removed the expected number of rows are output by the tap.\n\n\n### Steps to reproduce\nRun catalog discovery.  `meltano select tap-mongodb --list --all`\n\n\n\n### Relevant logs and/or screenshots\n```\n{\n  \"streams\": [\n    {\n      \"table_name\": \"stuff\",\n      \"stream\": \"stuff\",\n      \"metadata\": [\n        {\n          \"breadcrumb\": [],\n          \"metadata\": {\n            \"table-key-properties\": [\n              \"_id\"\n            ],\n            \"database-name\": \"junk\",\n            \"row-count\": 1,\n            \"is-view\": false,\n            \"valid-replication-keys\": [\n              \"_id\"\n            ],\n            \"selected\": true,\n            \"replication-method\": \"FULL_TABLE\"\n          }\n        }\n      ],\n      \"tap_stream_id\": \"junk-stuff\",\n      \"schema\": {\n        \"type\": \"object\"\n      },\n      \"selected\": true,\n      \"replication_method\": \"FULL_TABLE\"\n    },\n    {\n      \"table_name\": \"stuff\",\n      \"stream\": \"stuff\",\n      \"metadata\": [\n        {\n          \"breadcrumb\": [],\n          \"metadata\": {\n            \"table-key-properties\": [\n              \"_id\"\n            ],\n            \"database-name\": \"junk\",\n            \"row-count\": 1,\n            \"is-view\": false,\n            \"valid-replication-keys\": [\n              \"_id\"\n            ],\n            \"selected\": true,\n            \"replication-method\": \"FULL_TABLE\"\n          }\n        }\n      ],\n      \"tap_stream_id\": \"junk-stuff\",\n      \"schema\": {\n        \"type\": \"object\"\n      },\n      \"selected\": true,\n      \"replication_method\": \"FULL_TABLE\"\n    }\n  ]\n}\n```\n\n\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2021-01-07T19:11:50.804000Z", "updated_at": "2021-01-11T18:06:13.650000Z", "closed_at": "2021-01-11T18:04:46.752000Z", "labels": ["Customer Support", "Extract", "bug"], "assignees": [87854], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2499", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 2633298, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76788163, "iid": 2498, "project_id": 7603319, "title": "Plugin install fails in docker if .meltano directory doesn't already exist", "description": "### What is the current *bug* behavior?\nWhen running `meltano install` in a linux docker container, it will fail if the `.meltano` directory doesn't already exist. This means that you can't run `meltano install` on build if you don't have access to the db secrets during build.\n\n\n\n### What is the expected *correct* behavior?\nIf the `.meltano` directory doesn't already exits, it should be created.\n\n\n\n### Steps to reproduce\nRun `meltano install` linux docker container that doesn't have a `.meltano` directory already built.\n\n\n\n### Relevant logs and/or screenshots\n```\nmeltano.cli.utils.CliError: Can't initialize database: (sqlite3.OperationalError) unable to open database file\n(Background on this error at: http://sqlalche.me/e/13/e3q8)\nCan't initialize database: (sqlite3.OperationalError) unable to open database file\n(Background on this error at: http://sqlalche.me/e/13/e3q8)\n```\n\n### Possible fixes\nOn `v1.62.0` it's [here](https://gitlab.com/meltano/meltano/-/blob/v1.62.0/src/meltano/core/db.py#L57). We could add a `mkdir` command. \n\nWhat's interesting is that on my Mac, sqlite will create the directory if it doesn't exit. But when I run it in the [airflow image](https://hub.docker.com/layers/apache/airflow/1.10.11-python3.7/images/sha256-a0032be900db45d67910e698a5cee1fddff051a9f85c23ba2bc8d39bd9294d64?context=explore), it won't. Maybe it's a difference between permissions in Macos vs Linux? Not sure.\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2021-01-05T20:09:05.841000Z", "updated_at": "2021-01-14T20:41:07.329000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Docker", "bug"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2498", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7811051, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76612464, "iid": 2497, "project_id": 7603319, "title": "Typo in pypi description", "description": "There is a typo in the description for the pypi package:\n\n![image](/uploads/7c54961b4d08767328e36d2ac6f4b79a/image.png)\n\nThis doesn't seem to be part of this repo so I didn't know where to create a MR.", "state": "closed", "created_at": "2020-12-31T13:09:06.005000Z", "updated_at": "2021-01-05T10:44:41.588000Z", "closed_at": "2021-01-05T10:44:41.550000Z", "labels": [], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2497", "weight": null, "has_tasks": false, "author_id": 659591, "assignee_id": null, "closed_by_id": 659591, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76600256, "iid": 2496, "project_id": 7603319, "title": "Document pinning plugin to a version", "description": "As it says under https://meltano.com/docs/plugin-management.html#discoverable-plugins:\n\n>>>\nThe package's `pip_url` (its [`pip install`](https://pip.pypa.io/en/stable/reference/pip_install/#usage) argument)\nis repeated here for convenience, since you may want to update it to\n[point at a (custom) fork](#using-a-custom-fork-of-a-plugin) or to pin a specific version of the package.\nIf this property is omitted, it is inherited from the discoverable [base plugin description](/docs/plugins.html#project-plugins) identified by the `name` (and `variant`) instead.\n>>>\n\nWe should get a place to link \"pin a specific version of the package\" to! We'd have instructions for PyPI package names (`pip_url: <name>==<version>`) and Git repos (`pip_url: <url>@<tag>`).", "state": "closed", "created_at": "2020-12-30T23:41:13.583000Z", "updated_at": "2021-01-22T18:03:58.266000Z", "closed_at": "2021-01-22T18:03:58.190000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2496", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76600181, "iid": 2495, "project_id": 7603319, "title": "Have `meltano add` suggest running again with `--custom` when discoverable plugin was not known", "description": "", "state": "closed", "created_at": "2020-12-30T23:37:25.872000Z", "updated_at": "2021-02-01T16:22:14.886000Z", "closed_at": "2021-02-01T16:22:14.568000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2495", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76600140, "iid": 2494, "project_id": 7603319, "title": "Show inherited settings differently in the UI", "description": "Unlike in `meltano config <plugin> list`, it's not currently clear in the UI whether a value that's shown in a form field was inherited from the parent plugin, or if it was set explicitly on this child plugin.", "state": "opened", "created_at": "2020-12-30T23:36:21.197000Z", "updated_at": "2020-12-30T23:36:21.197000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2494", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76600066, "iid": 2493, "project_id": 7603319, "title": "Let plugin labels be set in UI", "description": "Plugin definitions in `meltano.yml` already support the `label` property, which is reflected in the UI, but the UI cannot currently be used to actually see or modify the label.\n\nWhen plugins can inherit from each other (https://gitlab.com/meltano/meltano/-/issues/2491, https://gitlab.com/meltano/meltano/-/issues/2492), this would help users distinguish between the different plugins.", "state": "opened", "created_at": "2020-12-30T23:33:28.441000Z", "updated_at": "2020-12-30T23:34:15.886000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2493", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76600059, "iid": 2492, "project_id": 7603319, "title": "Add way in UI to add discoverable plugin that already exists another time using inheritance", "description": "Like http://meltano.com/docs/plugin-management.html#explicit-inheritance, but in the UI.\n\nI imagine that discoverable plugins would _not_ disappear from the \"Available\" section on the Extractors or Loaders page, and that users would have an option to hit \"Add to project\" another time.\nThe user would need to enter a unique name for the new plugin (since the discoverable plugin's own name was already used the first time it was added to the project using a [shadowing definition](http://meltano.com/docs/project.html#shadowing-plugin-definitions)). We may also want to tell the user that they could inherit from the existing plugin instead, with the benefit of inheriting config ,etc.", "state": "opened", "created_at": "2020-12-30T23:32:47.988000Z", "updated_at": "2020-12-30T23:36:43.747000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2492", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76600058, "iid": 2491, "project_id": 7603319, "title": "Add way in UI to create new plugin that inherits from an existing one", "description": "Like http://meltano.com/docs/plugin-management.html#plugin-inheritance, but in the UI.\n\nI imagine this would be a dropdown option on an existing plugin on the Extractors or Loaders page. The user would need to enter a unique name for the new plugin, and we should make sure the config form reflects the inherited config.", "state": "opened", "created_at": "2020-12-30T23:32:46.572000Z", "updated_at": "2020-12-30T23:36:45.329000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2491", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76599958, "iid": 2490, "project_id": 7603319, "title": "Reuse parent plugin installation directory if `pip_url` matches, to prevent unnecessary duplication", "description": "When a plugin inherits from another, both get their packages installed into their own venvs at `.meltano/{type}s/{name}` (e.g. `.meltano/extractors/tap-gitlab` and `.meltano/extractors/tap-gitlab--inherited`), even though they could reuse the same package on-disk, which would speed up `meltano install` and reduce the installation footprint.\n\nOne way to accomplish this would be to have plugins that share a `pip_url` share an installation directory, by using `.meltano/{type}s/{pip_url}` as the path, with `pip_url` hashed or transformed to a valid directory name. The resulting dirnames are pretty unwieldy though, and this would make it much harder to find a given plugin's installation directory just by browsing the filesystem and looking for its name. Adding a command to print the path (https://gitlab.com/meltano/meltano/-/issues/2337) would help, but there's a cost.\n\nAlternatively, we could have plugins fall back on their parent's installation dir if their `pip_url`s match, so that we'd only have `.meltano/extractors/tap-gitlab` until `tap-gitlab--inherited` changes its `pip_url` and gets a `.meltano/extractors/tap-gitlab--inherited`. Note that the directory names should always correspond to plugins _in the project_, so that names are known to be unique and map 1:1 to `pip_url`s. Plugins inheriting directly from a discoverable plugin (e.g. `tap-postgres--db-one` and `tap-postgres--db-two` both inheriting from `tap-postgres`, without a plugin by that name existing in the project) would not use their parent plugin's name for the installation directory, since the name could refer to multiple variants with their own `pip_url`s.\n\nThis approach is consistent with the current behavior, where plugin dir names match project plugin names, with the addition of inheritance (unless `pip_url` is overridden). I think the limitation that it doesn't apply to plugins that don't share a common ancestor in the project, but do share a `pip_url`, is acceptable.", "state": "opened", "created_at": "2020-12-30T23:23:54.256000Z", "updated_at": "2021-02-23T16:34:00.462000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "performance"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2490", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76599367, "iid": 2489, "project_id": 7603319, "title": "When target fails, print last message output by tap that may have been the culprit", "description": "When running in debug mode (https://meltano.com/docs/command-line-interface.html#debugging), `meltano elt` already prints all messages output by the tap, which can help when debugging a failing loader since the last message output by the tap is likely to be the same message that was being parsed/handled when the error occurred.\n\nWhen debug mode is _not_ enabled (in production for example), this doesn't help much, and a user would have to re-run a pipeline locally to find out what went wrong. Meltano can be helpful and always log the most recent message(s) output by the tap when the target fails.", "state": "opened", "created_at": "2020-12-30T22:37:19.375000Z", "updated_at": "2021-01-06T00:52:20.187000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2489", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76598191, "iid": 2488, "project_id": 7603319, "title": "Log warning when tap outputs invalid SCHEMA or RECORD message", "description": "For example: \n- a `SCHEMA` message with properties without a `type`/`anyOf`: https://gitlab.com/meltano/meltano/-/issues/2485\n- a `SCHEMA` message with multiple mutually incompatible types for one property: https://gitlab.com/meltano/tap-facebook/-/issues/7\n- a `RECORD` message not matching the `SCHEMA` for the same stream\n\nSome targets may handle be able to handle these misformed messages correctly by working around their lack of compliance with the Singer spec (https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message), but Meltano can log to aid in debugging when targets do fail.\n\nOnce we have https://gitlab.com/meltano/meltano/-/issues/2469, users will be able to work around these issues by manually providing a correct schema using https://meltano.com/docs/plugins.html#schema-extra. Of course, fixing the tap is still preferable, but bandaids have their use.\n\nMessage validation should be handled asynchronously and should not slow down throughput of messages from tap to target. We'll probably want a setting to opt-in/out.", "state": "opened", "created_at": "2020-12-30T21:32:48.713000Z", "updated_at": "2020-12-30T22:32:23.880000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2488", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76560610, "iid": 2487, "project_id": 7603319, "title": "Loader 'target-postgres' could not be installed: failed to install plugin 'target-postgres'.", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\n\n\n\n### What is the expected *correct* behavior?\n_What should be happening?_\n\n\n\n### Steps to reproduce\n```\n$ meltano add loader target-postgres\n...\nLoader 'target-postgres' could not be installed: failed to install plugin 'target-postgres'.\n...\n    ./psycopg/psycopg.h:36:10: fatal error: libpq-fe.h: No such file or directory\n\n```\n\n\n\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\n\n\n\n### Possible fixes\n```\n$ sudo apt install libpq-dev\n$ meltano add loader target-postgres\n...\nInstalled loader 'target-postgres'\n...\n```\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-12-29T16:12:37.926000Z", "updated_at": "2021-02-14T21:36:54.020000Z", "closed_at": "2021-01-27T22:24:36.715000Z", "labels": ["Accepting Merge Requests", "Documentation", "Load", "bug", "flow::Review"], "assignees": [87854, 4149637], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2487", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 4149637, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76438951, "iid": 2486, "project_id": 7603319, "title": "Discoverable `tap-google-analytics` incorrectly claims `state` capability", "description": "As the readme states:\n\n>>>\nTap shortcomings (contributions are more than welcome):\n\n* This tap does not currently use any STATE information for incrementally extracting data. This is currently mitigated by allowing for chunked runs using \\[start_date, end_date), but we should definitely add support for using STATE messages.\n>>>\n\nImplementing support is tracked in https://gitlab.com/meltano/tap-google-analytics/-/issues/6.", "state": "closed", "created_at": "2020-12-23T22:38:56.078000Z", "updated_at": "2020-12-24T00:26:02.992000Z", "closed_at": "2020-12-24T00:26:02.936000Z", "labels": ["Extract", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2486", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1738401, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76434961, "iid": 2485, "project_id": 7603319, "title": "Loaders that have object data wont load into BigQuery", "description": "Loaders, such as stripe, postgres, and other popular singer sources blow up when trying to import to big query.\n\nExample from stripe:\n\n```\nmeltano | Loading failed (2): CRITICAL ['Traceback (most recent call last):\\n', ' File \"/projects/default/.meltano/loaders/target-bigquery/venv/lib/python3.6/site-packages/target_bigquery/__init__.py\", line 93, in main\\n for state in state_iterator:\\n', ' File \"/projects/default/.meltano/loaders/target-bigquery/venv/lib/python3.6/site-packages/target_bigquery/process.py\", line 40, in process\\n for s in handler.handle_record_message(msg):\\n', ' File \"/projects/default/.meltano/loaders/target-bigquery/venv/lib/python3.6/site-packages/target_bigquery/processhandler.py\", line 110, in handle_record_message\\n new_rec = filter_by_schema(schema, msg.record)\\n', ' File \"/projects/default/.meltano/loaders/target-bigquery/venv/lib/python3.6/site-packages/target_bigquery/schema.py\", line 75, in filter\\n record[key]) # adswerve fix to match schema field name\\n', ' File \"/projects/default/.meltano/loaders/target-bigquery/venv/lib/python3.6/site-packages/target_bigquery/schema.py\", line 84, in filter\\n prop_type, _ = get_type(props)\\n', ' File \"/projects/default/.meltano/loaders/target-bigquery/venv/lib/python3.6/site-packages/target_bigquery/schema.py\", line 23, in get_type\\n f\"\\'type\\' or \\'anyOf\\' are required fields in property: {property}\"\\n', \"ValueError: 'type' or 'anyOf' are required fields in property: {}\\n\"]\nmeltano | ELT could not be completed: Tap and target failed\n```", "state": "opened", "created_at": "2020-12-23T19:07:47.547000Z", "updated_at": "2021-01-06T18:51:47.139000Z", "closed_at": null, "labels": ["Load", "bug"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2485", "weight": null, "has_tasks": false, "author_id": 3804920, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76434934, "iid": 2484, "project_id": 7603319, "title": "Health endpoint requires auth", "description": "The healthcheck endpoint (api/v1/health) always returns a 401 when requested from curl.", "state": "opened", "created_at": "2020-12-23T19:06:21.486000Z", "updated_at": "2020-12-23T21:07:40.735000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "bug"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2484", "weight": null, "has_tasks": false, "author_id": 3804920, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76434316, "iid": 2483, "project_id": 7603319, "title": "Jobs get stuck when `meltano elt` or UI worker running jobs is killed", "description": "When the ui stops, the pending jobs are not resumed or cleaned up when the process is started again. This results in having to edit the database directly to ensure the jobs can be run again.", "state": "closed", "created_at": "2020-12-23T18:34:04.947000Z", "updated_at": "2021-01-18T22:26:37.691000Z", "closed_at": "2021-01-18T22:26:37.632000Z", "labels": ["Extract", "Load", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2483", "weight": null, "has_tasks": false, "author_id": 3804920, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76434279, "iid": 2482, "project_id": 7603319, "title": "Cleanup or Ignore the gunicorn.pid when running in a container", "description": "When starting up in a containerized environment, the server persists a gunicorn.pid to the mounted directory. When the container starts, it assumes the process is already running and dies requiring a manual cleanup of that file. I have been able to remedy it in kubernetes with an init file for the time being. Can it be made easier for developers for running in these environments not to worry about cleaning up that file?", "state": "opened", "created_at": "2020-12-23T18:32:23.055000Z", "updated_at": "2021-03-08T16:40:56.291000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "bug", "flow::Triage"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2482", "weight": null, "has_tasks": false, "author_id": 3804920, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 76109014, "iid": 2481, "project_id": 7603319, "title": "Environment Variable Substitution doesn't work with array values", "description": "### What is the current *bug* behavior?\nEnvironment variables can't be used in the `meltano.yml` file for arrays.\n\n\n\n### What is the expected *correct* behavior?\nThe yaml parser should traverse arrays to substitute environment variables. It would also be nice to add custom yaml variable support to the parser. (e.g. `custom_var: var` -> `database: '{{ custom_var }}'`)\n\n\n\n### Steps to reproduce\n- In a `meltano.yml` file try to use an environement variable in an array.\n\n\n### Relevant logs and/or screenshots\n```\nplugins:\n  extractors:\n  - name: tap-mysql\n    variant: transferwise\n    pip_url: pipelinewise-tap-mysql\n    config:\n      host: host\n      user: root\n      database: ${DB_NAME}\n    select:\n    - ${DB_NAME}-users.id\n    - ${DB_NAME}-users.email\n    metadata:\n      ${DB_NAME}-users:\n        replication-method: FULL_TABLE\n```\n`database: ${DB_NAME}` works because it's an object. But it doesn't work in the select because it's an array.\n\n### Possible fixes\nNot sure, sorry.\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2020-12-16T00:40:22.011000Z", "updated_at": "2020-12-16T17:08:24.002000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Configuration", "bug"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2481", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7811051, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75968833, "iid": 2480, "project_id": 7603319, "title": "`lint` job is failing on `master`", "description": "Related to https://gitlab.com/meltano/meltano/-/merge_requests/1970.\n\nJob [#905847973](https://gitlab.com/meltano/meltano/-/jobs/905847973) failed for 774c0d3aa12204a78a8fd4d42300b11e217507f8:\n\n```\n$ make show_lint\npoetry run isort --recursive --settings-path pyproject.toml --check-only --diff\nERROR: /builds/meltano/meltano/src/meltano/core/schedule_service.py Imports are incorrectly sorted.\n--- /builds/meltano/meltano/src/meltano/core/schedule_service.py:before\t2020-12-11 15:40:36\n+++ /builds/meltano/meltano/src/meltano/core/schedule_service.py:after\t2020-12-11 15:43:44.624916\n@@ -4,10 +4,10 @@\n from typing import Optional\n \n from .db import project_engine\n+from .meltano_invoker import MeltanoInvoker\n from .plugin import PluginRef, PluginType\n from .plugin.settings_service import PluginSettingsService, SettingMissingError\n from .plugin_discovery_service import PluginDiscoveryService, PluginNotFoundError\n-from .meltano_invoker import MeltanoInvoker\n from .project import Project\n from .project_plugins_service import ProjectPluginsService\n from .schedule import Schedule\nmake: *** [Makefile:167: show_lint_python] Error 1\n```", "state": "closed", "created_at": "2020-12-11T16:42:12.362000Z", "updated_at": "2020-12-11T19:49:01.802000Z", "closed_at": "2020-12-11T19:49:01.687000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854, 199793], "user_notes_count": 1, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2480", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75918061, "iid": 2479, "project_id": 7603319, "title": "Use extractor `load_schema` as default for target-bigquery `dataset_id`", "description": "BigQuery's datasets are roughly equivalent to schemas in other DBs, so just like we do with target-postgres and target-snowflake, we should use it to make sure data from different extractors doesn't clash.", "state": "closed", "created_at": "2020-12-10T18:53:57.071000Z", "updated_at": "2020-12-10T19:33:38.664000Z", "closed_at": "2020-12-10T19:33:38.604000Z", "labels": ["Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2479", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75853673, "iid": 2478, "project_id": 7603319, "title": "Meltano elt run fails with a \u201cpipe closed\u201d exception", "description": "### What is the current *bug* behavior?\nI\u2019m stress testing my meltano installation with an elt run using tap-spreadsheets-anywhere and a custom loader-kafka plugin. I'm finding that after running an elt job full throttle for about 30-45 minutes, meltano consistently fails with a \u201cpipe closed\u201d exception.  Here\u2019s the message I see repeated by Meltano when the error occurs \"meltano          | pipe closed by peer or os.write(pipe, data) raised exception.\"\n\n\n\n### What is the expected *correct* behavior?\nAn ELT run that begins to load data should finish doing so. At minimum I would expect a better error message indicating a root cause for the failure.\n\n\n### Steps to reproduce\nI have meltano configured for extremely high throughput on the tap side and a slightly slower loader.  My guess is that without loader backpressure to slow the rate of production of records from the tap - this will eventually happen to any sufficiently long-running/large elt run where tap is faster than loader. \n\n\n\n### Relevant logs and/or screenshots\nI captured this log with PYTHONASYNCIODEBUG env var enabled. \n\n```bash\ntap-spreadsheets-anywhere | INFO Found credentials in environment variables.\nmeltano                   | Executing <Handle <TaskWakeupMethWrapper object at 0x7fb78aa93378>(<Future finis...events.py:299>) created at /usr/local/lib/python3.6/asyncio/streams.py:399> took 4.405 seconds\nmeltano                   | Executing <Handle <TaskWakeupMethWrapper object at 0x7fb78aa93378>(<Future finis...events.py:299>) created at /usr/local/lib/python3.6/asyncio/streams.py:399> took 6.464 seconds\nmeltano                   | <_UnixWritePipeTransport fd=17 polling bufsize=1786482688> was closed by peer\nmeltano                   | Executing <Handle cancelled _UnixWritePipeTransport._read_ready() created at /usr/local/lib/python3.6/asyncio/selector_events.py:251> took 0.115 seconds\nmeltano                   | <_UnixReadPipeTransport fd=20 polling> was closed by peer\nmeltano                   | <_UnixReadPipeTransport fd=18 polling> was closed by peer\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | <_UnixSubprocessTransport pid=166 running stdin=<_UnixWritePipeTransport closed fd=17 closed> stdout=<_UnixReadPipeTransport closed fd=18 closed> stderr=<_UnixReadPipeTransport closed fd=20 closed>> exited with return code -9\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\nmeltano                   | pipe closed by peer or os.write(pipe, data) raised exception.\ntap-spreadsheets-anywhere | ERROR Pipe to loader broke after 134629 records were written\ntap-spreadsheets-anywhere | BrokenPipeError: [Errno 32] Broken pipe\ntap-spreadsheets-anywhere | Exception ignored in: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='UTF-8'>\ntap-spreadsheets-anywhere | BrokenPipeError: [Errno 32] Broken pipe\nmeltano                   | <_UnixReadPipeTransport fd=16 polling> was closed by peer\nmeltano                   | <_UnixSubprocessTransport pid=165 running stdout=<_UnixReadPipeTransport closed fd=14 closed> stderr=<_UnixReadPipeTransport closed fd=16 closed>> exited with return code 120\nmeltano                   | Extraction failed (120): BrokenPipeError: [Errno 32] Broken pipe\nmeltano                   | Loading failed (-9): INFO in target\nmeltano                   | <_UnixReadPipeTransport fd=12 polling> was closed by peer\nmeltano                   | ELT could not be completed: Tap and target failed\nmeltano                   | <_UnixReadPipeTransport fd=10 polling> was closed by peer\n```\n\n\n### Possible fixes\nI couldn't reproduce this issue with debug enabled so that's an unfriendly workaround.  The write to disk apparently slowed the tap enough to allow the loader to stay current. Realistically - some type of back-pressure that slows the tap based upon how much data is buffered for the reader is likely the only real solution.\n\n\n### Further regression test\nLoad test religiously?", "state": "closed", "created_at": "2020-12-09T20:38:49.903000Z", "updated_at": "2021-01-07T16:48:24.047000Z", "closed_at": "2021-01-07T16:48:23.944000Z", "labels": ["Extract", "Load", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2478", "weight": null, "has_tasks": false, "author_id": 4403563, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1757384, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75791684, "iid": 2477, "project_id": 7603319, "title": "Show array and object settings in configuration UI as unsupported instead of hiding them entirely", "description": "We can do better than https://gitlab.com/meltano/meltano/-/commit/644b79a95fa4649b2737cdcaf82db6c55f691f49.", "state": "closed", "created_at": "2020-12-08T23:53:34.757000Z", "updated_at": "2020-12-09T00:30:21.913000Z", "closed_at": "2020-12-09T00:30:21.847000Z", "labels": ["UI", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2477", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75789613, "iid": 2476, "project_id": 7603319, "title": "tap-salesforce `is_sandbox` setting is not known to Meltano", "description": "Let's address this now that the setting works again: https://gitlab.com/meltano/tap-salesforce/-/merge_requests/10", "state": "closed", "created_at": "2020-12-08T21:57:27.020000Z", "updated_at": "2020-12-08T22:30:40.247000Z", "closed_at": "2020-12-08T22:30:40.201000Z", "labels": ["Documentation", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2476", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75789422, "iid": 2475, "project_id": 7603319, "title": "Deselected stream properties are not always excluded from `SCHEMA` messages", "description": "The extractor `select` rules (https://meltano.com/docs/plugins.html#select-extra) are currently only applied to the generated catalog file, and it's up to taps to only include selected properties in their `RECORD` messages, which all taps do that support this feature, and their `SCHEMA` messages, which not all taps do: many just read the schema from the bundled copy even if not all properties were selected.\n\nThis means that when trying to fix an issue with a tap that emits a schema that is not supported by the used target (for example one with column names starting with numbers: https://gitlab.com/meltano/tap-facebook/-/issues/6), we cannot currently fix using the `select` extra.", "state": "opened", "created_at": "2020-12-08T21:50:25.693000Z", "updated_at": "2021-03-08T16:39:35.248000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "bug", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2475", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75777426, "iid": 2474, "project_id": 7603319, "title": "Verify in CI that meltano/meltano Docker image entrypoint works correctly", "description": "Let's not run into https://gitlab.com/meltano/meltano/-/issues/2473 again.", "state": "closed", "created_at": "2020-12-08T16:15:43.742000Z", "updated_at": "2020-12-08T18:22:17.276000Z", "closed_at": "2020-12-08T18:22:17.215000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2474", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75738300, "iid": 2473, "project_id": 7603319, "title": "meltano/meltano Docker image entry point is broken", "description": "```bash\n$ sudo docker run meltano/meltano --version\ndocker: Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused \"exec: \\\"poetry run meltano\\\": executable file not found in $PATH\": unknown.\nERRO[0015] error waiting for container: context canceled\n```\n\nIntroduced by https://gitlab.com/meltano/meltano/-/merge_requests/1964.", "state": "closed", "created_at": "2020-12-08T02:03:44.093000Z", "updated_at": "2020-12-08T16:15:44.157000Z", "closed_at": "2020-12-08T02:06:01.665000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2473", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75565434, "iid": 2472, "project_id": 7603319, "title": "Document how to switch from one variant of a plugin to another", "description": "If a different variant of the plugin was already added to the project, `meltano add <type> <plugin> --variant=<new variant>` will _not_ add the new variant but will instead re-install the existing one. We can make this more clear from the command output.\n\nTo switch variants, we need to:\n- modify the `variant` and `pip_url` in `meltano.yml`, \n- run `meltano install <type> <plugin>` to re-install the plugin, and \n- update all of the settings to use the correct setting names/keys for the new variant, so that `meltano config <plugin> --list` no longer shows any \"Custom\" settings.", "state": "closed", "created_at": "2020-12-03T17:22:04.452000Z", "updated_at": "2021-01-20T22:25:25.254000Z", "closed_at": "2021-01-20T22:25:25.203000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2472", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75550981, "iid": 2471, "project_id": 7603319, "title": "Make tap-bigquery known to meltano", "description": "Resolved by https://gitlab.com/meltano/meltano/-/merge_requests/1969", "state": "closed", "created_at": "2020-12-03T13:59:04.361000Z", "updated_at": "2020-12-04T20:40:54.953000Z", "closed_at": "2020-12-04T20:40:54.871000Z", "labels": ["Extract", "flow::Doing"], "assignees": [87854, 2585766], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2471", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1702831, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75510785, "iid": 2470, "project_id": 7603319, "title": "Add additional linting and pre-commit to improve code quality", "description": "### Problem to solve\nThe overall code quality can use improvement, especially things like the absence of docstrings, so I propose adding more linting to the project, along with pre-commit hooks to validate rules before pushing changes.\n\n### Target audience\nThis is primarily focused on project contributors, though it will have downstream benefits for end-users due to a reduction in the number of bugs.\n\n### Further details\nWhile working on some code changes I noticed that there is currently very little linting being done as part of the contribution workflow. I think that it would be beneficial to adopt a linter for the Python and Javascript code along with a pre-commit hook configuration to allow for gradual improvement and increased consistency in the code style.\n\n### Proposal\nI suggest adopting the [pre-commit](https://pre-commit.com/) framework for managing hooks to be executed prior to committing/pushing code changes. This will reduce the need for stylistic/linting/etc. feedback during merge requests.\n\nI also suggest adopting the [Flake8](https://flake8.pycqa.org/) and [Flakehell](https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/flakehell.html#flakehell-legacy) tools for the Python code. In particular, I personally think that the [wemake-python-styleguide](https://wemake-python-stylegui.de/en/latest/) is an excellent set of plugins to handle a broad range of code quality elements, though it is on the extreme end of linters so I am happy to discuss the matter.\n\nFor Javascript I recommend using the [wemake-frontend-styleguide](https://github.com/wemake-services/wemake-frontend-styleguide), though a less strict linter would be an alternative option such as the vanilla eslint configuration.\n\n\n### What does success look like, and how can we measure that?\nFor this issue, success means having a set of linters that are run regularly as part of the development workflow and that work to incrementally improve the code quality for the project.", "state": "closed", "created_at": "2020-12-02T21:15:55.601000Z", "updated_at": "2020-12-29T21:55:59.196000Z", "closed_at": "2020-12-11T15:17:09.691000Z", "labels": ["Accepting Merge Requests", "Engineering", "flow::Doing"], "assignees": [199793], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2470", "weight": null, "has_tasks": false, "author_id": 199793, "assignee_id": 199793, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75456565, "iid": 2469, "project_id": 7603319, "title": "Extractor `schema` overrides are only applied to catalog, not tap's `SCHEMA` messages", "description": "The extractor schema override rules (https://meltano.com/docs/plugins.html#schema-extra) are currently only applied to the generated catalog file, and it's up to taps to use that same schema when emitting the `SCHEMA` message, which not all taps do: many just read the schema from the bundled copy even if it was overridden.\n\nThis means that when trying to fix an issue with a tap that emits a schema that is not supported by the used target (for example one claiming that a column can have multiple incompatible types: https://gitlab.com/meltano/tap-facebook/-/issues/7), we cannot currently fix this using the `schema` extra.", "state": "opened", "created_at": "2020-12-02T00:15:25.011000Z", "updated_at": "2021-03-08T16:39:37.153000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "bug", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2469", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75455173, "iid": 2468, "project_id": 7603319, "title": "Ability to dynamically calculate target table name and/or deprecate previous versions of a table", "description": "### Problem to solve\n\nThis is not a critical issue or blocker, but it's been coming up a bunch lately in my own organization while using Tapdance. We want to keep target database permissions at a minimum and have everything automated. But there's not a very clean way to do \"fresh starts\" or \"full backfill\" on a given table.\n\nTriggering a full backfill is tricky in today's singer ecosystem. There are two steps which need to be performed in the case of either (a) requiring a full backfill or (b) creating a fresh start due to table definition changes.\n\nSinger does a create job of auto-adding missing columns - but (for good reason) there is an aversion in the platform to destructive updates. This proposal would outline two paths to automating \"major version\" increments which require starting a new fresh version of the target table.\n\n### Target audience\n\n1. As a **data engineer**, I don't want to have to perform a precise and synchronized manual operations in order to get a fresh start on a table.\n2. As a **data team lead**, I don't want to have to closely supervise the manual operations required for a full backfill or \"fresh start\" on an existing table. I want the above to be possible and also to have confidence that no data loss will occur (unless explicitly performed or requested).\n\n\n### Further details\n\nA typical target schema today might look like this:\n\n```\nraw_db\n |- raw_salesforce\n     |- account\n     |- opportunity\n     |- user\n```\n\nAfter adding version numbers (starting with \"2\" to avoid confusion), the target schema after updating versions and rerunning the pipeline might look like:\n\n```\nraw_db\n |- raw_salesforce\n     |- account          (prev version)\n     |- account__v2      (new version)\n     |- opportunity      (prev version)\n     |- opportunity__v2  (new version)\n     |- user             (prev version)\n     |- user__v2         (new version)\n```\n\nAssuming this is consumed by a tool like dbt, the downstream transforms now automatically can union the data together and migrate safely to the new version. Optionally, an administrator can later drop the older table versions for data sensitivity reasons or just to reduce confusion.\n\n### Proposal\n\nIn outline:\n\n- Meltano would add a 'major version number' which can be incremented per table. The version number would be (optionally) configured per-table in `meltano.yml`. A command line interface could auto-bump the version number on a specific table, or on all tables in a given source.\n- The version number (if set) would be automatically concatenated as a suffix in the target table name, and it could also be concatenated into the state file path.\n- By optionally and simultaneously changing the state file path (or the bookmark within the state file), we can simultaneously break the connection to the prior version's bookmark - which then triggers a full table reload on next execution.\n\n\n### What does success look like, and how can we measure that?\n\nIf usage statistics are available, a metric of feature usage would be a good indicator of whether the feature is valuable to meltano users. Otherwise, it would be measurable in increased adoption of the tool and/or higher product satisfaction metrics on topics such as maintainability.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-12-01T23:35:29.115000Z", "updated_at": "2020-12-02T17:26:41.628000Z", "closed_at": null, "labels": ["feature requests"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2468", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75451415, "iid": 2467, "project_id": 7603319, "title": "Explore integration with other \"git for data\" FOSS tools", "description": "This spreadsheet listing \"git for data\" FOSS tools in various domains (including Meltano) was [shared by Justin Cormack](https://twitter.com/justincormack/status/1333886430989443077) on Twitter: https://docs.google.com/spreadsheets/d/1jGQY_wjj7dYVne6toyzmU7Ni0tfm-fUEmdh7Nw_ZH0k/edit#gid=0\n\nWe should find out if any of these would make good Meltano plugins (https://meltano.com/docs/plugins.html), like we already have Singer integration (https://meltano.com/docs/integration.html), dbt transformation (https://meltano.com/docs/transforms.html) and Airflow orchestration (https://meltano.com/docs/orchestration.html), and support for Great Expectations validation (https://gitlab.com/meltano/meltano/-/issues/2454) and Dagster orchestration (https://gitlab.com/meltano/meltano/-/issues/2393) underway.", "state": "opened", "created_at": "2020-12-01T21:45:45.952000Z", "updated_at": "2021-02-24T16:58:04.234000Z", "closed_at": null, "labels": ["Discussion", "Exploration", "Integrations", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2467", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75444991, "iid": 2466, "project_id": 7603319, "title": "`cryptography` and `pyOpenSSL` installed by `pip install meltano` are incompatible", "description": "As can be seen in https://gitlab.com/meltano/meltano/-/jobs/883954260:\n\n```\nCollecting cryptography==2.9.2 (from meltano==1.59.0)\n  Downloading https://files.pythonhosted.org/packages/58/95/f1282ca55649b60afcf617e1e2ca384a2a3e7a5cf91f724cf83c8fbe76a1/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64.whl (2.7MB)\n\n<snip>\n\nCollecting pyOpenSSL<21.0.0,>=16.2.0 (from snowflake-connector-python<3.0.0->snowflake-sqlalchemy==1.2.3->meltano==1.59.0)\n  Downloading https://files.pythonhosted.org/packages/c9/86/e21398551956735fef8f7883908771445878ccb16cd17c0896176419cd75/pyOpenSSL-20.0.0-py2.py3-none-any.whl (54kB)\n\n<snip>\n\npkg_resources.ContextualVersionConflict: (cryptography 2.9.2 (/builds/meltano/meltano/meltano-projects/.venv/lib/python3.6/site-packages), Requirement.parse('cryptography>=3.2'), {'pyOpenSSL'})\n```\n\n`requirements.txt` requires `cryptography==2.9.2` as of https://gitlab.com/meltano/meltano/-/merge_requests/1884, which was compatible with `pyOpenSSL` 19.1.0 which got installed previously (https://gitlab.com/meltano/meltano/-/jobs/870504798), but not  with the newly released 20.0.0 (https://pypi.org/project/pyOpenSSL/), which states `The minimum cryptography version is now 3.2.`\n\nWe should make Meltano depend on compatible versions again.", "state": "closed", "created_at": "2020-12-01T18:23:14.425000Z", "updated_at": "2020-12-01T23:22:42.355000Z", "closed_at": "2020-12-01T23:22:42.298000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2466", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1702831, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75443350, "iid": 2465, "project_id": 7603319, "title": "Automatically clean up old ELT logs", "description": "### Problem to solve\nMeltano generates log files in the following directories:\n\n.../.meltano/run/elt/...\n\n.../.meltano/run/airflow/logs\n\nThe log files are taking up a lot of space, that's why it would be good to have a solution of regular cleanup of old log files.\n\n\n### Target audience\nTarget audience is everyone that is using Meltano scheduler and has limited disk space.\n\n\n### Proposal\nIntroducing a custom config for Meltano **automatic log cleanup** and retaining with options for how many days to retain the log files (7d/30d/60d).\n\n\n### Current workaround\nOne can set up own cron job to automatically delete files with an old creation/modification date\n\n### Links / references", "state": "opened", "created_at": "2020-12-01T17:52:27.502000Z", "updated_at": "2020-12-02T19:03:28.008000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2465", "weight": null, "has_tasks": false, "author_id": 7309517, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75441603, "iid": 2464, "project_id": 7603319, "title": "Default transferwise variants of tap-postgres and tap-mysql are incompatible with default datamill-co variants of target-postgres and target-snowflake", "description": "As found in https://gitlab.com/meltano/meltano/-/issues/2462:\n\n>>>\n```\ntarget-postgres | psycopg2.ProgrammingError: syntax error at or near \"-\"\ntarget-postgres | LINE 1: CREATE TABLE tap_postgres.public-account_group (\"code_prefix...\n```\n\nThis indicates that tap-postgres (https://meltano.com/plugins/extractors/postgres.html, https://github.com/transferwise/pipelinewise-tap-postgres) is including the schema  (`public`) in the stream name it passes to the target (`public-account_group`), while target-postgres (https://meltano.com/plugins/loaders/postgres.html, https://github.com/datamill-co/target-postgres) expects the stream name to just be the table name (`account_group`), and it breaks when it sees the `-`.\n\nI suggest using the `transferwise` variant of target-postgres instead: https://meltano.com/plugins/loaders/postgres--transferwise.html, https://github.com/transferwise/pipelinewise-target-postgres, which was built to be used with the tap-postgres you're currently using, and does support schemas in stream names.\n>>>\n\nWe can start by mentioning this limitation under https://meltano.com/plugins/extractors/mysql.html#next-steps and https://meltano.com/plugins/extractors/postgres.html#next-steps.", "state": "closed", "created_at": "2020-12-01T17:15:07.812000Z", "updated_at": "2021-01-19T22:29:49.887000Z", "closed_at": "2021-01-19T22:29:49.820000Z", "labels": ["Documentation", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2464", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75441070, "iid": 2463, "project_id": 7603319, "title": "Values for tap-postgres `max_run_seconds`, `logical_poll_total_seconds`, and `break_at_end_lsn` settings are not cast correctly", "description": "They are missing a `kind` in `discovery.yml`: https://gitlab.com/meltano/meltano/-/blob/d0b5808c11b23130c9b15acffaa49a29381fe411/src/meltano/core/bundle/discovery.yml#L746-754", "state": "closed", "created_at": "2020-12-01T17:02:08.529000Z", "updated_at": "2020-12-01T18:08:32.922000Z", "closed_at": "2020-12-01T18:08:32.842000Z", "labels": ["Extract", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2463", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1702831, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 75139580, "iid": 2462, "project_id": 7603319, "title": "Meltano elt tab-postgres target-postgres (full table replication) -  failed", "description": "Hi, \n\n1. i a trying to setup my first melteano postgres extractor,\ni have configured meltano v1.5.9 with \n![image](/uploads/113868afb01b1d3196d13161c38eb599/image.png)\nand click test connection and it will show ,\n![image](/uploads/be9378c7af8411a11908cf9c4ee90b13/image.png)\n\n\n2. when i create a pipeline,and run it , **postgres to postgres** ,Log : Meltano Loading failed (1): (see above)\nmeltano | ELT could not be completed: Tap and target failed , please check the attached log.[postgres-to-postgres-job-log.txt](/uploads/a44872e934dd031324c49b1cad16623d/postgres-to-postgres-job-log.txt)\n\n![image](/uploads/e1a670913332e9d45d1b0fab4d0c986e/image.png)\n\n![image](/uploads/56d51e2ba79871ae57b107c90928b1ff/image.png)\n\n\nI am struggling to get meltano to run and need some assistance to get it running and please advice for the following,\n\n- why test connection failed, but the log file did show the tables in the extractor Postgres server which isn't that show that the extractor was able to connect to the Postgres server?\n- what was in the log file which caused the pipeline run to fail?\n- I am using the Full table replication method, do I need to write the model SQL?\n-", "state": "closed", "created_at": "2020-11-28T11:40:16.437000Z", "updated_at": "2020-12-10T17:43:49.736000Z", "closed_at": "2020-12-10T17:43:49.682000Z", "labels": ["Customer Support", "flow::Doing"], "assignees": [87854], "user_notes_count": 17, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2462", "weight": null, "has_tasks": false, "author_id": 11770, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74984040, "iid": 2461, "project_id": 7603319, "title": "`meltano invoke --dump=config <extractor>` fails if catalog discovery fails", "description": "As reported by Benjamin Maquet [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1606236205461300):\n\n>>>\n`meltano invoke --dump=config <tap>` does not work since it's failing before showing the content of the file\n>>>\n\nI responded:\n\n>>>\nI think I know why `meltano invoke --dump=config` is failing: before invoking the tap in sync mode, Meltano always runs the tap in discovery mode to generate the catalog file, and using `--dump=config` doesn't disable that `before_invoke` hook, so what you're seeing is the tap failing in discovery mode before Meltano even gets a chance to print the generated config file.\n>>>\n\nWe can disable catalog discovery with `--dump=config`, but not with `--dump=catalog` since it depends on the discovered catalog.", "state": "opened", "created_at": "2020-11-25T16:16:01.148000Z", "updated_at": "2021-01-11T15:48:36.646000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Configuration", "Extract", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2461", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74983092, "iid": 2460, "project_id": 7603319, "title": "Cache discovered extractor catalog when running pipeline", "description": "### Problem to solve\n(Summarize the problem we are trying to solve in the form of we need to do [A], so that [B] can [C])\nWe need to enable catalog to be cached and reused, so that meltano does not attempt to generate the entire catalog for each elt run.\nI believe the catalog generation for each run turns out to be a costly operation and instead there can be some mechanism to preserve the catalog and refresh it on-demand or based on a schedule.\n\n### Target audience\nThis could be an opt-in feature as well. Meltano already allows to manually specify a catalog. It would be great if the meltano utilities such as schema filters can be applied on a manual catalog as well.\n\n\n### Further details\nDuring my testing with tap-salesforce, the catalog file comes out to be 10MB with 1000 entities. It takes considerable amount of time and API calls to generate the catalog for each elt run when a typical use-case would involve syncing only 5-10 entities.\n\n\n### Proposal\nThere is already an option to specify the catalog file. I believe we only apply the same rules for a manual catalog, as it is done on a discovered catalog. \n\n\n### What does success look like, and how can we measure that?\n(Define both the success metrics and acceptance criteria. Note that success metrics indicate the desired business outcomes, while acceptance criteria indicate when the solution is working correctly. If there is no way to measure success, link to an issue that will implement a way to measure this)\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-11-25T15:56:08.600000Z", "updated_at": "2021-03-04T22:13:11.652000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "feature requests", "performance"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2460", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 7711027, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74938674, "iid": 2459, "project_id": 7603319, "title": "Publish Meltano core as an importable library", "description": "### Problem to solve\nThe functionality of Meltano in being able to wire together Singer taps and targets, track their state, and expose metrics about their execution is highly valuable. There are use cases where it would be helpful to be able to leverage those capabilities without also depending on the orchestration and UI functionality that is present in the Meltano project as it currently exists. As the core functionality is already encapsulated in its own module within the project it is worth exploring what is involved in extracting and publishing that portion of Meltano as a standalone library.\n\nMy initial use case is for being able to wrap Meltano's capabilities in a plugin for the Dagster data orchestration framework, though I'm sure there are many other elements of the broader data management ecosystem which could benefit.\n\n### Target audience\nData engineers and builders of other data ecosystem tooling.\n\n### Further details\nMy immediate goal is to be able to build a Dagster plugin that allows for executing extract and load workflows as part of a broader pipeline definition. The broader goal is to allow other tools to be able to easily add robust extract and load functionality without having to reinvent the wheel.\n\n### Proposal\nThere are a couple of ways that we can attack this.\n\nOne option is to extract the core as a separate project and then add it as a dependency to this Meltano project. That enforces clean interface definitions between the two projects and separates contributions between the core library and the UI/UX elements of the project.\n\nAnother option is to use something like the Pants build tool to treat this repository as a monorepo with multiple package builds. This eliminates the step of extracting the code to a separate repository and adding additional steps to the development workflow. It also ensures that new functionality can be added and tested across the core/UI/API/CLI boundaries with atomicity.\n\n### What does success look like, and how can we measure that?\nSuccess would be measured by the ability for other projects to leverage the robust integration, execution, and state tracking of Meltano EL pipelines without having to adopt the UI/CLI interfaces and the additional dependencies that they require.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-11-24T22:01:14.396000Z", "updated_at": "2020-11-25T18:12:02.958000Z", "closed_at": null, "labels": ["Architecture Decision"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2459", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 199793, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74868511, "iid": 2458, "project_id": 7603319, "title": "my-sql logo is missing", "description": "`mysql-logo.png` missing from static files.", "state": "closed", "created_at": "2020-11-23T21:28:32.754000Z", "updated_at": "2020-11-23T22:02:04.539000Z", "closed_at": "2020-11-23T22:02:04.393000Z", "labels": ["flow::Doing"], "assignees": [4066270], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2458", "weight": null, "has_tasks": false, "author_id": 4066270, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1679492, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74755872, "iid": 2457, "project_id": 7603319, "title": "Incorrect `tap-adwords` configuration in `discovery.yml`", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\n\n\n\n### What is the expected *correct* behavior?\n_What should be happening?_\n\n\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\nTrying to get `tap-adwords` to accept custom `primary_keys`. Follow https://meltano.com/plugins/extractors/adwords.html#primary-keys and set the variables in the meltano.yml file (pic of config below + pic of output for `meltano config tap-adwords list`), meltano still uses the default value instead of the custom ones.  \nNext, set the env var as given in the same documentation.  It throws a TypeError on the processing of the config (pic also below).\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\nmeltano config\n![Screen_Shot_2020-11-20_at_9.31.11_AM](/uploads/ef210fcc1fb417420f9249b5f092db86/Screen_Shot_2020-11-20_at_9.31.11_AM.png)\n\nprintout of `meltano config tap-adwords list`\n![Screen_Shot_2020-11-20_at_9.30.45_AM](/uploads/639df14bec20a1a6968fbfb7c03aa5d0/Screen_Shot_2020-11-20_at_9.30.45_AM.png)\n\nerror from running `meltano elt ...` with the env var `TAP_ADWORDS_PRIMARY_KEYS`\n![Screen_Shot_2020-11-20_at_9.34.37_AM](/uploads/a090443ef1f08ba9a21ff97b78ed0ba5/Screen_Shot_2020-11-20_at_9.34.37_AM.png)\n\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\nIf you change the type of the variable `primary_keys` from `hidden` to `object` in the `discovery.yml` everything works as expected! I tried this locally and it worked.\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-11-20T16:54:46.184000Z", "updated_at": "2020-11-23T23:08:47.028000Z", "closed_at": "2020-11-23T23:08:46.994000Z", "labels": ["Configuration", "Extract", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2457", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 6426634, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1679492, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74578751, "iid": 2456, "project_id": 7603319, "title": "Let project plugin definitions and config be defined in individual YAML files instead of `meltano.yml`", "description": "As I wrote in https://gitlab.com/meltano/meltano/-/issues/2206#note_388496082:\n\n>>>\nI think we could also allow users to define their project's taps and targets in their own YAML files, instead of having everything live in `meltano.yml`, since the `select`, `metadata`, `schema`, and `config` properties can grow quite large.\n\nThese files could live at `<type>/<name>.yml` in the project, e.g. `extractors/tap-example.yml`:\n\n```yaml\nvariant: meltano\npip_url: git+https://gitlab.com/meltano/tap-example.git\nselect: ...\nmetadata: ...\nschema: ...\nconfig: ...\n```\n\nWe wouldn't need to support variant subdirectories in this case, since only a single variant of a plugin should exist in a project anyway, which also goes for custom plugins.\n>>>", "state": "opened", "created_at": "2020-11-18T16:40:53.090000Z", "updated_at": "2020-11-18T19:38:22.886000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Configuration"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2456", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74524595, "iid": 2455, "project_id": 7603319, "title": "Selecting a standard meltano target for S3", "description": "### Problem to solve\n(Summarize the problem we are trying to solve in the form of we need to do [A], so that [B] can [C])\n\nS3 is a commonly desired target, whether for a generic 'data lake' architecture or for newer generation warehouse platforms like Athena and Snowflake.  Currently, Meltano does not have a designated OOTB S3 target.\n\n### Target audience\n(For whom are we doing this? Include a persona)\n\n\n### Further details\n(Include use cases, benefits, and/or goals)\n\n\n### Proposal\n\nThere are a few existing targets to choose from as a starting point:\n\n- https://github.com/vitoravancini/target-s3\n- https://github.com/faumel/target-s3-avro\n- https://github.com/transferwise/pipelinewise-target-s3-csv\n\n### What does success look like, and how can we measure that?\n(Define both the success metrics and acceptance criteria. Note that success metrics indicate the desired business outcomes, while acceptance criteria indicate when the solution is working correctly. If there is no way to measure success, link to an issue that will implement a way to measure this)\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-11-17T19:20:06.257000Z", "updated_at": "2020-11-19T01:38:26.601000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Load"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2455", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 2613, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74453850, "iid": 2454, "project_id": 7603319, "title": "Support for data validation with Great Expectations", "description": "### Problem to solve\nThis started with a conversation with @DouweM: We were wondering if it was possible to integrate data validation with Great Expectations more tightly into a Meltano workflow. This could be as simple as a \"meltano add validator\" type wrapper and integration into the elt runs, or some other form of integration\n\nIt would also be neat for Great Expectations to show up in the Meltano UI, maybe with Data Docs/validation results integrated into the UI, potentially even with a \"configure\" interface to the great_expectations.yml config file (although that is definitely a stretch).\n\nOne example for a UI integration of GE validation results is Dagster: https://dagster.io/blog/great-expectations-for-dagster\n\n### Target audience\nThe target audience would be two-fold: \n1. Data engineers/owners of the Meltano workflow who run the pipelines and want to see whether all source data was correctly extracted and whether data was correctly transformed, and \n2. data consumers (stakeholders) that want to use Data Docs for data documentation and to see the most recent validation status.\n\n### Further details\nNot much to add - data validation is crucial to pipelines, and I think making it more accessible/part of Meltano would be really beneficial for users!\n\n### Proposal\nI would love to hear from existing GE users how they envision this could work - here are some of my thoughts:\n- At a very high level, maybe we could add another key concept like a \"validator\" that can be added to a Meltano project. This could potentially even be a wrapper for \"great_expectations init\" to initialize a GE data context in the Meltano project. \n- A user would then either configure a GE datasource manually, or all data connections could be inherited from Meltano. \n- The user would then create Expectation Suites and Checkpoints. Running \"meltano elt\" (possibly with a --run-validation flag?) could then trigger running all configured Checkpoints as part of a pipeline. I'm not quite clear yet how or whether a user would specify when exactly to run validation.\n\n### What does success look like, and how can we measure that?\nAcceptance criteria: a user can run validation with GE as part of a Meltano pipeline run without having to invoke GE separately, and can see the results either in Data Docs or directly in the Meltano UI.\n\nSuccess: people actually run validation with GE in Meltano!\n\n\n### Links / references\n\n* GE homepage: greatexpectations.io\n* Dagster integration: https://dagster.io/blog/great-expectations-for-dagster\n* Airflow operator (as an example of how to invoke validation): https://github.com/great-expectations/airflow-provider-great-expectations", "state": "opened", "created_at": "2020-11-16T19:17:23.490000Z", "updated_at": "2021-03-02T22:05:41.737000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Integrations", "feature requests"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2454", "weight": null, "has_tasks": false, "author_id": 7648421, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74448400, "iid": 2453, "project_id": 7603319, "title": "`insights_buffer_days` is passed to `tap-facebook` as boolean rather than integer", "description": "In https://gitlab.com/meltano/meltano/-/merge_requests/1926, I accidentally changed the `kind` of `tap-facebook`'s `insights_buffer_days` setting from `integer` to `boolean`: https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L462\n\nThis is incorrect, and breaks this feature.", "state": "closed", "created_at": "2020-11-16T18:06:20.203000Z", "updated_at": "2020-11-16T18:08:56.720000Z", "closed_at": "2020-11-16T18:08:56.659000Z", "labels": ["Accepting Merge Requests", "Configuration", "Extract", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2453", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667059, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74443184, "iid": 2452, "project_id": 7603319, "title": "New tap and target templates", "description": "To get us one step closer to https://gitlab.com/meltano/meltano/-/issues/2401 and https://gitlab.com/meltano/meltano/-/issues/2402, we can create new [cookiecutter](https://github.com/cookiecutter/cookiecutter) templates for taps and targets as a (more permissively licensed, e.g. Apache 2) alternative to the existing https://github.com/singer-io/singer-tap-template and https://github.com/singer-io/singer-target-template.\n\nMeltano users will be able to easily create a new extractor/loader using these templates and https://gitlab.com/meltano/meltano/-/issues/2447. As we build the framework, we can update the templates to use it.", "state": "opened", "created_at": "2020-11-16T16:13:33.743000Z", "updated_at": "2021-02-24T17:18:27.214000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [4809760], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2452", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 4809760, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74402081, "iid": 2451, "project_id": 7603319, "title": "Tap and target invocation errors show up in `meltano elt` output but not in logs and UI", "description": "### What is the current *bug* behavior?\nIn the current latest Meltano version (1.58.0), the error message which is raised when a tap has an invalid catalog file is output when run on the CLI via `meltano elt my-tap my-target`, but the same error message is not shown in the log modal window when run in the UI.\n\n### What is the expected *correct* behavior?\nAll error messages should be shown in both the CLI _and_ the Meltano UI.\n\n\n### Steps to reproduce\n \n- One way to reproduce this is to edit the `core/plugin/singer/tap.py` file to force an error to be raised. For example, simply add a `finally` block below line 270 in https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/singer/tap.py#L270 which will raise an error (for example, a PluginExecutionError can be raised here).\n\n- When running `meltano elt my-tap my-target` on the command line, the error will now be raised and the message will be output. \n\n- However, if the same tap/target combination is then run by executing a pipeline via the Meltano UI, the above error message does not appear in the modal window which shows the log.\n\n\n### Possible fixes\nA simple fix would be to use a `logging.error` message in the except block in tap.py. I haven't investigated if other types of errors are not being surfaced in the Meltano UI, so this simple fix might not be sufficient.", "state": "closed", "created_at": "2020-11-16T00:35:59.113000Z", "updated_at": "2020-12-01T18:02:47.778000Z", "closed_at": "2020-12-01T18:02:47.623000Z", "labels": ["Accepting Merge Requests", "CLI", "bug", "flow::Review"], "assignees": [5042742], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2451", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": 5042742, "closed_by_id": 87854, "milestone_id": 1679492, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74342021, "iid": 2450, "project_id": 7603319, "title": "Remove undocumented configuration profile functionality", "description": "As discussed in https://gitlab.com/groups/meltano/-/epics/51#note_447314605, we will be implementing https://gitlab.com/meltano/meltano/-/issues/2390 instead of the configuration profile functionality described in that epic.\n\nAt the same time, we will remove the undocumented profiles functionality that's already been partially implemented.", "state": "closed", "created_at": "2020-11-13T19:03:02.421000Z", "updated_at": "2020-11-18T21:27:23.484000Z", "closed_at": "2020-11-18T21:27:23.404000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2450", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667059, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74293048, "iid": 2449, "project_id": 7603319, "title": "Windows over WSL - install log", "description": "Logging here my install experience on Windows, using WSL (as of 11/12/2020 using ubuntu 18.04 on Windows WSL):\n\n## Meltano Install (Windows Native - doesn't work \ud83d\udc4e)\n\n```cmd\nPS C:\\Files\\Source\\slalom-data-platform-core\\data\\taps> pipx install meltano\n ** On entry to DGEBAL parameter number  3 had an illegal value       \n ** On entry to DGEHRD  parameter number  2 had an illegal value      \n ** On entry to DORGHR DORGQR parameter number  2 had an illegal value\n ** On entry to DHSEQR parameter number  4 had an illegal value       \n  ERROR: Command errored out with exit status 1:\n   command: 'C:\\Users\\aaron.steers\\.local\\pipx\\venvs\\meltano\\Scripts\\python.exe' 'C:\\Users\\aaron.steers\\.local\\pipx\\shared\\Lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py' get_requires_for_build_wheel 'C:\\Users\\AARON~1.STE\\AppData\\Local\\Temp\\tmp6k6xq2a0'\n       cwd: C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-install-tgz1ls1p\\snowflake-connector-python\n  Complete output (26 lines):\n  Traceback (most recent call last):\n    File \"C:\\Users\\aaron.steers\\.local\\pipx\\shared\\Lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 280, in <module>\n      main()\n    File \"C:\\Users\\aaron.steers\\.local\\pipx\\shared\\Lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 263, in main\n    File \"C:\\Users\\aaron.steers\\.local\\pipx\\shared\\Lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 114, in get_requires_for_build_wheel   \n      return hook(config_settings)\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 149, in get_requires_for_build_wheel\n      return self._get_build_requires(\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 130, in _get_build_requires\n      self.run_setup()\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 253, in run_setup      super(_BuildMetaLegacyBackend,\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 145, in run_setup      exec(compile(code, __file__, 'exec'), locals())\n    File \"setup.py\", line 52, in <module>\n      import pyarrow\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\pyarrow\\__init__.py\", line 58, in <module>       \n      import pyarrow.compat as compat\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\pyarrow\\compat.py\", line 24, in <module>\n      import numpy as np\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\numpy\\__init__.py\", line 305, in <module>        \n      _win_os_check()\n    File \"C:\\Users\\aaron.steers\\AppData\\Local\\Temp\\pip-build-env-gtck3vek\\overlay\\Lib\\site-packages\\numpy\\__init__.py\", line 302, in _win_os_check   \n      raise RuntimeError(msg.format(__file__)) from None\n  RuntimeError: The current Numpy installation ('C:\\\\Users\\\\aaron.steers\\\\AppData\\\\Local\\\\Temp\\\\pip-build-env-gtck3vek\\\\overlay\\\\Lib\\\\site-packages\\\\numpy\\\\__init__.py') fails to pass a sanity check due to a bug in the windows runtime. See this issue for more information: https://tinyurl.com/y3dm3h86\n  ----------------------------------------\nERROR: Command errored out with exit status 1: 'C:\\Users\\aaron.steers\\.local\\pipx\\venvs\\meltano\\Scripts\\python.exe' 'C:\\Users\\aaron.steers\\.local\\pipx\\shared\\Lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py' get_requires_for_build_wheel 'C:\\Users\\AARON~1.STE\\AppData\\Local\\Temp\\tmp6k6xq2a0' Check the logs for full command output.\n```\n\n## Meltano Install (WSL - works \ud83d\udc4d)\n\n```bash\najsteers@D520977490:/mnt/c/WINDOWS/system32$ pipx install meltano\n  installed package meltano 1.58.0, Python 3.6.8\n  These apps are now globally available\n    - alembic\n    - chardetect\n    - dotenv\n    - flask\n    - gitlab\n    - gunicorn\n    - gunicorn_paster\n    - jp.py\n    - jsonschema\n    - mako-render\n    - markdown_py\n    - meltano\n    - pybabel\n    - pyhocon\n    - pyjwt\n    - snowflake-dump-certs\n    - snowflake-dump-ocsp-response\n    - snowflake-dump-ocsp-response-cache\n    - snowflake-export-certs\n    - sqlformat\n    - watchmedo\ndone! \u2728 \ud83c\udf1f \u2728\n```\n\n(Success! \ud83d\udc4d)\n\n## Meltano Init (Works \ud83d\udc4d)\n\n```\najsteers@D520977490:/mnt/c/Files/Source/slalom-data-platform-core/data/taps$ meltano init slalom-data-platform\nCreated slalom-data-platform\nCreating project files...\nCreated slalom-data-platform/meltano.yml\nCreated slalom-data-platform/README.md  \nCreated slalom-data-platform/requirements.txt    \nCreated slalom-data-platform/.gitignore\nCreated slalom-data-platform/model/.gitkeep      \nCreated slalom-data-platform/extract/.gitkeep    \nCreated slalom-data-platform/load/.gitkeep       \nCreated slalom-data-platform/transform/.gitkeep\nCreated slalom-data-platform/analyze/.gitkeep\nCreated slalom-data-platform/notebook/.gitkeep\nCreated slalom-data-platform/orchestrate/.gitkeep\nCreating system database...\n[2020-11-12 17:13:32,189] [627|MainThread|alembic.runtime.migration] [INFO] Context impl SQLiteImpl.\n[2020-11-12 17:13:32,190] [627|MainThread|alembic.runtime.migration] [INFO] Will assume non-transactional DDL.\nUpgrading database to e4fbabc3fed6\n[2020-11-12 17:13:32,216] [627|MainThread|alembic.runtime.migration] [INFO] Context impl SQLiteImpl.\n[2020-11-12 17:13:32,216] [627|MainThread|alembic.runtime.migration] [INFO] Will assume non-transactional DDL.\n[2020-11-12 17:13:32,243] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade  -> b4c05e463b53, Create meltano.core base tables        \n[2020-11-12 17:13:32,283] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade b4c05e463b53 -> 6ef30ab7b8e5, Create meltano.api tables  \n[2020-11-12 17:13:32,346] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade 6ef30ab7b8e5 -> 53e97221d99f, Add run_id to Job\n[2020-11-12 17:13:32,377] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade 53e97221d99f -> a3e2b0a4937d, add_login_audit_columns    \n[2020-11-12 17:13:32,395] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade a3e2b0a4937d -> 990c0665f3ce, ensure user.login_count default value\n[2020-11-12 17:13:32,406] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade 990c0665f3ce -> ceb00d7ff3bd, Create the EmbedToken table[2020-11-12 17:13:32,421] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade ceb00d7ff3bd -> 23ea52e6d784, add resource type to embed \ntoken\n[2020-11-12 17:13:32,443] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade 23ea52e6d784 -> 87d9638f6ac6, Add Subscription\n[2020-11-12 17:13:32,458] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade 87d9638f6ac6 -> 367228df6a43, Add 'trigger' to Job       \n[2020-11-12 17:13:32,470] [627|MainThread|alembic.runtime.migration] [INFO] Running upgrade 367228df6a43 -> e4fbabc3fed6, add last activity at column\nProject slalom-data-platform has been created.\n\nNext steps:\n        cd slalom-data-platform\n        Visit https://meltano.com/ to learn where to go from here\n\n> Meltano sends anonymous usage data that helps improve the product.\n> You can opt-out for new, existing, or all projects.\n> https://meltano.com/docs/settings.html#send-anonymous-usage-stats\n```\n\n## Meltano Add Custom (Works :smile:)\n\n```bash\najsteers@D520977490:/mnt/c/Files/Source/slalom-data-platform-core/data/taps/meltano$ meltano add extractor --custom tap-dynamodb\nAdding new custom extractor with name 'tap-dynamodb'...\n\nSpecify the plugin's namespace, which will serve as the:\n- identifier to find related/compatible plugins\n- default database schema (`load_schema` extra),\n  for use by loaders that support a target schema\n\nHit Return to accept the default: plugin name with underscores instead of dashes\n\n(namespace) [tap_dynamodb]:\n\nSpecify the plugin's `pip install` argument, for example:\n- PyPI package name:\n        tap-dynamodb\n- Git repository URL:\n        git+https://gitlab.com/meltano/tap-dynamodb.git\n- local directory, in editable/development mode:\n        -e extract/tap-dynamodb\n\nDefault: plugin name as PyPI package name\n\n(pip_url) [tap-dynamodb]:\n\nSpecify the package's executable name\n\nDefault: package name derived from `pip_url`\n\n(executable) [tap-dynamodb]: \n\nSpecify the tap's supported Singer features (executable flags), for example:\n        `catalog`: supports the `--catalog` flag\n        `discover`: supports the `--discover` flag\n        `properties`: supports the `--properties` flag\n        `state`: supports the `--state` flag\n\nTo find out what features a tap supports, reference its documentation or try one\nof the tricks under https://meltano.com/docs/contributor-guide.html#how-to-test-a-tap.\n\nMultiple capabilities can be separated using commas.\n\nDefault: no capabilities\n\n(capabilities) [[]]:\n\nSpecify the tap's supported settings (`config.json` keys)\n\nNested properties can be represented using the `.` separator,\ne.g. `auth.username` for `{ \"auth\": { \"username\": value } }`.\n\nTo find out what settings a tap supports, reference its documentation.\n\nMultiple setting names (keys) can be separated using commas.\n\nDefault: no settings\n\n(settings) [[]]:\n\nInstalling extractor 'tap-dynamodb'...\nInstalled extractor 'tap-dynamodb'\n```", "state": "closed", "created_at": "2020-11-13T01:31:55.323000Z", "updated_at": "2020-11-19T23:59:13.439000Z", "closed_at": "2020-11-19T23:59:13.395000Z", "labels": ["Installation", "Windows support", "flow::Doing"], "assignees": [4809760], "user_notes_count": 17, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2449", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": 4809760, "closed_by_id": 4809760, "milestone_id": 1667059, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74212202, "iid": 2446, "project_id": 7603319, "title": "unable to start the UI", "description": "Hi,\ni have tried to setup Meltano, before i setup the .env , i can access using the HTTP://<mydomain.com>:5000, but after i did the\nfollowing ,\n \n- meltano config meltano set ui server_name meltano.example.com\n- meltano config meltano set ui session_cookie_domain meltano.example.com\n- meltano ui setup meltano.example.com\n- meltano config meltano set ui forwarded_allow_ips \"*\"\n- meltano user add admin securepassword --role admin\n- meltano config meltano set ui authentication true\n- set the .env to 644 permission ( if not doing so, my meltano.service won't start)\n\ni restart the meltano UI , i got the error ,\n\n> The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\n\ncan anyone give a hand for some direction please, thanks.", "state": "closed", "created_at": "2020-11-11T15:59:28.770000Z", "updated_at": "2020-11-16T17:05:09.087000Z", "closed_at": "2020-11-16T17:05:09.047000Z", "labels": ["Customer Support", "flow::Doing"], "assignees": [87854], "user_notes_count": 7, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2446", "weight": null, "has_tasks": false, "author_id": 11770, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667059, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74211834, "iid": 2445, "project_id": 7603319, "title": "tap-google-analytics configuration issue with required paramater", "description": "\ntap-google-analytics ui configuration make all parameters mandatory but as per documentation, we can use service account client secret file or OAuth information to configure google analytics tap![Screenshot_2020-11-11_at_10.02.09_AM](/uploads/a04ca89e07ec73c560f72b0718df192a/Screenshot_2020-11-11_at_10.02.09_AM.png).\n\nAfter providing mandatory information, Test Connection button is still disable..", "state": "closed", "created_at": "2020-11-11T15:49:12.417000Z", "updated_at": "2020-11-11T19:19:58.625000Z", "closed_at": "2020-11-11T19:19:58.556000Z", "labels": ["Accepting Merge Requests", "UI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2445", "weight": null, "has_tasks": false, "author_id": 7619330, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74172740, "iid": 2444, "project_id": 7603319, "title": "Consider renaming extractor \"entities\" and \"attributes\" to \"streams\" and \"properties\" for consistency with Singer", "description": "This would prevent confusion and inconsistent/interchangeable use of the Meltano-specific and Singer-specific term in docs or conversation.\n\nMeltano users don't technically need to be familiar with underlying Singer concepts, and \"entities\" and \"attributes\" are arguably more user-friendly and less implementation-specific, but especially at this stage this is unrealistic since users will still often need to debug (and fix) taps and read their repositories and documentation, which use the Singer terms.\n\nIf Meltano were to at one point add support for a different open source EL standard that uses different terms, using \"streams\" and \"properties\" may no longer make sense, but that's a bridge we can cross then.", "state": "opened", "created_at": "2020-11-10T23:31:34.201000Z", "updated_at": "2021-03-01T23:07:44.920000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "flow::Doing"], "assignees": [4809760], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2444", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 4809760, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74172587, "iid": 2443, "project_id": 7603319, "title": "Document how to migrate from PipelineWise YAML to extractor `replication-{method,key}` metadata and loader `schema_mapping`", "description": "This can be a precursor to Meltano supporting a similar format itself: https://gitlab.com/meltano/meltano/-/issues/2385.", "state": "opened", "created_at": "2020-11-10T23:21:30.483000Z", "updated_at": "2020-11-10T23:21:30.723000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "Extract", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2443", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74172534, "iid": 2442, "project_id": 7603319, "title": "Document how to use `schema_mapping` setting on `transferwise` variants of `target-snowflake` and `target-postgres`", "description": "The format of the setting is not currently documented:\n- https://meltano.com/plugins/loaders/snowflake--transferwise.html#schema-mapping\n- https://meltano.com/plugins/loaders/postgres--transferwise.html#schema-mapping\n\nReading the [PipelineWise source](https://github.com/transferwise/pipelinewise/blob/18b0e2166bebc33e75a65bbd9b946b7ab2609866/pipelinewise/cli/config.py#L300-L303) reveals the intended format:\n\n```json\n{\n  \"<source_schema>\": {\n    \"target_schema\": \"<target_schema>\",\n    \"target_schema_select_permissions\": \"<target_schema_select_permissions>\",\n  },\n  # ...\n}\n```\n\nThese `<variables>` correspond to the values in the PipelineWise YAML config that can be seen in https://gitlab.com/meltano/meltano/-/issues/2385:\n\n```yaml\nschemas:\n\n  - source_schema: \"public\"            # Source schema in postgres with tables\n    target_schema: \"repl_pg_public\"    # Target schema in the destination Data Warehouse\n    target_schema_select_permissions:  # Optional: Grant SELECT on schema and tables that created\n      - grp_stats\n\n  # Here go `tables`\n\n  # You can add as many schemas as you need...\n  # Uncomment this if you want replicate tables from multiple schemas\n  #- source_schema: \"another_schema_in_postgres\"\n  #  target_schema: \"another\n```", "state": "closed", "created_at": "2020-11-10T23:19:03.724000Z", "updated_at": "2021-01-20T15:46:27.694000Z", "closed_at": "2021-01-20T15:46:27.613000Z", "labels": ["Accepting Merge Requests", "Documentation", "Load", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2442", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74215820, "iid": 2448, "project_id": 7603319, "title": "Improve documentation around adding new (variants of) discoverable plugins", "description": "We've got https://meltano.com/docs/contributor-guide.html#discoverable-plugins, but we can do better to describe the necessary changes:\n- new entry in [`src/meltano/core/bundle/discovery.yml`](src/meltano/core/bundle/discovery.yml)\n- new docs under [`src/plugins/extractors`](src/plugins/extractors) or [`src/plugins/loaders`](src/plugins/loaders) with a link in the `README.md` file in the same directory", "state": "closed", "created_at": "2020-11-10T23:12:24.098000Z", "updated_at": "2021-02-24T17:19:13.538000Z", "closed_at": "2021-01-22T21:30:47.558000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2448", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74215818, "iid": 2447, "project_id": 7603319, "title": "Add `meltano create <extractor|loader> <name>` CLI command to create a new tap/target from a template", "description": "To start, we could use [cookiecutter](https://github.com/cookiecutter/cookiecutter) with https://github.com/singer-io/singer-tap-template and https://github.com/singer-io/singer-target-template, until we have a better option: https://gitlab.com/meltano/meltano/-/issues/2452\n\nSee also https://gitlab.com/meltano/meltano/-/issues/2401 and https://gitlab.com/meltano/meltano/-/issues/2402.", "state": "opened", "created_at": "2020-11-10T23:07:30.671000Z", "updated_at": "2021-01-04T22:26:37.488000Z", "closed_at": null, "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2447", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74172309, "iid": 2441, "project_id": 7603319, "title": "Add CI job to verify all discoverable plugins can be installed successfully on all supported Python versions", "description": "", "state": "opened", "created_at": "2020-11-10T23:06:15.921000Z", "updated_at": "2020-11-10T23:06:15.921000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Testing"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2441", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74168158, "iid": 2440, "project_id": 7603319, "title": "`docs` job fails with vague `ERROR: Job failed: exit code 1`", "description": "See https://gitlab.com/meltano/meltano/-/jobs/841670357:\n\n```bash\n<snip>\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/mstile-144x144.png\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/meltano-diagram.png\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/apple-touch-icon.png\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/mstile-310x150.png\nCleaning up file based variables\nERROR: Job failed: exit code 1\n```\n\nThe failing command is [`$REMOTE_EXEC \"mkdir -p $SSH_BACKUP_DIRECTORY; tar zcvf $SSH_BACKUP_DIRECTORY-$(date +%Y-%m-%dT%H:%M).tar.gz $SSH_DIRECTORY/$SSH_WWW_DIRECTORY\"`](https://gitlab.com/meltano/meltano/-/blob/master/.gitlab/ci/docs.gitlab-ci.yml#L25), where `$REMOTE_EXEC` is `ssh -o StrictHostKeyChecking=no $SSH_USER_DOMAIN -p$SSH_PORT`.\n\nAn earlier run (https://gitlab.com/meltano/meltano/-/jobs/841365856) logged those exact same output lines, but then was able to continue on to the next command:\n\n```bash\n<snip>\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/mstile-144x144.png\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/meltano-diagram.png\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/apple-touch-icon.png\n/home/u894-pruvsekvb4qh/www/meltano.com/public_html/mstile-310x150.png\n$ $REMOTE_EXEC \"cd $SSH_DIRECTORY && find ./$SSH_WWW_DIRECTORY -mindepth 1 -maxdepth 1 -not -name blog -not -name '.' -exec rm -rf  '{}' \\;\"\n$ scp -o stricthostkeychecking=no -P$SSH_PORT -r public/* $SSH_USER_DOMAIN:$SSH_DIRECTORY/$SSH_WWW_DIRECTORY\nSaving cache for successful job\nCreating cache default...\ndocs/node_modules/: found 25033 matching files and directories \nUploading cache.zip to https://storage.googleapis.com/gitlab-com-runners-cache/project/7603319/default \nCreated cache\nCleaning up file based variables\nJob succeeded\n```", "state": "closed", "created_at": "2020-11-10T20:39:58.958000Z", "updated_at": "2020-12-02T20:56:01.092000Z", "closed_at": "2020-12-02T20:56:01.057000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 6, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2440", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1702831, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74117193, "iid": 2439, "project_id": 7603319, "title": "`docs` job fails with scp error", "description": "See https://gitlab.com/meltano/meltano/-/jobs/839607841:\n\n```\n$ scp -o stricthostkeychecking=no -P$SSH_PORT -r public/. $SSH_USER_DOMAIN:$SSH_DIRECTORY/$SSH_WWW_DIRECTORY\nscp: error: unexpected filename: .\n```\n\n`-r public/.` is no longer supported per https://superuser.com/questions/1403473/scp-error-unexpected-filename/1403506. Instead, we can use `-r public/*`, since we don't care about dotfiles.", "state": "closed", "created_at": "2020-11-10T00:14:26.774000Z", "updated_at": "2020-11-10T00:15:11.827000Z", "closed_at": "2020-11-10T00:15:11.753000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2439", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74115826, "iid": 2438, "project_id": 7603319, "title": "Add missing `replica_set`, `ssl`, and `verify_mode` settings to `tap-mongodb`", "description": "See https://github.com/singer-io/tap-mongodb#set-up-config-file and https://github.com/singer-io/tap-mongodb/blob/f0fcc01e679acb40689b952d418425500fd17612/tap_mongodb/__init__.py#L357-L367.\n\nNew `settings` for `tap-mongodb` in `discovery.yml`:\n\n```yml\n- name: replica_set\n- name: ssl\n  value: false\n  value_post_processor: stringify\n- name: verify_mode\n  value: true\n  value_post_processor: stringify\n```\n\nThey'll also need to be added to `docs/src/plugins/extractors/mongodb.md`.\n\nThere's also `include_schemas_in_destination_stream_name`: https://github.com/singer-io/tap-mongodb/blob/f0fcc01e679acb40689b952d418425500fd17612/tap_mongodb/__init__.py#L380", "state": "closed", "created_at": "2020-11-09T23:14:29.687000Z", "updated_at": "2020-11-11T16:30:39.030000Z", "closed_at": "2020-11-11T16:30:38.975000Z", "labels": ["Accepting Merge Requests", "Configuration", "Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2438", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74115641, "iid": 2437, "project_id": 7603319, "title": "Add `--dump={config,catalog}` to `meltano invoke`", "description": "Related to https://gitlab.com/meltano/meltano/-/issues/2355.", "state": "closed", "created_at": "2020-11-09T23:05:21.946000Z", "updated_at": "2020-12-30T22:38:18.441000Z", "closed_at": "2020-11-09T23:32:27.159000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2437", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 74051357, "iid": 2436, "project_id": 7603319, "title": "Retry on any error during object extraction by tap", "description": "### Problem to solve\n\nWe need to download all objects from source using Tap, retrying on errors, before we start the incremental data flow.\n\n### Target audience\n\nData Engineers who are trying to download 100s objects and sometime the pipelines throws unexpected error during one of the object download after downloading many objects. A missing retry functionality makes it harder to achieve a clean full-refresh run before we run the incremental data flow.\n\n### Further details\nWe are trying to download many (100s) objects from Salesforce. Sometime object download fails due to server side issues. The tap-salesforce throws error and the full-refresh completes without downloading all objected. Obviously the state is saved so we can start again. But this second execution will again start downloading all data including the incremental data for already downloaded objects and full data for objects with error. \n\n\n### Proposal\nIdeally a preferred solution would be to run the Meltano with retry setting to retry only failed objects and provide an ability to complete the full data download before we start incremental flow.   \n\nIt would be even better if Meltano does retries before giving up with error on any object in the first full data download attempt itself (of course a configurable setting).\n\n### What does success look like, and how can we measure that?\nWe generally run the first run with switch `--full-refresh` and would like to configure the airflow to retry the Meltano flow if there is any failure but any failure with one object causes the Airflow to retry all (because of the `--full-refresh` switch). It would be good if we can add another switch `--retry-on-error` to retry the object download if there is any error. This will help us do a clean dull refresh before starting the incremental flow. \n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "opened", "created_at": "2020-11-09T03:20:43.966000Z", "updated_at": "2020-11-09T16:59:55.342000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2436", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 6351669, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73994864, "iid": 2435, "project_id": 7603319, "title": "Let boolean settings be passed to tap/target as stringified `'true'` or `'false'`", "description": "For some reason, https://github.com/transferwise/pipelinewise-target-postgres (https://gitlab.com/meltano/meltano/-/issues/2425) requires the `ssl` setting to have a value of `'true'` (string) to enable SSL, instead of `true` (boolean): https://github.com/transferwise/pipelinewise-target-postgres/blob/e7eb0c6edc253d2e98dbbd56932091492e883867/target_postgres/db_sync.py#L302\n\nIn Meltano we should just treat the setting as `kind: boolean` and convert the value at the last minute.", "state": "closed", "created_at": "2020-11-06T23:07:17.607000Z", "updated_at": "2020-11-07T00:20:26.698000Z", "closed_at": "2020-11-07T00:20:26.654000Z", "labels": ["feature requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2435", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73993062, "iid": 2434, "project_id": 7603319, "title": "Snowflake Account setting docs prescribe incorrect format", "description": "https://meltano.com/plugins/loaders/snowflake.html#snowflake-account\n\nAs reported by @umutykaya on Slack, setting `snowflake_account` to a `https://<account>.snowflakecomputing.com` URL as suggested by the docs results in the following error:\n\n```\ntarget-snowflake | ERROR HTTPSConnectionPool(host='https', port=443): Max retries exceeded with url: //<account>.snowflakecomputing.com.snowflakecomputing.com:443/session/v1/login-request?... (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f33e3959da0>: Failed to establish a new connection: [Errno -2] Name or service not known',))\n```\n\nThe repeated `.snowflakecomputing.com` in there suggests that the value for this setting should not in fact include the `.snowflakecomputing.com` domain extension, unlike suggested by the config example under https://github.com/datamill-co/target-snowflake#usage.", "state": "closed", "created_at": "2020-11-06T21:41:31.729000Z", "updated_at": "2020-11-06T22:27:51.987000Z", "closed_at": "2020-11-06T22:27:51.835000Z", "labels": ["Documentation", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2434", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944617, "iid": 2433, "project_id": 7603319, "title": "Add `datamill-co` variant of `target-postgres`", "description": "It would be nice to add out-of-the-box support for https://github.com/datamill-co/target-postgres, for users who already started using it before finding Meltano, or who may prefer it over our own variant.\n\nWe can consider making it the default like we did with https://github.com/datamill-co/target-snowflake.", "state": "closed", "created_at": "2020-11-05T23:30:36.759000Z", "updated_at": "2020-11-07T00:20:26.799000Z", "closed_at": "2020-11-07T00:20:26.686000Z", "labels": ["Accepting Merge Requests", "Load", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2433", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944616, "iid": 2432, "project_id": 7603319, "title": "Add `singer-io` variant of `tap-marketo`", "description": "It would be nice to add out-of-the-box support for https://github.com/singer-io/tap-marketo, for users who already started using it before finding Meltano.", "state": "opened", "created_at": "2020-11-05T23:30:30.670000Z", "updated_at": "2020-11-05T23:30:30.904000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2432", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944615, "iid": 2431, "project_id": 7603319, "title": "Add `singer-io` variant of `tap-stripe`", "description": "It would be nice to add out-of-the-box support for https://github.com/singer-io/tap-stripe, for users who already started using it before finding Meltano.", "state": "opened", "created_at": "2020-11-05T23:30:29.468000Z", "updated_at": "2020-11-05T23:30:29.673000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2431", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944614, "iid": 2430, "project_id": 7603319, "title": "Add `singer-io` variant of `tap-salesforce`", "description": "It would be nice to add out-of-the-box support for https://github.com/singer-io/tap-salesforce, for users who already started using it before finding Meltano.", "state": "opened", "created_at": "2020-11-05T23:30:27.488000Z", "updated_at": "2020-12-09T18:16:51.669000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "flow::To Do"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2430", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944613, "iid": 2429, "project_id": 7603319, "title": "Add `singer-io` variant of `tap-google-analytics`", "description": "It would be nice to add out-of-the-box support for https://github.com/singer-io/tap-google-analytics, for users who already started using it before finding Meltano.", "state": "opened", "created_at": "2020-11-05T23:30:26.458000Z", "updated_at": "2020-11-05T23:30:26.679000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2429", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944612, "iid": 2428, "project_id": 7603319, "title": "Add `singer-io` variant of `tap-adwords`", "description": "It would be nice to add out-of-the-box support for https://github.com/singer-io/tap-adwords, for users who already started using it before finding Meltano.", "state": "opened", "created_at": "2020-11-05T23:30:24.777000Z", "updated_at": "2020-11-05T23:30:24.994000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2428", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944308, "iid": 2427, "project_id": 7603319, "title": "Add `transferwise` variant of `target-s3-csv`", "description": "- https://github.com/transferwise/pipelinewise-target-s3-csv\n- https://transferwise.github.io/pipelinewise/connectors/targets/s3-csv.html", "state": "opened", "created_at": "2020-11-05T23:14:27.804000Z", "updated_at": "2020-11-05T23:14:28.017000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Load"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2427", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944305, "iid": 2426, "project_id": 7603319, "title": "Add `transferwise` variant of `target-redshift`", "description": "- https://github.com/transferwise/pipelinewise-target-redshift\n- https://transferwise.github.io/pipelinewise/connectors/targets/redshift.html", "state": "opened", "created_at": "2020-11-05T23:14:24.465000Z", "updated_at": "2021-03-08T16:34:00.852000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Load", "flow::Doing"], "assignees": [8245693], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2426", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 8245693, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944303, "iid": 2425, "project_id": 7603319, "title": "Add `transferwise` variant of `target-postgres`", "description": "- https://github.com/transferwise/pipelinewise-target-postgres\n- https://transferwise.github.io/pipelinewise/connectors/targets/postgres.html", "state": "closed", "created_at": "2020-11-05T23:14:23.363000Z", "updated_at": "2020-11-07T00:20:26.881000Z", "closed_at": "2020-11-07T00:20:26.815000Z", "labels": ["Accepting Merge Requests", "Load", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2425", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944302, "iid": 2424, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-google-analytics`", "description": "- https://github.com/transferwise/pipelinewise-tap-google-analytics\n- https://transferwise.github.io/pipelinewise/connectors/taps/google-analytics.html", "state": "opened", "created_at": "2020-11-05T23:14:22.375000Z", "updated_at": "2020-11-05T23:14:22.596000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2424", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944301, "iid": 2423, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-zendesk`", "description": "- https://github.com/transferwise/pipelinewise-tap-zendesk\n- https://transferwise.github.io/pipelinewise/connectors/taps/zendesk.html", "state": "opened", "created_at": "2020-11-05T23:14:22.331000Z", "updated_at": "2020-11-05T23:14:22.568000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2423", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944299, "iid": 2422, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-mixpanel`", "description": "- https://github.com/transferwise/pipelinewise-tap-mixpanel\n- https://transferwise.github.io/pipelinewise/connectors/taps/mixpanel.html", "state": "opened", "created_at": "2020-11-05T23:14:20.828000Z", "updated_at": "2020-11-05T23:16:56.394000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2422", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944298, "iid": 2421, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-mixpanel`", "description": "- https://github.com/transferwise/pipelinewise-tap-mixpanel\n- https://transferwise.github.io/pipelinewise/connectors/taps/mixpanel.html", "state": "closed", "created_at": "2020-11-05T23:14:19.976000Z", "updated_at": "2020-11-05T23:16:56.554000Z", "closed_at": "2020-11-05T23:16:56.410000Z", "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2421", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944297, "iid": 2420, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-zuora`", "description": "- https://github.com/transferwise/pipelinewise-tap-zuora\n- https://transferwise.github.io/pipelinewise/connectors/taps/zuora.html", "state": "opened", "created_at": "2020-11-05T23:14:19.378000Z", "updated_at": "2020-11-05T23:14:19.579000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2420", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944296, "iid": 2419, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-slack`", "description": "- https://github.com/transferwise/pipelinewise-tap-slack\n- https://transferwise.github.io/pipelinewise/connectors/taps/slack.html", "state": "opened", "created_at": "2020-11-05T23:14:18.846000Z", "updated_at": "2020-11-05T23:14:19.092000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2419", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944295, "iid": 2418, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-salesforce`", "description": "- https://github.com/transferwise/pipelinewise-tap-salesforce\n- https://transferwise.github.io/pipelinewise/connectors/taps/salesforce.html", "state": "opened", "created_at": "2020-11-05T23:14:17.998000Z", "updated_at": "2020-11-05T23:14:18.244000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2418", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944294, "iid": 2417, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-s3-csv`", "description": "- https://github.com/transferwise/pipelinewise-tap-s3-csv\n- https://transferwise.github.io/pipelinewise/connectors/taps/s3-csv.html", "state": "opened", "created_at": "2020-11-05T23:14:17.391000Z", "updated_at": "2020-11-05T23:14:17.608000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2417", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944293, "iid": 2416, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-mongodb`", "description": "- https://github.com/transferwise/pipelinewise-tap-mongodb\n- https://transferwise.github.io/pipelinewise/connectors/taps/mongodb.html", "state": "opened", "created_at": "2020-11-05T23:14:16.484000Z", "updated_at": "2020-11-16T15:47:55.120000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2416", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944292, "iid": 2415, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-kafka`", "description": "- https://github.com/transferwise/pipelinewise-tap-kafka\n- https://transferwise.github.io/pipelinewise/connectors/taps/kafka.html", "state": "opened", "created_at": "2020-11-05T23:14:15.017000Z", "updated_at": "2020-11-05T23:14:15.233000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2415", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944291, "iid": 2414, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-oracle`", "description": "- https://github.com/transferwise/pipelinewise-tap-oracle\n- https://transferwise.github.io/pipelinewise/connectors/taps/oracle.html", "state": "opened", "created_at": "2020-11-05T23:14:14.281000Z", "updated_at": "2020-11-05T23:17:12.467000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2414", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944290, "iid": 2413, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-snowflake`", "description": "- https://github.com/transferwise/pipelinewise-tap-snowflake\n- https://transferwise.github.io/pipelinewise/connectors/taps/snowflake.html", "state": "opened", "created_at": "2020-11-05T23:14:12.808000Z", "updated_at": "2020-11-16T15:47:57.065000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2413", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944288, "iid": 2412, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-oracle`", "description": "- https://github.com/transferwise/pipelinewise-tap-oracle\n- https://transferwise.github.io/pipelinewise/connectors/taps/oracle.html", "state": "closed", "created_at": "2020-11-05T23:14:09.596000Z", "updated_at": "2020-11-05T23:17:12.613000Z", "closed_at": "2020-11-05T23:17:12.483000Z", "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2412", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944287, "iid": 2411, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-mysql`", "description": "- https://github.com/transferwise/pipelinewise-tap-mysql\n- https://transferwise.github.io/pipelinewise/connectors/taps/mysql.html", "state": "closed", "created_at": "2020-11-05T23:14:08.114000Z", "updated_at": "2020-11-17T23:55:11.915000Z", "closed_at": "2020-11-10T01:00:58.738000Z", "labels": ["Accepting Merge Requests", "Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2411", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73944285, "iid": 2410, "project_id": 7603319, "title": "Add `transferwise` variant of `tap-postgres`", "description": "- https://github.com/transferwise/pipelinewise-tap-postgres\n- https://transferwise.github.io/pipelinewise/connectors/taps/postgres.html", "state": "closed", "created_at": "2020-11-05T23:14:02.752000Z", "updated_at": "2020-11-10T00:16:31.666000Z", "closed_at": "2020-11-10T00:16:31.610000Z", "labels": ["Accepting Merge Requests", "Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2410", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73941118, "iid": 2409, "project_id": 7603319, "title": "How to add a non-python extractor?", "description": "What's the best way to add a custom non-python extractor like singer-io/tap-mssql to Meltano? Is it possible at all?", "state": "closed", "created_at": "2020-11-05T21:13:22.038000Z", "updated_at": "2020-11-05T21:18:14.887000Z", "closed_at": "2020-11-05T21:18:14.726000Z", "labels": [], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2409", "weight": null, "has_tasks": false, "author_id": 7507629, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73933592, "iid": 2408, "project_id": 7603319, "title": "Document how to set replication methods and keys for tables on DB taps using `metadata` extra", "description": "Going beyond https://meltano.com/docs/integration.html#setting-metadata, we should document how to use the `metadata` extractor extra specifically to set `replication-method` and `replication-key` for DB taps like `tap-mongodb` and the PipelineWise DB taps we'll add as part of https://gitlab.com/meltano/meltano/-/issues/2357: https://gitlab.com/meltano/meltano/-/issues/2410 https://gitlab.com/meltano/meltano/-/issues/2411", "state": "closed", "created_at": "2020-11-05T18:35:14.852000Z", "updated_at": "2020-11-10T23:22:09.816000Z", "closed_at": "2020-11-09T23:39:07.159000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2408", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73859429, "iid": 2407, "project_id": 7603319, "title": "Refactor discovery.yaml to keep all things in lexicographically ascending order and in correct format", "description": "### Problem to solve\nCurrently the things in `discovery.yaml` is not ordered properly. Also some of the entries are not properly formatted according to `yamllint`.\n\n\n### Further details\nAs an example: `extractors` is listed first instead of `dashboards` and all the `tap-*` within `extractors` are not ordered either. The `yamllint` give errors/warnings for `extra spaces` and `wrong indent`. Keeping things in lexicographically ordered and propely formatted will help in long run.", "state": "closed", "created_at": "2020-11-04T13:27:31.105000Z", "updated_at": "2020-11-05T21:59:27.617000Z", "closed_at": "2020-11-05T21:59:27.513000Z", "labels": ["flow::Review"], "assignees": [4066270], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2407", "weight": null, "has_tasks": false, "author_id": 4066270, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73764984, "iid": 2405, "project_id": 7603319, "title": "Stop automatically building image for DigitalOcean Marketplace", "description": "We don't advertise our DO Marketplace image anymore.", "state": "closed", "created_at": "2020-11-03T00:04:39.913000Z", "updated_at": "2020-11-03T00:32:05.503000Z", "closed_at": "2020-11-03T00:32:05.452000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2405", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73757146, "iid": 2404, "project_id": 7603319, "title": "Add `singer-io` variant of `tap-recharge`", "description": "### Problem to solve\nAdd `tap-recharge` to list of discoverable taps/extractors\n\n\n### Links / references\nhttps://github.com/singer-io/tap-recharge", "state": "closed", "created_at": "2020-11-02T19:47:12.017000Z", "updated_at": "2020-11-03T16:51:48.173000Z", "closed_at": "2020-11-03T16:51:48.067000Z", "labels": ["Extract", "flow::Review"], "assignees": [4066270], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2404", "weight": null, "has_tasks": false, "author_id": 4066270, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73653170, "iid": 2403, "project_id": 7603319, "title": "Build open source implementation of tap_tester", "description": "Many open source taps under https://github.com/singer-io use the `tap_tester` library in their tests, like tap-twilio here: https://github.com/singer-io/tap-twilio/blob/master/tests/test_sync.py#L9\n\nThis library was built by Stitch to be used with Singer taps, but unfortunately it is not publicly available or documented. This makes it impossible to run these tests locally or in CI, or to write new tests for existing taps without help from Stitch. This makes tap_tester essentially useless to users who intend to use Singer taps and targets without Stitch, using a tool like Meltano or PipelineWise.\n\n[According to a Stitch/Talend employee](https://singer-io.slack.com/archives/C016CTU1ESZ/p1599147120005300?thread_ts=1599076357.005100&cid=C016CTU1ESZ) in the Singer Slack workspace, this is unlikely to change soon:\n\n> `tap_tester` is an internal tool in stitch (a private repo) we use to test, but unfortunately it integrates with stitch a lot so it wouldn\u2019t help to open source it as is. we have work prioritized to try and open source parts of it to let people test outside of stitch, but **that\u2019s a long way off**\n\nIn the mean time, we may want to explore building an open source clean-room reimplementation of `tap_tester`, based only on the way it is used in publicly available tap repositories.\n\nAlternatively (or additionally), we can write a new suite of test helpers as part of a new framework for building Singer taps: https://gitlab.com/meltano/meltano/-/issues/2401", "state": "opened", "created_at": "2020-10-30T23:32:08.212000Z", "updated_at": "2021-02-26T16:10:50.388000Z", "closed_at": null, "labels": ["Discussion"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2403", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73652966, "iid": 2402, "project_id": 7603319, "title": "New framework for building Singer targets", "description": "Similar to https://gitlab.com/meltano/meltano/-/issues/2401, I think we can do better than https://github.com/singer-io/singer-target-template when it comes to making it easy to build and maintain high-quality targets for new data destinations.", "state": "opened", "created_at": "2020-10-30T23:17:07.411000Z", "updated_at": "2020-11-16T16:13:34.121000Z", "closed_at": null, "labels": ["Discussion"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2402", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73652959, "iid": 2401, "project_id": 7603319, "title": "New framework for building Singer taps", "description": "I think we can make it easier for people to build and maintain high-quality taps that they and others can confidently run in production, by building a new \"convention over configuration\" framework on top of https://github.com/singer-io/singer-python that will reduce as much friction as possible to correctly and consistently implement recommended but optional features like discovery mode, stream/field selection, incremental replication, and metrics, as well as best practices like handling rate limiting, logging, and error handling.\n\nTaps today contain a lot of boilerplate code around https://github.com/singer-io/singer-python, which starts out all right the moment a new tap is created from the [`singer-tap-template`](https://github.com/singer-io/singer-tap-template/blob/master/%7B%7Bcookiecutter.project_name%7D%7D/%7B%7Bcookiecutter.package_name%7D%7D/__init__.py), but spirals out of control as taps start to implement (some of) the optional features listed above, without a clear example of how to do so most effectively and correctly. As a result, the implementations of different fully-featured high-quality taps look very different, even though they implement much of the same behavior using the same underlying library.\n\nAs a result, it can be daunting for people new to Singer to implement new high-quality taps or contribute to existing ones, because with every new optional-but-recommended feature they want to implement, they are left to figure out by themselves how to do so within their existing code base, without a clear example to follow as none of the existing taps have gone about it the same way, and none of their solutions fit directly in what we already have. \n\nA common framework that moves more of the boilerplate behind the scenes will resolve this, and will prevent bugs that don't derive from tap-specific implementation details but rather from how taps implement the Singer spec or use the singer-python library.\n\nAlong with this framework, we can provide an alternative to https://github.com/singer-io/singer-tap-template (https://gitlab.com/meltano/meltano/-/issues/2452) that should require less code to reach the same point, and will present a clear path towards adding support for additional Singer features with minimal effort beyond the source-specific business logic. This new template would not have the AGPL license (unlike the existing one), and would give tap authors the option of using a more permissive license like MIT or Apache.\n\nIf the framework lets taps describe their supported settings and capabilities (`discover`, `state`, etc) in a consistent way, it can also make it easier to generate tap-specific metadata for https://github.com/aaronsteers/singer-db and Meltano's [`discovery.yml`](https://meltano.com/docs/contributor-guide.html#discoverable-plugins), or for runners to discover this metadata by invoking the tap in a certain way.\n\nAlong with the framework, we can provide testing helpers to be used with `unittest` or `pytest`, but in many cases having tap-specific tests may not be necessary when more of the tricky logic is moved into the framework.\n\nI don't have specific ideas yet with regard to what this framework, or taps written using it, will look like, so I'm especially interested in hearing from people who have written fully-featured Singer taps before using https://github.com/singer-io/singer-tools and possibly based on https://github.com/singer-io/singer-tap-template, who have a good grasp of the best practices (from https://github.com/singer-io/getting-started/blob/master/docs/BEST_PRACTICES.md and in general), are familiar with the range of functionality that taps for various kinds of data sources (APIs, databases, files) require, and have their own ideas on what a unified approach to building better taps would look like.\n\nThe goal is to work together on building the framework and supporting tooling and documentation that you will want to use for your next tap, and that you'll want to migrate your existing taps over to.", "state": "opened", "created_at": "2020-10-30T23:16:15.074000Z", "updated_at": "2021-02-26T16:26:15.462000Z", "closed_at": null, "labels": ["Discussion", "flow::Doing"], "assignees": [4809760], "user_notes_count": 16, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2401", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 4809760, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73601928, "iid": 2400, "project_id": 7603319, "title": "Sample code CI jobs are failing on `ImportError: cannot import name 'resolve_types'` when invoking Airflow", "description": "Examples:\n- https://gitlab.com/meltano/meltano/-/jobs/820336670\n- https://gitlab.com/meltano/meltano/-/jobs/820336678\n\nStarted happening on https://gitlab.com/meltano/meltano/-/commit/58c7c7614f49bf64e4ad7ad188a10a791166c580, which doesn't touch any code (just docs), so it's likely an issue with some dependency that was updated somewhere.\n\nResult of `meltano invoke airflow version` after `meltano add orchestrator airflow`:\n\n```\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/bin/airflow\", line 26, in <module>\n    from airflow.bin.cli import CLIFactory\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/bin/cli.py\", line 94, in <module>\n    api_module = import_module(conf.get('cli', 'api_client'))  # type: Any\n  File \"/usr/local/lib/python3.6/importlib/__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/api/client/local_client.py\", line 24, in <module>\n    from airflow.api.common.experimental import delete_dag\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/api/common/experimental/delete_dag.py\", line 26, in <module>\n    from airflow.models.serialized_dag import SerializedDagModel\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/models/serialized_dag.py\", line 35, in <module>\n    from airflow.serialization.serialized_objects import SerializedDAG\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/airflow/serialization/serialized_objects.py\", line 28, in <module>\n    import cattr\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/cattr/__init__.py\", line 1, in <module>\n    from .converters import Converter, GenConverter, UnstructureStrategy\n  File \"/builds/meltano/meltano/meltano-projects/my-meltano-project/.meltano/orchestrators/airflow/venv/lib/python3.6/site-packages/cattr/converters.py\", line 16, in <module>\n    from attr import fields, resolve_types\nImportError: cannot import name 'resolve_types'\n```", "state": "closed", "created_at": "2020-10-29T23:48:40.243000Z", "updated_at": "2020-10-30T15:38:22.256000Z", "closed_at": "2020-10-30T15:38:22.219000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 9, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2400", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1646014, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73601402, "iid": 2399, "project_id": 7603319, "title": "Add `transferwise` variant of `target-bigquery`", "description": "https://github.com/transferwise/pipelinewise-target-bigquery/", "state": "opened", "created_at": "2020-10-29T23:22:07.084000Z", "updated_at": "2020-10-30T17:33:17.923000Z", "closed_at": null, "labels": ["Load", "flow::Blocked"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2399", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73600574, "iid": 2398, "project_id": 7603319, "title": "Rename Extractors and Loaders pages to Sources and Destinations", "description": "To match what users may be more used to looking for.", "state": "closed", "created_at": "2020-10-29T22:37:39.432000Z", "updated_at": "2020-10-30T16:23:34.377000Z", "closed_at": "2020-10-30T16:23:34.322000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2398", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1646014, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73600505, "iid": 2397, "project_id": 7603319, "title": "Add \"Minimal configuration\" section to Bing Ads doc", "description": "Let's give an example of what the config should look like in `meltano.yml`.", "state": "closed", "created_at": "2020-10-29T22:35:06.240000Z", "updated_at": "2020-10-30T00:57:19.965000Z", "closed_at": "2020-10-30T00:57:19.913000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2397", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1646014, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73546450, "iid": 2396, "project_id": 7603319, "title": "An unquoted `YYYY-MM-DD` date value under `config` in `meltano.yml` causes `meltano config <plugin>` to crash", "description": "Having the following in `meltano.yml` breaks plugin config generation:\n\n```yaml\nconfig:\n  start_date: 2019-09-01\n```\n\nAs [reported by Jonas B on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1603119505229300):\n\n>>>\nWith `meltano config tap-woocommerce` I get along other things the output: `start_date [env: TAP_WOOCOMMERCE_START_DATE] current value: '2019-09-01' (from meltano.yml)`\n\nIf I put the date plain in the yaml, it starts to execute, but crashes with `TypeError: Object of type date is not JSON serializable`\n>>>\n\nAs I wrote there, `'2019-09-01'` should be a string, because without quotes YAML will interpret it as a `date` object which (as the error shows) cannot be serialized into JSON. We should be able to work around that though, by having Meltano automatically serialize `date` objects using the ISO8601 format.", "state": "closed", "created_at": "2020-10-28T23:44:14.757000Z", "updated_at": "2020-11-10T23:33:14.966000Z", "closed_at": "2020-11-10T23:33:14.892000Z", "labels": ["Accepting Merge Requests", "Configuration", "bug", "flow::Review"], "assignees": [4066270], "user_notes_count": 5, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2396", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73546348, "iid": 2395, "project_id": 7603319, "title": "Indicate which settings are required/optional in `meltano config <plugin> list`", "description": "We already show asterisks (`*`) next to required fields in the UI, based on the plugin's `settings_group_validation` property, like [`tap-gitlab`'s](https://gitlab.com/meltano/meltano/-/blob/61467796faf10ab855abf6227d88152ce98644f3/src/meltano/core/bundle/discovery.yml#L212):\n\n```yaml\n    settings_group_validation:\n      - ['api_url', 'groups', 'start_date']\n      - ['api_url', 'projects', 'start_date']\n```\n\nThe array can contain one or more lists of setting names, each of which is a combination of settings that constitute a valid/complete configuration. In the case of `tap-gitlab`, this means that `api_url` and `start_date` are always required, and that `groups`, or `projects`, or both, but not neither, should also be set. \n\nIn the UI, we only show an asterisk next to settings that are always required (so not `groups` or `projects`), but don't enable the \"Save\" button until at least one group matches completely. This means that it's not clear to the user what's wrong when all of the apparently required fields are filled in, while the \"Save\" button is still disabled, but this hasn't caused an issue yet because it's usually clear to users that they have to pick a specific group or project.\n\nIn the output of `meltano config <plugin> list`, we can easily display asterisks where appropriate when there's only a single group of valid setting names, but I'm not sure yet what to do about `groups` and `projects` in the example above.", "state": "opened", "created_at": "2020-10-28T23:38:07.444000Z", "updated_at": "2020-12-03T17:45:51.536000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2395", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73546188, "iid": 2394, "project_id": 7603319, "title": "When a setting is set in `meltano.yml` by one of its `aliases` instead of its name, the alias is also passed to the plugin as a custom setting", "description": "Setting `aliases`, like [`username` for `target-postgres`'s `user` setting](https://gitlab.com/meltano/meltano/-/blob/61467796faf10ab855abf6227d88152ce98644f3/src/meltano/core/bundle/discovery.yml#L886), are supported in the `meltano config <plugin> set <name> <value>` CLI and in the `meltano.yml` `config` object. \n\nThey prevent bugs caused by inconsistent naming between different plugins and different variants of the same plugins, when a user may not know by heart which plugins use `user` and which use `username`.\n\nThis mostly works, but the alias set in `meltano.yml` is currently _also_ considered a \"custom setting\", and is incorrectly passed to the plugin by that name and listed as such in `meltano config <plugin>`.", "state": "opened", "created_at": "2020-10-28T23:27:15.725000Z", "updated_at": "2020-10-28T23:27:15.725000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2394", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 73405845, "iid": 2393, "project_id": 7603319, "title": "Dagster as orchestrator", "description": "### Problem to solve\nAdd support for more orchestrators to improve the options for adoption of Meltano in a production context.\n\n### Target audience\nOrganizations and data teams that have already invested in an orchestrator other than Airflow.\n\n### Further details\nI am considering setting up Meltano for use at my day job, and I currently use Dagster as my workflow\norchestrator so I was curious where in the code I should look to see about adding support for that integration. Also, if you have any pointers about sharp edges that I should avoid, or any upcoming change in the structure or roadmap of the project that would be helpful.\n\n### Proposal\nI would like to be able to use Dagster as the orchestrator for executing my Meltano pipelines.\n\n### What does success look like, and how can we measure that?\nSuccess looks like having a well defined integration with Dagster such that I can easily get up and running with Meltano as a component in a pipeline when I am already using the Dagster/Dagit service in my environment. The likely path is to add a plugin along the lines of what has been built for Great Expectations or DBT so that I can define a \"[Solid](https://docs.dagster.io/overview/solids-pipelines/solids)\" that will execute a Meltano pipeline definition and provide detailed output that integrates with the existing logging infrastructure. If it is possible to use the Dagster table space as the metadata storage for Meltano for a tighter and simpler deployment, that would be a stretch goal to work toward.", "state": "opened", "created_at": "2020-10-26T21:34:52.765000Z", "updated_at": "2021-03-01T17:57:42.701000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Integrations", "Orchestrate", "feature requests"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2393", "weight": null, "has_tasks": false, "author_id": 199793, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72792929, "iid": 2392, "project_id": 7603319, "title": "Make OUTPUT_BUFFER_SIZE configurable", "description": "We have a custom tap that extracts records that exceed the current static OUTPUT_BUFFER_SIZE of 1mb. It would be really useful to be able to configure the OUTPUT_BUFFER_SIZE either via an environment variable, so it can be set for an invocation of `meltano elt`, or as a configurable value per extractor.", "state": "closed", "created_at": "2020-10-15T17:21:43.373000Z", "updated_at": "2021-01-12T23:13:45.154000Z", "closed_at": "2021-01-12T23:13:45.086000Z", "labels": ["Accepting Merge Requests", "feature requests", "flow::Review"], "assignees": [87854], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2392", "weight": null, "has_tasks": false, "author_id": 7384596, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1771944, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72663053, "iid": 2391, "project_id": 7603319, "title": "Add `max_workers` setting to `tap-salesforce` discoverable plugin definition", "description": "As raised on Slack: https://meltano.slack.com/archives/CFG3C3C66/p1602504863162500\n\nThe following is to be added in [`discovery.yml`](https://gitlab.com/meltano/meltano/-/blob/e3bbfba3ecf0b7515500b6f04f51eb121d23cf32/src/meltano/core/bundle/discovery.yml#L578):\n\n```yaml\nsettings:\n- name: max_workers\n  kind: integer\n  value: 8\n```", "state": "closed", "created_at": "2020-10-13T16:43:33.688000Z", "updated_at": "2020-10-13T17:54:23.678000Z", "closed_at": "2020-10-13T17:54:23.562000Z", "labels": ["Accepting Merge Requests", "Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2391", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1635661, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72451397, "iid": 2390, "project_id": 7603319, "title": "Allow plugins to inherit configuration from others", "description": "### Use case\n\nWe have a ton of tables in a production database. As there are so many, to achieve hourly replication we split these tables into groups to run in parallel as separate 'pipelines'. Most of the configuration is the same for each extractor though, the only difference is in the `select` stream identifier. To reduce the amount of duplication in the `meltano.yml` file, allow plugins to inherit configuration from others, and then override with any explicitly set configuration values.\n\ne.g.\n\n```\nplugins:\n  extractors:\n  - name: pipelinewise-tap-mysql-base\n    namespace: pipelinewise_tap_mysql\n    pip_url: git+https://github.com/tailsdotcom/pipelinewise-tap-mysql.git\n    executable: tap-mysql\n    load_schema: xxxxxxxx\n    capabilities:\n    - discover\n    - properties\n    - state\n    settings:\n    - name: user\n      env: PIPELINEWISE_TAP_MYSQL_USER\n    - name: password\n      env: PIPELINEWISE_TAP_MYSQL_PASSWORD\n    config:\n      host: xxxxxxxx\n      port: xxxxxxxx\n      dbname: xxxxxxxx\n      filter_dbs: xxxxxxxx\n  - name: pipelinewise-tap-mysql-1\n    inherit_from: pipelinewise-tap-mysql-base\n    select:\n    - a.*\n    - b.*\n    - c.*\n    ...\n    metadata:\n      '*':\n        replication-method: FULL_TABLE\n\n```", "state": "closed", "created_at": "2020-10-09T12:47:13.003000Z", "updated_at": "2020-12-23T16:58:03.055000Z", "closed_at": "2020-12-23T16:58:02.937000Z", "labels": ["Configuration", "feature requests", "flow::Doing"], "assignees": [87854], "user_notes_count": 7, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2390", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1738401, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72449888, "iid": 2389, "project_id": 7603319, "title": "Let user disable autoscrolling in UI job log modal", "description": "This is really annoying but I'm not proficient enough in JS or Vue implement a fix.\n\nWe just need some logic around https://gitlab.com/meltano/meltano/-/blob/master/src/webapp/src/components/pipelines/LogModal.vue#L112\n\nwith some state like `scrollWithLogUpdate` which is set to true when the user scrolls to the bottom of the logs, and set to false when they perform a scroll up action. When `scrollWithLogUpdate` is true, call `utils.scrollToBottom`, otherwise, don't.", "state": "closed", "created_at": "2020-10-09T12:29:49.299000Z", "updated_at": "2020-11-12T18:00:12.477000Z", "closed_at": "2020-11-12T18:00:12.362000Z", "labels": ["UI", "flow::Review"], "assignees": [2585766], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2389", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": 2585766, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72422277, "iid": 2388, "project_id": 7603319, "title": "Extractor catalog metadata key `tap-mongodb.projection` for stream is interpreted as key `projection` for property `tap-mongodb`", "description": "See the feature described in https://github.com/singer-io/tap-mongodb#edit-catalog-file.\n\nSide-effect of https://meltano.com/docs/command-line-interface.html#nested-properties.\n\nWe can consider changing nested property handling to interpret periods as nested property separators only in top-level `meltano.yml` keys, and assume that periods in lower level keys are there intentionally, so that there's a difference between:\n\n```yaml\nmetadata:\n  my_collection: # entity\n    tap-mongodb.projection: '...' # metadata-key: value\n```\n\nand \n\n```yaml\nmetadata:\n  my_collection.tap-mongodb.projection: '...'\n```\n\nwith the latter being identical to:\n\n```yaml\nmetadata:\n  my_collection: # entity\n    tap-mongodb: # property\n      projection: '...' # metadata-key: value\n```\n\nOf course, the env vars for all of these would still be identical (`TAP_MONGODB__METADATA_MY_COLLECTION_TAP_MONGODB_PROJECTION`), meaning that you couldn't have a `tap-mongodb` property with `projection` metadata key at the same time.", "state": "opened", "created_at": "2020-10-08T23:40:12.946000Z", "updated_at": "2020-11-12T17:30:53.415000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2388", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72421539, "iid": 2387, "project_id": 7603319, "title": "Order of attributes in `meltano select --list --all` is not alphabetical, making the list hard to parse", "description": "", "state": "closed", "created_at": "2020-10-08T23:03:21.559000Z", "updated_at": "2020-11-23T20:45:49.906000Z", "closed_at": "2020-11-23T20:45:49.755000Z", "labels": ["CLI", "Extract", "bug", "flow::Doing"], "assignees": [4066270], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2387", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1679492, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72421503, "iid": 2386, "project_id": 7603319, "title": "Connect extractor and loader docs with Getting Started guide through section focused on Usage rather than just Installation", "description": "", "state": "closed", "created_at": "2020-10-08T23:01:51.823000Z", "updated_at": "2020-10-29T22:35:28.117000Z", "closed_at": "2020-10-29T18:10:14.458000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2386", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1646014, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72421432, "iid": 2385, "project_id": 7603319, "title": "Add declarative way to define tables and their replication methods and keys on DB taps, that doesn't require user to understand Singer metadata", "description": "This could be inspired by or a subset of PipelineWise's YAML configuration format (see https://transferwise.github.io/pipelinewise/connectors/taps/postgres.html), which we could support in `meltano.yml` by translating the schema and table mappings into catalog [metadata rules](https://meltano.com/docs/plugins.html#metadata-extra) and tap and target settings:\n\n```yaml\nschemas:\n\n  - source_schema: \"public\"            # Source schema in postgres with tables\n    target_schema: \"repl_pg_public\"    # Target schema in the destination Data Warehouse\n    target_schema_select_permissions:  # Optional: Grant SELECT on schema and tables that created\n      - grp_stats\n\n    # List of tables to replicate from Postgres to destination Data Warehouse\n    #\n    # Please check the Replication Strategies section in the documentation to understand the differences.\n    # For LOG_BASED replication method you might need to adjust the source mysql/ mariadb configuration.\n    tables:\n      - table_name: \"table_one\"\n        replication_method: \"INCREMENTAL\"   # One of INCREMENTAL, LOG_BASED and FULL_TABLE\n        replication_key: \"last_update\"      # Important: Incremental load always needs replication key\n\n        # OPTIONAL: Load time transformations\n        #transformations:\n        #  - column: \"last_name\"            # Column to transform\n        #    type: \"SET-NULL\"               # Transformation type\n\n      # You can add as many tables as you need...\n      - table_name: \"table_two\"\n        replication_method: \"LOG_BASED\"     # Important! Log based must be enabled in MySQL\n\n  # You can add as many schemas as you need...\n  # Uncomment this if you want replicate tables from multiple schemas\n  #- source_schema: \"another_schema_in_postgres\"\n  #  target_schema: \"another\n```\n\nTo support the `source_schema` and `target_schema` settings, which correspond to PipelineWise targets' `schema_mapping` settings (see https://gitlab.com/meltano/meltano/-/issues/2442), we'd need to find a way to extract these as (for example) `TAP_FOO__SCHEMA_MAPPING` (similar in spirit to the existing `TAP_FOO__LOAD_SCHEMA`: https://meltano.com/docs/plugins.html#load-schema-extra).", "state": "opened", "created_at": "2020-10-08T22:57:17.579000Z", "updated_at": "2020-11-10T23:21:31.057000Z", "closed_at": null, "labels": ["Extract", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2385", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72421303, "iid": 2384, "project_id": 7603319, "title": "Improve documentation around adding custom plugin definitions, which currently takes a user down a rabbit hole of having to learn Singer concepts", "description": "We can make it easier to determine `capabilities` and how to fill in `settings`, and we explain how README docs around `config.json` and `catalog.json` map over to Meltano concepts.", "state": "opened", "created_at": "2020-10-08T22:50:20.938000Z", "updated_at": "2021-03-08T16:43:32.088000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2384", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72420986, "iid": 2383, "project_id": 7603319, "title": "Move more concept documentation inline in Getting Started guide instead of only linking to other docs pages, which can feel overwhelming", "description": "", "state": "closed", "created_at": "2020-10-08T22:42:10.759000Z", "updated_at": "2021-01-19T21:10:12.237000Z", "closed_at": "2021-01-19T21:10:09.976000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2383", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72420776, "iid": 2382, "project_id": 7603319, "title": "Explain impact of `meltano {add,config}` commands on `meltano.yml` in Getting Started guide, so that user understands what's happening behind the scenes", "description": "", "state": "closed", "created_at": "2020-10-08T22:40:57.480000Z", "updated_at": "2021-01-19T21:40:57.941000Z", "closed_at": "2021-01-19T21:40:57.837000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2382", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1785397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72420621, "iid": 2381, "project_id": 7603319, "title": "Nested properties in discovered catalog are interpreted as `inclusion: automatic` even if their parent property is `inclusion: available`", "description": "See https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/singer/catalog.py#L284.\n\nAs a result, these nested properties will always show up as `automatic` in `meltano select --list --all`, cannot be deselected using `meltano select --except`, and end up having metadata `inclusion: automatic, selected: true` in the generated catalog file that's passed to the tap.\n\nIn reality, if a parent property is discovered as `inclusion: available`, changing `selected` or `inclusion` on an individual subproperty usually won't make a difference since taps typically only check the `selected` metadata for top-level properties, not nested ones.\n\nTo resolve this, then, we can have Meltano assume `inclusion: automatic` on top-level properties that lack metadata, but not on nested properties, (assuming their parent property does have metadata). In `meltano select --list --all`, nested properties without discovered(!) `inclusion` metadata shouldn't be listed at all, since they can't actually be individually selected. If a nested property does have discovered `inclusion` metadata, we can list it. \n\nWe could automatically have a top-level `selected` rule cascade down to its properties, but let's not get into that for now.\n\n---\n\nAs a temporary workaround, the following `metadata` rule can be added to a plugin definition to flip these nested `inclusion: automatic` metadatas to `inclusion: available`:\n\n```yaml\nextractors:\n- name: tap-facebook\n  # ...\n  metadata:\n    '*':\n      '*.*':\n        inclusion: available\n```", "state": "opened", "created_at": "2020-10-08T22:38:43.746000Z", "updated_at": "2021-03-08T16:45:33.640000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "bug", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2381", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72412119, "iid": 2380, "project_id": 7603319, "title": "Add `target_` prefix to discoverable loader `namespace`s for consistency", "description": "To maintain support for setting env vars with these original namespaces (`POSTGRES_<SETTING>`, `SNOWFLAKE_<SETTING>`, etc), we should explicitly add these env vars to the loaders' settings' `env_aliases`.", "state": "closed", "created_at": "2020-10-08T18:46:39.915000Z", "updated_at": "2020-10-29T17:59:58.691000Z", "closed_at": "2020-10-29T17:59:58.637000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2380", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1646014, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72340907, "iid": 2379, "project_id": 7603319, "title": "Schedule `env` is not taken into account when running pipeline from UI using \"Run\" button", "description": "As mentioned in this Slack comment: https://meltano.slack.com/archives/C013EKWA2Q1/p1602090041066200?thread_ts=1602089529.064700&cid=C013EKWA2Q1\n\nWe can fix this by adding `**schedule_payload[\"env\"]` here: https://gitlab.com/meltano/meltano/-/blob/7d630d558c44b14b3fa2e7449293ce52d6eac49b/src/meltano/api/executor/__init__.py#L37", "state": "closed", "created_at": "2020-10-07T17:09:44.925000Z", "updated_at": "2020-12-09T16:31:15.749000Z", "closed_at": "2020-12-09T16:31:15.627000Z", "labels": ["Accepting Merge Requests", "UI", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2379", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72337979, "iid": 2378, "project_id": 7603319, "title": "Document that `psycopg2` needs to be added to `airflow`'s `pip_url` to use a Postgres metadata database", "description": "As raised in this Slack conversation: https://meltano.slack.com/archives/CFG3C3C66/p1602076906120400\n\nTo be added to https://meltano.com/docs/production.html#airflow-orchestrator.", "state": "closed", "created_at": "2020-10-07T16:06:33.141000Z", "updated_at": "2020-10-07T18:25:56.357000Z", "closed_at": "2020-10-07T18:25:56.302000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2378", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72320045, "iid": 2377, "project_id": 7603319, "title": "Arbitrary env vars defined in `.env` are not passed to invoked plugins", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\nWhen running ``meltano elt tap-facebook target-bigquery`` it throws this error:\n\n``google.auth.exceptions.DefaultCredentialsError: Could not automatically determine credentials. Please set GOOGLE_APPLICATION_CREDENTIALS or explicitly create credentials and re-run the application. For more information, please see https://cloud.google.com/docs/authentication/getting-started\nELT could not be completed: Tap and target failed``\n\n\n\n### What is the expected *correct* behavior?\nIt should connect to BigQuery and load the data from tap-facebook.\n\n\n\n### Steps to reproduce\n1. Install tap-facebook\n2. Install custom target-bigquery from https://github.com/adswerve/target-bigquery\n3. Generate client-secrets.json from BigQuery OAuth.\n4. Place it in the project folder.\n5. Add the env in the .env file in the Meltano project folder like this:\n``GOOGLE_APPLICATION_CREDENTIALS=./client_secrets.json``\n\n\n\n### Relevant logs and/or screenshots\nWhen running ``meltano --log-level=debug elt...`` ``GOOGLE_APPLICATION_CREDENTIALS`` is MISSING in the invoked env vars for ``target-bigquery`` \n.\n\n\n\n### Possible fixes\nQuick workaround:\nIn your ``meltano.yml`` under ``settings`` add a dummy setting with ``env: GOOGLE_APPLICATION_CREDENTIALS``:\n```\nsettings:\n- name: credentials_path\n  env: GOOGLE_APPLICATION_CREDENTIALS\n```\n\nThen check if the .env files has ``GOOGLE_APPLICATION_CREDENTIALS=./client_secrets.json``.\n\nIt works with this workaround.", "state": "closed", "created_at": "2020-10-07T13:19:26.200000Z", "updated_at": "2020-10-07T22:38:18.196000Z", "closed_at": "2020-10-07T22:38:18.146000Z", "labels": ["Accepting Merge Requests", "Configuration", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2377", "weight": null, "has_tasks": false, "author_id": 7309517, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72319788, "iid": 2376, "project_id": 7603319, "title": "`PluginMissingError` with installed plugin when running transforms", "description": "Hi, I am starting with a new python 3.6 venv and pip installing the latest version of meltano (`1.53.0`) inside that venv to create the environment. \n\nAfter that, I run `meltano init testing` and `cd` into that directory. Then I run `meltano add extractor tap-facebook`, `meltano add loader target-snowflake`, `meltano add transformer dbt`, and source the environment variables I need for config. \n\nThen I run `meltano elt tap-facebook target-snowflake --transform run --job_id=fb-to-snw` and it fails instantly with \n\n```\nTraceback (most recent call last):\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/bin/meltano\", line 11, in <module>\n    load_entry_point('meltano==1.53.0', 'console_scripts', 'meltano')()\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/__init__.py\", line 38, in main\n    cli(obj={\"project\": None})\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/click/core.py\", line 764, in __call__\n    return self.main(*args, **kwargs)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/click/core.py\", line 717, in main\n    rv = self.invoke(ctx)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/click/core.py\", line 1137, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/click/core.py\", line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/click/core.py\", line 555, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/params.py\", line 23, in decorate\n    return func(*args, **kwargs)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/params.py\", line 61, in decorate\n    func(project, *args, **kwargs)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/elt.py\", line 141, in elt\n    discovery_service,\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/elt.py\", line 220, in run_job\n    discovery_service=discovery_service,\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/elt.py\", line 228, in run_async\n    loop.run_until_complete(coro)\n  File \"/Users/paulblankley/miniconda3/lib/python3.6/asyncio/base_events.py\", line 484, in run_until_complete\n    return future.result()\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/cli/elt.py\", line 258, in run_elt\n    elt_context = context_builder.context()\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/core/elt_context.py\", line 245, in context\n    transform = self.plugin_context(self._transform, env=env.copy())\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/core/elt_context.py\", line 203, in plugin_context\n    plugin = self.config_service.get_plugin(plugin_ref)\n  File \"/Users/paulblankley/Desktop/meltano-test/venv/lib/python3.6/site-packages/meltano/core/config_service.py\", line 111, in get_plugin\n    raise PluginMissingError(plugin_ref.name) from stop\nmeltano.core.plugin.error.PluginMissingError: The requested plugin 'tap-facebook' is missing.\n```\n\nAs an aside, running the above command with `--transform skip` works correctly.", "state": "closed", "created_at": "2020-10-07T13:15:40.574000Z", "updated_at": "2020-10-07T18:38:42.235000Z", "closed_at": "2020-10-07T18:38:42.186000Z", "labels": ["bug", "flow::Review", "regression"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2376", "weight": null, "has_tasks": false, "author_id": 6426634, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72285926, "iid": 2375, "project_id": 7603319, "title": "Create new files-airflow-kubernetes repo for a dag generator which uses KubernetesPodOperator instead of BashOperator", "description": "I've modified the dag generator to create KubernetesPodOperator tasks. I'd like to contribute this upstream, what do you think the best way to do this is @DouweM ? New 'files' repo?", "state": "opened", "created_at": "2020-10-06T22:20:30.265000Z", "updated_at": "2021-03-08T16:34:05.576000Z", "closed_at": null, "labels": ["feature requests", "flow::Review"], "assignees": [2585766], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2375", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": 2585766, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72215686, "iid": 2374, "project_id": 7603319, "title": "Add `target-bigquery` loader", "description": "Variants:\n- https://github.com/RealSelf/target-bigquery\n- https://github.com/adswerve/target-bigquery (fork of RealSelf)\n- https://github.com/transferwise/pipelinewise-target-bigquery", "state": "closed", "created_at": "2020-10-05T20:50:50.925000Z", "updated_at": "2020-11-02T18:21:50.230000Z", "closed_at": "2020-11-02T18:21:50.099000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [4066270], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2374", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72207508, "iid": 2373, "project_id": 7603319, "title": "`meltano init` fails when underlying filesystem doesn't support symlinks", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n_Original title: 'meltano init' fails with symlink error in Docker rootless mode_\n\n### What is the current *bug* behavior?\n'meltano init' is failing with error `OSError: [Errno 95] Operation not supported: '/usr/local/bin/meltano' -> '/recharge/rechargtest/.meltano/run/bin'`\n\n\n### Steps to reproduce\nUse docker in rootless mode to reproduce the issue.\n\n\n\n### Relevant logs and/or screenshots\n```\ndocker run -v $(pwd):/recharge -w /recharge meltano/meltano init rechargtest\n\nCreated rechargtest\nCreating project files...\nCreated rechargtest/meltano.yml\nCreated rechargtest/README.md\nCreated rechargtest/requirements.txt\nCreated rechargtest/.gitignore\nCreated rechargtest/model/.gitkeep\nCreated rechargtest/extract/.gitkeep\nCreated rechargtest/load/.gitkeep\nCreated rechargtest/transform/.gitkeep\nCreated rechargtest/analyze/.gitkeep\nCreated rechargtest/notebook/.gitkeep\nCreated rechargtest/orchestrate/.gitkeep\nTraceback (most recent call last):\n  File \"/usr/local/bin/meltano\", line 8, in <module>\n    sys.exit(main())\n  File \"/usr/local/lib/python3.6/site-packages/meltano/cli/__init__.py\", line 38, in main\n    cli(obj={\"project\": None})\n  File \"/usr/local/lib/python3.6/site-packages/click/core.py\", line 764, in __call__\n    return self.main(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/click/core.py\", line 717, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/lib/python3.6/site-packages/click/core.py\", line 1137, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/usr/local/lib/python3.6/site-packages/click/core.py\", line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/lib/python3.6/site-packages/click/core.py\", line 555, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/click/decorators.py\", line 17, in new_func\n    return f(get_current_context(), *args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/meltano/cli/params.py\", line 23, in decorate\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/meltano/cli/initialize.py\", line 46, in init\n    project = init_service.init()\n  File \"/usr/local/lib/python3.6/site-packages/meltano/core/project_init_service.py\", line 42, in init\n    Project.activate(self.project)\n  File \"/usr/local/lib/python3.6/site-packages/fasteners/lock.py\", line 293, in wrapper\n    return f(self, *args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/meltano/core/project.py\", line 78, in activate\n    project.run_dir().joinpath(\"bin\").symlink_to(executable)\n  File \"/usr/local/lib/python3.6/pathlib.py\", line 1327, in symlink_to\n    self._accessor.symlink(target, self, target_is_directory)\n  File \"/usr/local/lib/python3.6/pathlib.py\", line 434, in symlink\n    return os.symlink(str(a), str(b))\nOSError: [Errno 95] Operation not supported: '/usr/local/bin/meltano' -> '/recharge/rechargtest/.meltano/run/bin'\n```", "state": "closed", "created_at": "2020-10-05T17:40:51.142000Z", "updated_at": "2020-10-08T20:31:56.076000Z", "closed_at": "2020-10-08T20:31:55.961000Z", "labels": ["Accepting Merge Requests", "Docker", "bug", "flow::Review"], "assignees": [4066270], "user_notes_count": 10, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2373", "weight": null, "has_tasks": false, "author_id": 4066270, "assignee_id": 4066270, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72050694, "iid": 2372, "project_id": 7603319, "title": "local venvs use an outdated version of pip", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\nOne of our [taps](https://github.com/fixdauto/tap-bigquery) has a transitive dependency on [`grpcio`](https://github.com/grpc/grpc/tree/master/src/python/grpcio).\n\n`meltano install` works fine on developer machines, but when building our docker image it would hang and eventually fail:\n\n```\n15 134.9 Installing extractor 'tap-crashlytics'...\n#15 650.2 Extractor 'tap-crashlytics' could not be installed: failed to install plugin 'tap-crashlytics'.\n#15 650.2   Failed building wheel for tap-bigquery\n#15 650.2   Failed building wheel for singer-python\n#15 650.2   Failed building wheel for proto-plus\n#15 650.2   Failed building wheel for ciso8601\n#15 650.2   Failed building wheel for simplejson\n#15 650.2   Failed building wheel for grpcio\n#15 650.2   Failed building wheel for pyyaml\n#15 650.2 Command \"/project/.meltano/extractors/tap-crashlytics/venv/bin/python3.7 -u -c \"import setuptools, tokenize;__file__='/tmp/pip-install-04q9q1qe/grpcio/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-record-88i4nve7/install-record.txt --single-version-externally-managed --compile --install-headers /project/.meltano/extractors/tap-crashlytics/venv/include/site/python3.7/grpcio\" failed with error code 1 in /tmp/pip-install-04q9q1qe/grpcio/\n#15 650.2 \n#15 650.2 \n\n...\n\n#15 809.8 Failed to install plugin(s)\n#15 ERROR: executor failed running [/bin/sh -c meltano install]: runc did not terminate sucessfully\n------\n > [stage-3 7/9] RUN meltano install:\n------\nfailed to solve with frontend dockerfile.v0: failed to build LLB: executor failed running [/bin/sh -c meltano install]: runc did not terminate sucessfully\n```\n\nIt took quite a while to figure out what was going on, but it seems that [`grpcio` only reliably installs with the latest version of pip](https://github.com/grpc/grpc/tree/master/src/python/grpcio#installing-from-pypi). So it would install fine on 20.1, but the `python:3.7` docker image ships with 18.1.\n\nI tried upgrading pip in the image before installing meltano, but even when meltano was using 20.1, the plugin venvs were still using 18.1. This [seems to be a quirk of the way `python -m venv` works](https://stackoverflow.com/questions/51720909/how-to-get-python-m-venv-to-directly-install-latest-pip-version). The suggested solution is to upgrade pip after installing venv, which is tricky, since meltano manages creating venvs at plugin install time.", "state": "closed", "created_at": "2020-10-02T02:09:29.170000Z", "updated_at": "2020-10-06T16:13:26.844000Z", "closed_at": "2020-10-06T16:13:26.062000Z", "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [689351], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2372", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 689351, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 72034214, "iid": 2371, "project_id": 7603319, "title": "comments in meltano.yml are lost when the CLI edits the file", "description": "Sometimes its convenient to temporary disable a plugin or schedule, for example if a bug is keeping it from working correctly or business needs have changed temporarily.\n\nSince it's code, the developer temptation here is to comment that part of `meltano.yml` out, so that you can easily re-enable the functionality when the problem is resolved.\n\nHowever, when a `meltano` command is run that edits the YAML file, the machine-generated changes cause comments in the file to be lost.\n\nI'm not sure how feasible it is to keep comments, formatting, etc. from the source file when rewriting it; I doubt pyyaml supports that. Another idea is to have a config option like `enabled: false` in the configuration of a plugin or schedule, and a cli command to flip it. That solves the main problem of allowing these things to be temporarily disabled, but any other comments (for example explaining why a custom plugin is configured the way it is) would still be lost.\n\nIt could be that we're relying too much on treating `meltano.yml` as a source file, perhaps we should be treating it as a generated file and avoid reading or editing it directly? If that's best practice, there still needs to be a place that we can document configuration details for other developers in my opinion.", "state": "closed", "created_at": "2020-10-01T18:06:23.905000Z", "updated_at": "2020-10-05T17:12:30.131000Z", "closed_at": "2020-10-05T17:12:29.929000Z", "labels": [], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2371", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71923954, "iid": 2370, "project_id": 7603319, "title": "Meltano elt not picking up tables from select extra", "description": "Info:\n- Using pipelinewise-tap-mysql\n- Previously I had just one extractor, with full_table replication with one table selected for testing purposes\n- I have now added two extractors for the same source and removed the testing one. One has full_table replication (on tables with no primary key for log_based replication), and one has log_based replication. The full_table extractor has 30 tables specified in the select extra, and log_based has over 300 tables. (I'm migrating from pipelinewise to meltano)\n- Now the two extractors have been added, meltano is only syncing the table from when I had just one table selected in the full_table extractor, and in the log_based extractor is not syncing any tables at all:\n```\nmeltano | Running extract & load...\nmeltano | Found state from 2020-09-30 07:00:54.937680.\npipelinewise-tap-mysql-mysql-tails-default-log-based-replication | time=2020-09-30 08:09:27 name=tap_mysql level=INFO message=Server Parameters: version: 5.6.44-log, wait_timeout: 28800, innodb_lock_wait_timeout: 3600, max_allowed_packet: 4194304, interactive_timeout: 28800\npipelinewise-tap-mysql-mysql-tails-default-log-based-replication | time=2020-09-30 08:09:27 name=tap_mysql level=INFO message=Server SSL Parameters(blank means SSL is not active): [ssl_version: ], [ssl_cipher: ]\npipelinewise-target-snowflake-mysql-tails-default | time=2020-09-30 08:09:27 name=target_snowflake level=INFO message=Getting catalog objects from table cache...\npipelinewise-target-snowflake-mysql-tails-default | time=2020-09-30 08:09:31 name=target_snowflake level=INFO message=Emitting state {\"currently_syncing\": null}\nmeltano | Incremental state has been updated at 2020-09-30 08:09:31.079654.\nmeltano | Extract & load complete!\nmeltano | Transformation skipped.\n```\n\nIn the job table, entries for the full_table replication job have only a bookmark for the one table that it is syncing as opposed to all those selected. Entries for the log_based replication job read only `{\"singer_state\": {\"currently_syncing\": null}}`. I will try wiping the jobs table and see if that fixes things as a workaround.", "state": "closed", "created_at": "2020-09-30T08:20:20.570000Z", "updated_at": "2020-09-30T09:23:37.503000Z", "closed_at": "2020-09-30T09:23:37.471000Z", "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2370", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": null, "closed_by_id": 2585766, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71888662, "iid": 2369, "project_id": 7603319, "title": "Add `singer-io` variant of tap-facebook", "description": "~~Our fork doesn't support APIv8 yet, but theirs does: https://gitlab.com/meltano/tap-facebook/-/issues/5#note_416266167~~\n\nIt would be nice to add out-of-the-box support for https://github.com/singer-io/tap-facebook, for users who already started using it before finding Meltano.", "state": "opened", "created_at": "2020-09-29T17:43:03.746000Z", "updated_at": "2020-11-05T23:25:49.734000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2369", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71888580, "iid": 2368, "project_id": 7603319, "title": "Add `transferwise` and `datamill-co` variants of `target-snowflake`", "description": "Depends on https://gitlab.com/meltano/meltano/-/issues/2134, related to https://gitlab.com/meltano/meltano/-/issues/2357.\n\n---\n\nhttps://github.com/datamill-co/target-snowflake and https://github.com/transferwise/pipelinewise-target-snowflake are both more mature and battle-tested than our own https://gitlab.com/meltano/target-snowflake.\n\nAs described in target-snowflake#27, our version is currently incompatible with macOS Catalina. Instead of investing the time to address that, we may very well be better off recommending users use one of the other versions instead.", "state": "closed", "created_at": "2020-09-29T17:40:00.874000Z", "updated_at": "2020-11-05T23:30:55.692000Z", "closed_at": "2020-10-30T18:07:54.891000Z", "labels": ["Load", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2368", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1646014, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71827016, "iid": 2367, "project_id": 7603319, "title": "Adopt Poetry for dependency management", "description": "@NiallRees suggested using pipenv in https://gitlab.com/meltano/meltano/-/merge_requests/1884#note_419029126:\n\n>>>\nHave you used/considered pipenv? It has good dependency resolution and can require a specific python version which would have caught this. I'm using it in all new projects and ci pipelines, with something like:\n\n```\nRUN pip install pipenv\nCOPY Pipfile* /tmp\nRUN cd /tmp && pipenv lock --requirements > requirements.txt\nRUN pip install -r /tmp/requirements.txt\n```\n\nin the dockerfile per https://pythonspeed.com/articles/pipenv-docker/\n>>>\n\n---\n\n@blarghmatey created an MR to add Poetry in https://gitlab.com/meltano/meltano/-/merge_requests/1964.", "state": "closed", "created_at": "2020-09-28T20:46:33.490000Z", "updated_at": "2020-12-02T20:49:25.517000Z", "closed_at": "2020-12-02T20:49:25.461000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [199793], "user_notes_count": 5, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2367", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 199793, "closed_by_id": 87854, "milestone_id": 1702831, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71826666, "iid": 2366, "project_id": 7603319, "title": "Let plugins specify metadata for key/values inside array settings", "description": "This would let us add metadata for the key/value pairs inside `tap-spreadsheets-anywhere`'s [`tables` array](https://github.com/ets/tap-spreadsheets-anywhere#configuration), to make `meltano config <plugin> list` and `meltano config <plugin> init` (https://gitlab.com/meltano/meltano/-/issues/2363) more helpful.\n\nAs I wrote in https://gitlab.com/meltano/meltano/-/issues/2363#note_419966123:\n\n> Meltano's configuration layer doesn't currently \"understand\" settings inside arrays, since it's built around the assumption that 1 setting has 1 key and 1 value, which breaks once an array can have multiple objects inside it with different key paths and values, but the same corresponding setting definition. Thus, from Meltano's perspective, the `tables` key is just a single setting with a massive array value.\n\nWe would also need to figure out how to deal with these array-nested settings when loading/storing config in environment variables, and when storing using `meltano config <plugin> set` or listing in `meltano config <plugin> list`.", "state": "opened", "created_at": "2020-09-28T20:32:02.047000Z", "updated_at": "2020-09-28T20:32:02.047000Z", "closed_at": null, "labels": ["Configuration", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2366", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71820250, "iid": 2365, "project_id": 7603319, "title": "User gmail. Com", "description": "### Opportunity Assessment\n\n\n#### Summary\n\n\n\n**1. Exactly what problem will this solve? (value proposition)**\n\n\n\n**2. For whom do we solve that problem? (target market)**\n\n\n\n**3. How big is the opportunity? (market size)**\n\n\n\n**4. What alternatives are out there? (competitive landscape)**\n\n\n\n**5. Why are we best suited to pursue this? (our differentiator)**\n\n\n\n**6. Why now? (market window)**\n\n\n\n**7. How will we get this product to market? (go-to-market strategy)**\n\n\n\n**8. How will we measure success/make money from this product? (metrics/revenue strategy)**\n\n\n\n**9. What factors are critical to success? (solution requirements)**\n\n\n\n**10. Given the above, what\u2019s the recommendation? (go or no-go)**", "state": "closed", "created_at": "2020-09-28T17:55:13.976000Z", "updated_at": "2020-09-28T17:55:56.365000Z", "closed_at": "2020-09-28T17:55:56.349000Z", "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2365", "weight": null, "has_tasks": false, "author_id": 7201900, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71814775, "iid": 2364, "project_id": 7603319, "title": "Singer extension: `BATCH` messages to enable faster throughput", "description": "Once Meltano supports the PipelineWise taps and targets out of the box (https://gitlab.com/meltano/meltano/-/issues/2357), it would be great if we could also support Fast Sync when `meltano elt` is run with a supported pair of PipelineWise taps and targets:\n\n> Fast Sync is bypassing the Singer Specification for optimised performance. Primary use case of Fast Sync is initial sync or to resync large tables with hundreds of millions of rows where singer component would usually be running for long hours or sometimes for days.\n\nSee:\n- https://transferwise.github.io/pipelinewise/concept/fastsync.html\n- https://transferwise.github.io/pipelinewise/concept/replication_methods.html#fast-sync\n- https://github.com/transferwise/pipelinewise/tree/master/pipelinewise/fastsync", "state": "opened", "created_at": "2020-09-28T16:17:38.697000Z", "updated_at": "2021-03-11T20:34:26.978000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "feature requests", "flow::Triage", "performance"], "assignees": [], "user_notes_count": 30, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2364", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893435, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71701762, "iid": 2363, "project_id": 7603319, "title": "meltano config <plugin> init", "description": "### Problem to solve\n\nSome plugin configurations require nesting structures that may be too complex to set with `meltano config <plugin> set <name>` or to manually insert into `meltano.yml` by hand.\n\nAn option to initialize the skeleton config in `meltano.yml` could be a convenient way to reduce complexity of setting up complex plugin configurations.\n\n### Target audience\n(For whom are we doing this? Include a persona)\n\nThe target audience would be users who are setting up plugins with complex configurations.\n\n### Further details\n(Include use cases, benefits, and/or goals)\n\nAn example use case would be a user trying to setup the [tap-spreadsheets-anywhere](https://github.com/ets/tap-spreadsheets-anywhere) extractor, which has a complex `tables` array:\n\n```\n{\n    \"tables\": [\n        {\n            \"path\": \"s3://my-s3-bucket\",\n            \"name\": \"target_table_name\",\n            \"pattern\": \"subfolder/common_prefix.*\",\n            \"start_date\": \"2017-05-01T00:00:00Z\",\n            \"key_properties\": [],\n            \"format\": \"csv\",\n            \"delimiter\": \"|\",\n            \"quotechar\": '\"',\n            \"universal_newlines\": false,\n            \"sample_rate\": 10,\n            \"max_sampling_read\": 2000,\n            \"max_sampled_files\": 3,\n            \"prefer_number_vs_integer\": true,\n            \"selected\": true,\n\n            // for any field in the table, you can hardcode the json schema datatype to override\n            // the schema infered through discovery mode. \n            // *Note Meltano users* - the scheam override support delivered in Meltano v1.41.1 is more robust\n            //  and should be preferred to this tap-specific override functionality.  \n            \"schema_overrides\": {\n                \"id\": {\n                    \"type\": [\"null\", \"integer\"],\n                },\n                // if you want the tap to enforce that a field is not nullable, you can do it like so:\n                \"first_name\": {\n                    \"type\": \"string\",\n                }\n            }\n        },\n        {\n            \"path\": \"sftp://username:password@host//path/file\",\n            \"name\": \"another_table_name\",\n            \"pattern\": \"subdir/.*User.*\",\n            \"start_date\": \"2017-05-01T00:00:00Z\",\n            \"key_properties\": [\"id\"],\n            \"format\": \"excel\", \n            // you must specify the worksheet name to pull from in your xls(x) file.\n            \"worksheet_name\": \"Names\"\n        }\n    ]\n}\n```\n\nCurrently, as best I understand, a user would have to either construct that entire tables array in a single string passed to `meltano config tap-spreadsheets-anywhere set tables '{...}', or manually author that structure into their `meltano.yml` file.\n\n### Proposal\n(How are we going to solve the problem? Try to include the user journey)\n\nOne idea proposed here is to add a CLI option to initialize a blank default skeleton for a plugin's configuration (assuming this information is somehow associated with the plugin's discovery metadata?)\n\n`meltano config <plugin> init` or `meltano config <plugin> init <name>`\n\nRunning this command would insert the blank config skeleton into the appropriate location within the `meltano.yml` file, leaving the user with the much simpler task of filling in any necessary blanks.\n\n### What does success look like, and how can we measure that?\n(Define both the success metrics and acceptance criteria. Note that success metrics indicate the desired business outcomes, while acceptance criteria indicate when the solution is working correctly. If there is no way to measure success, link to an issue that will implement a way to measure this)\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-09-25T17:55:39.036000Z", "updated_at": "2020-09-29T16:00:02.317000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Configuration", "feature requests"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2363", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 2613, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71640621, "iid": 2362, "project_id": 7603319, "title": "`getting_started_sample_code` fails in MRs from forks that don't have the `POSTGRES_PASSWORD` variable set", "description": "As seen in https://gitlab.com/meltano/meltano/-/merge_requests/1883: https://gitlab.com/pblankley/meltano/-/jobs/754438457\n\nThe solution will be to always use a non-empty `POSTGRES_PASSWORD`, even if it is not overridden using a project-level CI variable.", "state": "closed", "created_at": "2020-09-24T16:06:23.788000Z", "updated_at": "2020-09-24T20:31:00.311000Z", "closed_at": "2020-09-24T20:31:00.264000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2362", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71618427, "iid": 2361, "project_id": 7603319, "title": "Adding apache-airflow[kubernetes] to pip_url in airflow orchestrator config does not work", "description": "ModuleNotFoundError when trying to import:\n`from airflow.contrib.operators.kubernetes_pod_operator import KubernetesPodOperator`", "state": "closed", "created_at": "2020-09-24T10:35:00.681000Z", "updated_at": "2020-09-30T20:52:42.136000Z", "closed_at": "2020-09-30T17:35:08.750000Z", "labels": ["Accepting Merge Requests", "bug"], "assignees": [], "user_notes_count": 7, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2361", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71590292, "iid": 2360, "project_id": 7603319, "title": "Stop automatically installing missing extractor, loader, and transform plugins in `meltano elt`", "description": "With extractors and loaders, auto-installation is not particularly useful because they typically need to be configured before usage. Technically, you could manually set the configuration environment variables and go straight to `meltano elt`, without needing `meltano config`, but it would be hard to discover the env vars, and some settings would be more appropriately stored in `meltano.yml`\n\nWith transforms, auto-installation is problematic, because a user may not actually want to use the built-in transforms, and may have added their own dbt models to `transform/models` already. This was brought up by @pblankley [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1600894752007800?thread_ts=1600894401.007200&cid=CFG3C3C66):\n\n>>>\nRight after I run `meltano elt tap-shopify target-snowflake --transform only --job_id=shop22snow` if I don\u2019t have the transform for shopify installed (which is desired, I want to use my own):\n\n![Screen_Shot_2020-09-23_at_4.57.59_PM](/uploads/8089652041e4bdf35045049d035e9848/Screen_Shot_2020-09-23_at_4.57.59_PM.png)\n>>>\n\n---\n\nTo realize this, we would need to remove the [`install_missing_plugins` method](https://gitlab.com/meltano/meltano/-/blob/3ff9d104bac82637e8cff4fe2bfae6d10a180026/src/meltano/cli/elt.py#L260) from the `meltano elt` implementation.", "state": "closed", "created_at": "2020-09-23T21:08:27.801000Z", "updated_at": "2020-10-07T16:17:54.542000Z", "closed_at": "2020-09-25T21:44:14.845000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [6426634], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2360", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 6426634, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71553046, "iid": 2359, "project_id": 7603319, "title": "Boto3 required by snowflake-connector-python is too low for k8 service account assume roles on EKS.", "description": "We are requiring `snowflake-connector-python==1.6.10`\n\nhttps://gitlab.com/meltano/meltano/-/blob/master/setup.py#L34\n\nLatest is 2.3.2, and installs a boto3 version compatible with EKS service accounts.", "state": "closed", "created_at": "2020-09-23T08:13:02.575000Z", "updated_at": "2020-10-05T18:15:58.685000Z", "closed_at": "2020-10-05T18:15:58.655000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [2585766], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2359", "weight": null, "has_tasks": false, "author_id": 2585766, "assignee_id": 2585766, "closed_by_id": 87854, "milestone_id": 1616731, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71383622, "iid": 2358, "project_id": 7603319, "title": "`meltano elt` `--select <entity>` deselects all attributes other than those marked `inclusion: automatic`", "description": "This ~regression  was introduced by the (supposed) ~\"bug\"fix for https://gitlab.com/meltano/meltano/-/issues/2352 in https://gitlab.com/meltano/meltano/-/merge_requests/1873 and released in [v1.50.0](https://meltano.com/blog/2020/09/17/now-available-meltano-v1-50-0/), because I (embarrassingly) only wrote unit tests, not integration tests, to verify the correct behavior of the `select_filter` extra (and the `--select` option which uses it). I will not make the same mistake (as often) again.", "state": "closed", "created_at": "2020-09-18T22:50:15.600000Z", "updated_at": "2020-09-21T16:16:45.810000Z", "closed_at": "2020-09-21T16:16:45.693000Z", "labels": ["CLI", "bug", "flow::Review", "regression"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2358", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71375016, "iid": 2357, "project_id": 7603319, "title": "Add support for all PipelineWise taps and targets", "description": "Depends on https://gitlab.com/meltano/meltano/-/issues/2134.\n\nSee https://transferwise.github.io/pipelinewise/connectors/taps.html and https://transferwise.github.io/pipelinewise/connectors/targets.html.\n\nWhen a user is using a PipelineWise tap with a PipelineWise target, we can consider supporting (a subset of) PipelineWise's YAML configuration format (see https://transferwise.github.io/pipelinewise/connectors/taps/postgres.html) in `meltano.yml`, by translating the schema and table mappings into catalog [metadata rules](https://meltano.com/docs/plugins.html#metadata-extra) and tap and target settings: https://gitlab.com/meltano/meltano/-/issues/2385", "state": "closed", "created_at": "2020-09-18T16:28:36.841000Z", "updated_at": "2020-11-10T23:22:09.880000Z", "closed_at": "2020-11-05T23:15:53.152000Z", "labels": ["flow::To Do"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2357", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71319310, "iid": 2356, "project_id": 7603319, "title": "`meltano elt` should fail when a pipeline with the same job ID is still running", "description": "As brought up by Niall Woodward [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1600259129201900):\n\n>>>\nHow does Meltano behave when a run is started before the previous has completed? I can't find that in the docs. Example where this could happen is with a scheduler running hourly and a run that takes over an hour\n>>>\n\nI responded there:\n\n>>>\n`meltano elt` could check the system database to see if a job with the same job ID is already running, but it doesn't currently, so 2 parallel `meltano elt`s would start with the same incremental state (of the most recent complete run) and would both try to extract (and load) all the new data. In that scenario, it'd be up to the loader and the database to use UPSERT, primary keys, and uniqueness constraints to prevent duplicate records from being created.\n>>>\n\nSince a job in the system database could get stuck in the `running` state if the job is killed, `meltano elt` should support a `--force` flag (or something to that extent) to skip this \"is this pipeline already running?\" check.", "state": "closed", "created_at": "2020-09-17T15:27:46.923000Z", "updated_at": "2021-02-23T01:21:43.839000Z", "closed_at": "2021-02-23T01:21:43.713000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Doing"], "assignees": [689351], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2356", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 689351, "closed_by_id": 87854, "milestone_id": 1833541, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71270761, "iid": 2355, "project_id": 7603319, "title": "Add option to `meltano elt` to dump generated catalog, state and config", "description": "Supersedes https://gitlab.com/meltano/meltano/-/issues/2290 and https://gitlab.com/meltano/meltano/-/issues/2288.\n\nWe can add a new `--dump` option with `catalog`, `state`, `extractor-config` and `loader-config` values.", "state": "closed", "created_at": "2020-09-16T23:15:02.665000Z", "updated_at": "2020-12-30T22:38:14.559000Z", "closed_at": "2020-09-21T17:41:08.884000Z", "labels": ["CLI", "feature requests", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2355", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71262857, "iid": 2354, "project_id": 7603319, "title": "Be able to view all historic run information and logs for a pipeline through the UI", "description": "### Problem to solve\nWe need to add functionality to the UI so that the full history of a pipeline can be viewed along with corresponding logs. This is so that issues can be investigated, and historic run times and status can be seen.\n\n\n### Target audience\nAnyone who is responsible for configuring and maintaining pipelines\n\n\n### Proposal\nThe pipeline could be clickable and fold down to a paginated list ordered by most recent runs with stats and a logs button.\n\n![image](/uploads/e66b1b774cf620584fffbfba9ec70946/image.png)\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-09-16T17:52:00.043000Z", "updated_at": "2021-02-10T16:57:34.360000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2354", "weight": null, "has_tasks": false, "author_id": 1243277, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71260433, "iid": 2353, "project_id": 7603319, "title": "Add `meltano remove <type> <name>` command to remove a plugin", "description": "This should remove the plugin from `meltano.yml`, as well as its files in the `.meltano` directory.\n\nTo be determined: Should we also remove the plugin's settings from `.env` and the system database?", "state": "opened", "created_at": "2020-09-16T16:35:30.066000Z", "updated_at": "2020-11-13T19:06:22.895000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2353", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 71046888, "iid": 2352, "project_id": 7603319, "title": "`meltano elt --select <pattern>` unexpectedly selects matching entities that weren't already selected", "description": "https://meltano.com/docs/command-line-interface.html#elt, however, claims that only [selected entities](https://meltano.com/docs/command-line-interface.html#select) are considered:\n\n> One or more --select <entity> options can be passed to only extract records for matching [selected entities](https://meltano.com/docs/command-line-interface.html#select). Similarly, --exclude <entity> can be used to extract records for all selected entities except for those specified.", "state": "closed", "created_at": "2020-09-11T23:40:58.244000Z", "updated_at": "2020-09-18T22:50:16.033000Z", "closed_at": "2020-09-16T20:57:08.924000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2352", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70992722, "iid": 2351, "project_id": 7603319, "title": "Running `meltano elt` with `--select` and `--full-refresh` should carry forward state of non-selected streams", "description": "Version: 1.48.0\n\n### What is the current *bug* behavior?\nWhen running `meltano elt <tap> <target> --select stream2 --full-refresh --job_id <job>`, stream2's state is the only state saved.\n\nAfter last incremental run, the state is:\n```\n{\n\t\"singer_state\": {\n\t\t\"bookmarks\": {\n\t\t\t\"stream1\": {...},\n\t\t\t\"stream2\": {...}\n\t\t},\n\t\t\"currently_syncing\": null\n\t}\n}\n```\n\nThen, after running with `--select stream2 --full-refresh`, the state is:\n```\n{\n\t\"singer_state\": {\n\t\t\"bookmarks\": {\n\t\t\t\"stream2\": {...}\n\t\t},\n\t\t\"currently_syncing\": null\n\t}\n}\n```\n\n\n\n### What is the expected *correct* behavior?\nThe previous state for non-selected streams should be included in the new state\n\n### Steps to reproduce\n`meltano elt --job_id <job> --select <stream2> --full-refresh`", "state": "closed", "created_at": "2020-09-10T17:24:13.980000Z", "updated_at": "2020-09-14T22:01:10.918000Z", "closed_at": "2020-09-14T22:01:10.899000Z", "labels": ["bug"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2351", "weight": null, "has_tasks": false, "author_id": 71418, "assignee_id": null, "closed_by_id": 71418, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70951124, "iid": 2350, "project_id": 7603319, "title": "Add `MELTANO_TRANSFORM_*` transform pipeline env vars for transformer (config) to access", "description": "This will enable us to reference `$MELTANO_TRANSFORM__PACKAGE_NAME` from the default value of the dbt `models` setting.", "state": "closed", "created_at": "2020-09-09T21:48:05.292000Z", "updated_at": "2020-09-10T21:59:22.131000Z", "closed_at": "2020-09-10T21:59:22.081000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2350", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70950102, "iid": 2349, "project_id": 7603319, "title": "Allow plugin setting (default) values to reference pipeline plugin extras using generic env vars", "description": "This will enable us to change the default value of the `target-postgres` and `target-snowflake` `schema` setting from `$MELTANO_EXTRACTOR_NAMESPACE` to `$MELTANO_EXTRACT__PREFERRED_SCHEMA`.", "state": "closed", "created_at": "2020-09-09T21:02:44.987000Z", "updated_at": "2020-09-10T16:53:33.043000Z", "closed_at": "2020-09-10T16:53:32.991000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2349", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70871929, "iid": 2348, "project_id": 7603319, "title": "`meltano select` catalog discovery cache is not invalidated when extractor configuration changes", "description": "Hi, I think I found a bug in the `meltano select` command.\n\nSteps to reproduce:\n\n`meltano config tap-google-sheets set spreadsheet_id \"example1\"`\n\n`meltano elt tap-google-sheets target-csv`\n\n`meltano config tap-google-sheets set spreadsheet_id \"example2\"`\n\n`meltano config tap-google-sheets list`\n\nThis shows the correct value of TAP_GOOGLE_SHEETS_SPREADSHEET_ID: example2.\n\n`meltano select tap-google-sheets --list`\n\nThis shows attributes of the former spreadsheet (= example1).\n\n\nCommand `meltano select tap-google-sheets --list` shows correct attributes only after `meltano elt/invoke`.", "state": "closed", "created_at": "2020-09-08T11:09:12.728000Z", "updated_at": "2021-01-07T23:31:41.443000Z", "closed_at": "2020-09-21T22:02:12.835000Z", "labels": ["Accepting Merge Requests", "Extract", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2348", "weight": null, "has_tasks": false, "author_id": 6973299, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70834183, "iid": 2347, "project_id": 7603319, "title": "`meltano config <plugin> set --store=dotenv` doesn't store valid JSON values for arrays and objects", "description": "As found by Jan Fe\u0159tek [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1599419214106600?thread_ts=1599407110.106500&cid=CFG3C3C66).", "state": "closed", "created_at": "2020-09-07T16:10:15.163000Z", "updated_at": "2020-09-07T17:04:39.280000Z", "closed_at": "2020-09-07T17:04:39.232000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2347", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70831824, "iid": 2346, "project_id": 7603319, "title": "Correctly cast environment variable string value when overriding custom array and object settings", "description": "As found by Jan Fe\u0159tek [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1599419214106600?thread_ts=1599407110.106500&cid=CFG3C3C66).", "state": "closed", "created_at": "2020-09-07T15:13:51.642000Z", "updated_at": "2020-09-07T17:09:54.384000Z", "closed_at": "2020-09-07T17:09:54.336000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2346", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70831722, "iid": 2345, "project_id": 7603319, "title": "Make `tap-csv` `files` a known setting", "description": "As documented under https://gitlab.com/meltano/tap-csv#run.", "state": "closed", "created_at": "2020-09-07T15:10:52.969000Z", "updated_at": "2020-09-07T16:48:43.631000Z", "closed_at": "2020-09-07T16:48:43.574000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2345", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70751477, "iid": 2344, "project_id": 7603319, "title": "Move ELT logs from `.meltano/run` to `.meltano/logs`", "description": "Spun out of https://gitlab.com/meltano/meltano/-/issues/2342\n\nThis would be a **breaking change** we need to explicitly call out in the CHANGELOG and blog post.", "state": "closed", "created_at": "2020-09-04T20:28:30.865000Z", "updated_at": "2020-09-07T20:42:30.067000Z", "closed_at": "2020-09-04T21:23:18.981000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2344", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70751426, "iid": 2343, "project_id": 7603319, "title": "Automatically delete generated config files containing credentials at end of pipeline run", "description": "Spun out of https://gitlab.com/meltano/meltano/-/issues/2342", "state": "closed", "created_at": "2020-09-04T20:24:34.917000Z", "updated_at": "2020-09-07T17:08:29.474000Z", "closed_at": "2020-09-07T17:08:29.431000Z", "labels": ["Accepting Merge Requests", "Security", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2343", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70751340, "iid": 2342, "project_id": 7603319, "title": "Generated plugin config files for different pipelines are stored in same plugin-specific location", "description": "This means that `meltano elt` pipelines running in parallel with a shared filesystem could overwrite each other's config files, resulting in plugins running with the wrong configuration.\n\nWe should store these config files in `.meltano/run/elt/<job_id>/<run_id>`, not `.meltano/run/<plugin_name>`, as intended by this line which misses a `return`: https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/elt_context.py#L61\n\nThis will cause issues for people who are currently storing their `tap.properties.json` at `.meltano/run/<tap>/tap.properties.json`, as I have suggested a few times in Slack, so this would be a **breaking change** we need to explicitly call out in the CHANGELOG and blog post. These users should use `.meltano/extractors/<tap>/tap.properties.json`, or the new `--catalog` option (https://gitlab.com/meltano/meltano/-/issues/2291) instead.\n\n---\n\nThe downside of storing the files in `.meltano/run/elt/<job_id>/<run_id>` is that we also store logs there: https://meltano.com/docs/project.html#meltano-directory, which we recommend exfiltrating from Docker containers: https://meltano.com/docs/production.html#storing-logs. It would be unexpected if config files with credentials and everything would also be exfiltrated. It'd be better to just keep them safe in the container.\n\nWe could consider automatically deleting these files at the end of a pipeline, so that they don't persist on the shared volume for too long, but that would make debugging more difficult, since the `--config`, `--catalog`, and `--state` paths printed by `meltano --log-level=debug elt` ([debug mode](https://meltano.com/docs/command-line-interface.html#debugging)) wouldn't exist anymore after the job fails. We could consider deleting only the config file, since it could contain sensitive values, and since it can be generated easily using `meltano config` anyway: https://gitlab.com/meltano/meltano/-/issues/2343\n\nThe other option would be to store logs elsewhere, but that would be another breaking change with regard to a recommendation we've made in the documentation and on Slack: https://gitlab.com/meltano/meltano/-/issues/2344", "state": "closed", "created_at": "2020-09-04T20:21:08.839000Z", "updated_at": "2020-09-04T21:39:36.595000Z", "closed_at": "2020-09-04T21:39:36.543000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2342", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70742936, "iid": 2341, "project_id": 7603319, "title": "Support custom non-pip plugins whose executables are already present on the system by specifying `executable` but no `pip_url`", "description": "This would be a way to support https://gitlab.com/meltano/meltano/-/issues/1175, as an alternative to https://gitlab.com/meltano/meltano/-/issues/2205:\n\n```yaml\nextractors:\n- name: tap-mssql\n  namespace: tap_mssql\n  executable: tap-mssql # or /path/to/tap-mssql\n``` \n\nOf course, this would make a Meltano project less portable than it otherwise would be, since it'll depend on the executable already being present on the system, and it wouldn't be available in a containerized project unless the Dockerfile was modified to install it and make it available on the `PATH`.", "state": "opened", "created_at": "2020-09-04T15:26:04.754000Z", "updated_at": "2021-02-15T22:10:39.460000Z", "closed_at": null, "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2341", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70742260, "iid": 2340, "project_id": 7603319, "title": "Print full error message when extractor catalog discovery fails", "description": "This will make it easier to debug issues with `--discover`.", "state": "closed", "created_at": "2020-09-04T15:07:08.291000Z", "updated_at": "2020-09-04T15:30:28.894000Z", "closed_at": "2020-09-04T15:30:28.813000Z", "labels": ["Extract", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2340", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70707428, "iid": 2339, "project_id": 7603319, "title": "Mention docker-compose file bundle in Containerization guide", "description": "See https://gitlab.com/meltano/files-docker-compose/-/merge_requests/2#note_406954306", "state": "closed", "created_at": "2020-09-03T20:34:46.916000Z", "updated_at": "2020-09-08T18:31:34.786000Z", "closed_at": "2020-09-08T18:31:34.736000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2339", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70697118, "iid": 2338, "project_id": 7603319, "title": "Once again use `singer-io/target-csv` instead of our own fork", "description": "As reported by Jan Fe\u0159tek [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1599139821097800), https://gitlab.com/meltano/meltano/-/issues/2197 was unintentionally reversed back by https://gitlab.com/meltano/meltano/-/commit/12a30889ee3c99cb96b4d09d7d5c6a9c27a36782#24ea2aafd68d8e0f82ee51382a8c17793e2b99c8.", "state": "closed", "created_at": "2020-09-03T16:10:03.458000Z", "updated_at": "2020-09-03T16:40:36.201000Z", "closed_at": "2020-09-03T16:40:35.772000Z", "labels": ["bug", "flow::Review", "regression"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2338", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70655026, "iid": 2337, "project_id": 7603319, "title": "Add `meltano show <plugin>` to show info about a plugin, like the repo and docs URLs", "description": "", "state": "opened", "created_at": "2020-09-02T21:10:16.851000Z", "updated_at": "2020-12-30T23:23:54.566000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2337", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70599868, "iid": 2336, "project_id": 7603319, "title": "Support for a migration plugin type", "description": "Often additional warehouse maintenance tasks need to be handled which don't fall in the scope of a pipeline.  Perhaps a table or schema got renamed, or you explicitly wish to add indexes to a particular column.\n\nAdding a migration plugin such as [Alembic](https://alembic.sqlalchemy.org/en/latest/) would allow Meltano to track database migrations in a source-controlled way, e.g.\n\n```bash\nmeltano add migrator alembic\nmeltano invoke alembic revision -m \"rename schema\"\nmeltano invoke alembic upgrade\n```", "state": "opened", "created_at": "2020-09-01T21:25:58.402000Z", "updated_at": "2021-02-01T17:35:00.628000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests"], "assignees": [], "user_notes_count": 7, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2336", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70599704, "iid": 2335, "project_id": 7603319, "title": "Support for DBT Snapshots", "description": "dbt supports [snapshots](https://docs.getdbt.com/docs/building-a-dbt-project/snapshots) which is a way to store historical values for slowly changing data. You may need to run these before or after your model transformations.\n\n`meltano elt` can run dbt model transforms, but snapshots have to be run manually with `meltano invoke dbt`.\n\nI propose adding support for optionally triggering a snapshot as part of a transform operation.\n\nIt seems like `dbt snapshot` supports `--select` for only running certain models, although running it across the whole project wouldn't be a problem in my mind, since running it on a table that hasn't changed should be a no-op.\n\nOn #2300 the syntax `-t dbt:snapshot` was proposed by @DouweM", "state": "opened", "created_at": "2020-09-01T21:18:33.700000Z", "updated_at": "2021-02-13T00:19:38.168000Z", "closed_at": null, "labels": ["feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2335", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70586101, "iid": 2334, "project_id": 7603319, "title": "Meltano passing empty config values / objects to tap.config.json", "description": "### What is the current *bug* behavior?\nThe google analytics tap config now includes an `oauth_credentials` object even though it is empty which causes the tap to fail when using a service account.\n\n\n\n### What is the expected *correct* behavior?\nWhen a config value is null it isn't added to the tap.config.json\n\n\n\n### Steps to reproduce\n1. set up a base meltano install\n2. add tap-google-analytics\n3. configure it with only GOOGLE_ANALYTICS_API_CLIENT_SECRETS, GOOGLE_ANALYTICS_API_VIEW_ID, and GOOGLE_ANALYTICS_API_START_DATE\n4. run `meltano invoke tap-google-analytics\n\n\n\n### Relevant logs and/or screenshots\n```\nroot@ac62cff08068:/project# meltano invoke tap-google-analytics\n[2020-09-01 14:57:30,157] [160|MainThread|root] [WARNING] before_invoke hook 'run_discovery_hook' has failed: Schema discovery failed: command ['/project/.meltano/extractors/tap-google-analytics/venv/bin/tap-google-analytics', '--config', '/project/.meltano/run/tap-google-analytics/tap.config.json', '--discover'] returned 1: INFO URL being requested: GET https://www.googleapis.com/discovery/v1/apis/analyticsreporting/v4/rest\nINFO URL being requested: GET https://www.googleapis.com/discovery/v1/apis/analytics/v3/rest\nINFO URL being requested: GET https://www.googleapis.com/analytics/v3/metadata/ga/columns?alt=json\nINFO Attempting refresh to obtain initial access_token\nINFO Refreshing access_token\nINFO Failed to retrieve access token: {\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The OAuth client was not found.\"\n}\nCRITICAL invalid_client: The OAuth client was not found.\nTraceback (most recent call last):\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/bin/tap-google-analytics\", line 11, in <module>\n    load_entry_point('tap-google-analytics==0.1.1', 'console_scripts', 'tap-google-analytics')()\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/singer/utils.py\", line 229, in wrapped\n    return fnc(*args, **kwargs)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/__init__.py\", line 196, in main\n    catalog = discover(args.config)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/__init__.py\", line 38, in discover\n    reports_helper = ReportsHelper(config, reports_definition)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/reports_helper.py\", line 13, in __init__\n    self.client = GAClient(config)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/ga_client.py\", line 76, in __init__\n    (self.dimensions_ref, self.metrics_ref) = self.fetch_metadata()\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/ga_client.py\", line 123, in fetch_metadata\n    results = service.metadata().columns().list(reportType='ga', quotaUser=self.quota_user).execute()\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/googleapiclient/_helpers.py\", line 130, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/googleapiclient/http.py\", line 846, in execute\n    method=str(self.method), body=self.body, headers=self.headers)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/googleapiclient/http.py\", line 164, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/oauth2client/transport.py\", line 159, in new_request\n    credentials._refresh(orig_request_method)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/oauth2client/client.py\", line 749, in _refresh\n    self._do_refresh_request(http)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/oauth2client/client.py\", line 819, in _do_refresh_request\n    raise HttpAccessTokenRefreshError(error_msg, status=resp.status)\noauth2client.client.HttpAccessTokenRefreshError: invalid_client: The OAuth client was not found.\n[2020-09-01 14:57:30,158] [160|MainThread|root] [WARNING] before_invoke hook 'apply_catalog_rules_hook' has failed: Applying metadata and schema rules failed: catalog file is missing.\nINFO URL being requested: GET https://www.googleapis.com/discovery/v1/apis/analyticsreporting/v4/rest\nINFO URL being requested: GET https://www.googleapis.com/discovery/v1/apis/analytics/v3/rest\nINFO URL being requested: GET https://www.googleapis.com/analytics/v3/metadata/ga/columns?alt=json\nINFO Attempting refresh to obtain initial access_token\nINFO Refreshing access_token\nINFO Failed to retrieve access token: {\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The OAuth client was not found.\"\n}\nCRITICAL invalid_client: The OAuth client was not found.\nTraceback (most recent call last):\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/bin/tap-google-analytics\", line 11, in <module>\n    load_entry_point('tap-google-analytics==0.1.1', 'console_scripts', 'tap-google-analytics')()\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/singer/utils.py\", line 229, in wrapped\n    return fnc(*args, **kwargs)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/__init__.py\", line 203, in main\n    catalog = discover(args.config)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/__init__.py\", line 38, in discover\n    reports_helper = ReportsHelper(config, reports_definition)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/reports_helper.py\", line 13, in __init__\n    self.client = GAClient(config)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/ga_client.py\", line 76, in __init__\n    (self.dimensions_ref, self.metrics_ref) = self.fetch_metadata()\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/tap_google_analytics/ga_client.py\", line 123, in fetch_metadata\n    results = service.metadata().columns().list(reportType='ga', quotaUser=self.quota_user).execute()\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/googleapiclient/_helpers.py\", line 130, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/googleapiclient/http.py\", line 846, in execute\n    method=str(self.method), body=self.body, headers=self.headers)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/googleapiclient/http.py\", line 164, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/oauth2client/transport.py\", line 159, in new_request\n    credentials._refresh(orig_request_method)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/oauth2client/client.py\", line 749, in _refresh\n    self._do_refresh_request(http)\n  File \"/project/.meltano/extractors/tap-google-analytics/venv/lib/python3.6/site-packages/oauth2client/client.py\", line 819, in _do_refresh_request\n    raise HttpAccessTokenRefreshError(error_msg, status=resp.status)\noauth2client.client.HttpAccessTokenRefreshError: invalid_client: The OAuth client was not found\n```\n\n\n\n### Related links\nPertinent discussion link https://meltano.slack.com/archives/C013EKWA2Q1/p1598971758030000?thread_ts=1598646751.045500&cid=C013EKWA2Q1\n\nEvidently this MR caused the issue https://gitlab.com/meltano/meltano/-/merge_requests/1802", "state": "closed", "created_at": "2020-09-01T14:59:11.652000Z", "updated_at": "2020-10-07T17:58:16.587000Z", "closed_at": "2020-10-07T17:58:16.519000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2334", "weight": null, "has_tasks": false, "author_id": 6382744, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70520582, "iid": 2333, "project_id": 7603319, "title": "Swagger Codegen for Singer taps based on OpenAPI spec: RFC", "description": "I wanted to file this issue to start collection thoughts from the community on the prospect of building a codegen extension for Swagger to allow anyone to write an OpenAPI spec describing an API and then have swagger build a well formatted tap for them automatically.\n\n- Does anyone have any experience building a Swagger Codegenerator extension?\n- What roadblocks can anyone see?\n- Does this sound like a useful tool for the community?\n- What thoughts / opinions do you have about a tool like this?", "state": "opened", "created_at": "2020-08-31T18:57:45.275000Z", "updated_at": "2020-10-30T23:19:59.150000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2333", "weight": null, "has_tasks": false, "author_id": 6382744, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70440705, "iid": 2332, "project_id": 7603319, "title": "Restructure Contributor Guide", "description": "Sections are currently organized a bit haphazardly, with \"Prerequisites\" at the same level as \"UI Development\", \"System Database\", \"Merge Requests\", and \"Tmuxinator\". We can do better :)", "state": "opened", "created_at": "2020-08-28T23:43:15.040000Z", "updated_at": "2021-02-15T22:33:00.034000Z", "closed_at": null, "labels": ["Documentation"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2332", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70440647, "iid": 2331, "project_id": 7603319, "title": "Fix broken links in docs found by check-md", "description": "See https://gitlab.com/meltano/meltano/-/issues/2304", "state": "closed", "created_at": "2020-08-28T23:36:01.954000Z", "updated_at": "2020-09-01T14:21:59.610000Z", "closed_at": "2020-09-01T14:21:59.535000Z", "labels": ["Documentation", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2331", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70438227, "iid": 2330, "project_id": 7603319, "title": "Algolia search index is outdated", "description": "", "state": "closed", "created_at": "2020-08-28T21:52:38.161000Z", "updated_at": "2020-09-01T14:21:49.069000Z", "closed_at": "2020-09-01T14:21:49.030000Z", "labels": ["Documentation", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2330", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70438035, "iid": 2329, "project_id": 7603319, "title": "Drop \"Meltano\" from concept doc names", "description": "- \"The Meltano Project\" -> \"Projects\"\n- \"Meltano Plugins\" -> \"Plugins\"", "state": "closed", "created_at": "2020-08-28T21:38:25.433000Z", "updated_at": "2020-08-28T22:05:24.922000Z", "closed_at": "2020-08-28T22:05:24.806000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2329", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430779, "iid": 2328, "project_id": 7603319, "title": "Add a new `upcase_string` `value_processor` and apply to `target-snowflake`'s `schema` setting", "description": "See https://gitlab.com/meltano/target-snowflake/-/issues/29 and https://gitlab.com/meltano/target-snowflake/-/issues/29#note_403976417.", "state": "closed", "created_at": "2020-08-28T16:45:28.976000Z", "updated_at": "2020-09-03T20:38:51.393000Z", "closed_at": "2020-09-03T20:38:51.322000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854, 6382744], "user_notes_count": 0, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2328", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430211, "iid": 2327, "project_id": 7603319, "title": "Reconsider homepage intro copy", "description": "The current homepage intro copy was written just as we pivoted:\n\n>>>\nMeltano is an open source platform for building, running & orchestrating ELT pipelines made up of Singer taps and targets and dbt models, that you can run locally or easily deploy in production.\n\nOur goal is to make the power of data integration available to all\nby building a true open source alternative to existing proprietary hosted EL(T) solutions, in terms of ease of use, reliability, and quantity and quality of supported data sources.\n>>>\n\nNow that we know our target audience a little better, we may be able to rephrase things to be more concise and clear.", "state": "closed", "created_at": "2020-08-28T16:25:07.947000Z", "updated_at": "2021-01-28T22:35:54.227000Z", "closed_at": "2021-01-28T22:35:54.171000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2327", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1795244, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430171, "iid": 2326, "project_id": 7603319, "title": "Format extractor and loader docs consistently", "description": "The pages linked from https://meltano.com/plugins/extractors/ and https://meltano.com/plugins/loaders/ are not currently formatted consistently and often prioritize the UI over the CLI, making it harder than it needs to be to find out how to add one to your project and configure it.\n\n- [x] Extractors\n  - [x] Comma Separated Values (CSV): https://gitlab.com/meltano/meltano/-/merge_requests/1925\n  - [x] Facebook Ads: https://gitlab.com/meltano/meltano/-/merge_requests/1926\n  - [x] Fastly: https://gitlab.com/meltano/meltano/-/merge_requests/1927\n  - [x] GitLab: https://gitlab.com/meltano/meltano/-/merge_requests/1924\n  - [x] Google Ads: https://gitlab.com/meltano/meltano/-/merge_requests/1928\n  - [x] Google Analytics: https://gitlab.com/meltano/meltano/-/merge_requests/1929\n  - [x] Marketo: https://gitlab.com/meltano/meltano/-/merge_requests/1931\n  - [x] MongoDB: https://gitlab.com/meltano/meltano/-/merge_requests/1932\n  - [x] Salesforce: https://gitlab.com/meltano/meltano/-/merge_requests/1933\n  - [x] Shopify: https://gitlab.com/meltano/meltano/-/merge_requests/1934\n  - [x] Spreadsheets Anywhere: https://gitlab.com/meltano/meltano/-/merge_requests/1935\n  - [x] Stripe: https://gitlab.com/meltano/meltano/-/merge_requests/1936\n  - [x] Zendesk: https://gitlab.com/meltano/meltano/-/merge_requests/1937\n- [x] Loaders\n  - [x] Comma Separated Values (CSV): https://gitlab.com/meltano/meltano/-/merge_requests/1922\n  - [x] JSON Lines (JSONL): https://gitlab.com/meltano/meltano/-/merge_requests/1923\n  - [x] PostgreSQL: https://gitlab.com/meltano/meltano/-/merge_requests/1920\n  - [x] SQLite: https://gitlab.com/meltano/meltano/-/merge_requests/1921", "state": "closed", "created_at": "2020-08-28T16:23:19.304000Z", "updated_at": "2020-11-05T23:17:26.434000Z", "closed_at": "2020-11-05T23:17:26.402000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2326", "weight": null, "has_tasks": true, "task_status": "19 of 19 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430138, "iid": 2325, "project_id": 7603319, "title": "Mention Meltano UI on homepage and in new doc", "description": "The CLI will remain the primary interface, but the UI continues to improve in terms of project, plugin, and pipeline management (https://gitlab.com/groups/meltano/-/epics/78).", "state": "closed", "created_at": "2020-08-28T16:21:45.733000Z", "updated_at": "2020-09-25T14:46:23.008000Z", "closed_at": "2020-09-25T14:46:22.928000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2325", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430080, "iid": 2324, "project_id": 7603319, "title": "Document how to use dbt integration with locally defined models in Data Transformation (T) doc", "description": "See https://meltano.slack.com/archives/CFG3C3C66/p1597253244461700.", "state": "opened", "created_at": "2020-08-28T16:20:00.859000Z", "updated_at": "2021-03-08T16:44:45.411000Z", "closed_at": null, "labels": ["Documentation", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2324", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430039, "iid": 2323, "project_id": 7603319, "title": "Add \"Contributing\" section to Introduction doc", "description": "Let's make it abundantly clear that we welcome contributions to Meltano itself, the docs, known plugins, and specific taps and targets.", "state": "closed", "created_at": "2020-08-28T16:18:38.853000Z", "updated_at": "2020-08-28T23:28:15.558000Z", "closed_at": "2020-08-28T23:28:15.481000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2323", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70430010, "iid": 2322, "project_id": 7603319, "title": "Add \".meltano directory\" section to The Meltano Project doc", "description": "Let's document what this directory is used for, paths users may want to know for debugging purposes, and the fact that it's environment-specific.", "state": "closed", "created_at": "2020-08-28T16:18:05.041000Z", "updated_at": "2020-09-01T23:32:48.945000Z", "closed_at": "2020-09-01T23:32:48.903000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2322", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429979, "iid": 2321, "project_id": 7603319, "title": "Add \".env\" section to The Meltano Project doc", "description": "Let's document what this file is used for, and link to https://12factor.net/config and/or https://github.com/theskumar/python-dotenv#usages.", "state": "closed", "created_at": "2020-08-28T16:16:47.055000Z", "updated_at": "2020-09-01T23:32:49.116000Z", "closed_at": "2020-09-01T23:32:49.076000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2321", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429957, "iid": 2320, "project_id": 7603319, "title": "Add \"System database\" section to The Meltano Project doc", "description": "We need a better place to link to than https://meltano.com/docs/settings.html#database-uri or https://meltano.com/docs/production.html#storing-metadata.", "state": "closed", "created_at": "2020-08-28T16:15:44.780000Z", "updated_at": "2020-09-01T23:32:49.418000Z", "closed_at": "2020-09-01T23:32:49.239000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2320", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429932, "iid": 2319, "project_id": 7603319, "title": "Add \"meltano.yml\" section to The Meltano Project doc", "description": "Document what `meltano.yml` is used for and that it can be added manually.\n\nLater, we can reference the JSON Schema (https://gitlab.com/meltano/meltano/-/issues/2211) and the Reference doc (https://gitlab.com/meltano/meltano/-/issues/2178).", "state": "closed", "created_at": "2020-08-28T16:14:47.724000Z", "updated_at": "2020-09-01T23:32:49.459000Z", "closed_at": "2020-09-01T23:32:49.397000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2319", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429906, "iid": 2318, "project_id": 7603319, "title": "Add \"Using a custom fork of a plugin\" section to Plugin Management doc", "description": "Let's document that users can change the `pip_url` and run `meltano install <type> <plugin>`.\n\nThey'll need to be aware of https://gitlab.com/meltano/meltano/-/issues/2224, though.", "state": "closed", "created_at": "2020-08-28T16:13:44.418000Z", "updated_at": "2020-11-06T00:48:07.075000Z", "closed_at": "2020-11-06T00:48:07.010000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2318", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429887, "iid": 2317, "project_id": 7603319, "title": "Add \"Removing plugins from your project\" section to Plugin Management doc", "description": "Let's make it explicit that removing the entry from `meltano.yml` is usually sufficient, but that traces will remain in `.meltano` and the system database.", "state": "closed", "created_at": "2020-08-28T16:13:07.826000Z", "updated_at": "2020-11-06T00:13:26.968000Z", "closed_at": "2020-11-06T00:13:26.906000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2317", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429853, "iid": 2316, "project_id": 7603319, "title": "Add \"Known and custom plugins\" section to Plugins doc", "description": "We need a better place to link \"known to Meltano\" to than https://meltano.com/docs/contributor-guide.html#known-plugins.", "state": "closed", "created_at": "2020-08-28T16:12:24.455000Z", "updated_at": "2020-10-06T00:49:19.466000Z", "closed_at": "2020-09-29T23:52:34.796000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2316", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1616731, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429833, "iid": 2315, "project_id": 7603319, "title": "Add \"Overriding Singer stream schema\" section to Data Integration (EL) doc", "description": "Guide for https://meltano.com/docs/plugins.html#schema-extra, like we have https://meltano.com/docs/integration.html#selecting-entities-and-attributes-for-extraction for https://meltano.com/docs/plugins.html#select-extra.", "state": "closed", "created_at": "2020-08-28T16:11:56.236000Z", "updated_at": "2020-09-17T18:32:12.197000Z", "closed_at": "2020-09-17T18:32:12.119000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2315", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429829, "iid": 2314, "project_id": 7603319, "title": "Add \"Setting Singer stream metadata\" section to Data Integration (EL) doc", "description": "Guide for https://meltano.com/docs/plugins.html#metadata-extra, like we have https://meltano.com/docs/integration.html#selecting-entities-and-attributes-for-extraction for https://meltano.com/docs/plugins.html#select-extra.", "state": "closed", "created_at": "2020-08-28T16:11:51.344000Z", "updated_at": "2020-09-17T18:32:12.470000Z", "closed_at": "2020-09-17T18:32:12.425000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2314", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70429792, "iid": 2313, "project_id": 7603319, "title": "Add \"Environment variables\" section to Configuration doc", "description": "We should document:\n- How to use environment variables to configure plugins\n- How settings are exposed to invoked plugins using environment variables\n- How to use environment variable expansion in `meltano.yml` `config` values", "state": "closed", "created_at": "2020-08-28T16:10:59.336000Z", "updated_at": "2020-09-15T15:04:58.469000Z", "closed_at": "2020-09-15T15:04:58.411000Z", "labels": ["Documentation", "flow::Review"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2313", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70341764, "iid": 2312, "project_id": 7603319, "title": "`meltano invoke <extractor> --help` unnecessarily runs discover and generates catalog", "description": "", "state": "closed", "created_at": "2020-08-26T23:12:32.740000Z", "updated_at": "2020-08-26T23:36:32.028000Z", "closed_at": "2020-08-26T23:36:31.985000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2312", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70341505, "iid": 2311, "project_id": 7603319, "title": "Add `getting_started_sample_code` CI job to ensure Getting Started examples keep working", "description": "", "state": "closed", "created_at": "2020-08-26T22:54:00.554000Z", "updated_at": "2020-08-27T16:13:34.283000Z", "closed_at": "2020-08-27T16:13:34.112000Z", "labels": ["Documentation", "Testing", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2311", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70334365, "iid": 2310, "project_id": 7603319, "title": "Add \"Next steps\" to Getting Started guide", "description": "Follow-up to https://gitlab.com/meltano/meltano/-/merge_requests/1828\n\nAdd next steps regarding:\n- [x] Transform data for analysis\n- [x] Schedule pipelines to run on an interval\n- [x] Deploy your pipelines in production\n\nAlso consider:\n- [x] Suggest initializing Git repo inside project directory\n- [x] List `meltano.yml` examples, or suggest that user look there\n- [ ] Add a new `getting_started_guide` CI job like `homepage_sample_code`, to ensure the examples keep working: https://gitlab.com/meltano/meltano/-/issues/2311", "state": "closed", "created_at": "2020-08-26T18:01:32.067000Z", "updated_at": "2020-08-26T23:13:51.384000Z", "closed_at": "2020-08-26T23:13:51.311000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2310", "weight": null, "has_tasks": true, "task_status": "5 of 6 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70285970, "iid": 2309, "project_id": 7603319, "title": "Pretty print `meltano schedule list --format=json` output", "description": "", "state": "closed", "created_at": "2020-08-25T19:58:44.791000Z", "updated_at": "2020-08-25T20:22:44.369000Z", "closed_at": "2020-08-25T20:22:44.330000Z", "labels": ["CLI", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2309", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70280554, "iid": 2308, "project_id": 7603319, "title": "Retry connections to database used for internal data", "description": "### Problem to solve\nWe need to retry the connection to the database used for internal storage so that Meltano doesn't fail to start due to network interruptions or laggy database startup when using an external database as recommended by the production setup guide.\n\n### Target audience\nPeople who run Meltano in production.\n\n### Further details\nThere should probably be two ENV settings to allow the end user to configure the number of retries and the timeout between those retries.\n\n### What does success look like, and how can we measure that?\n1. The Meltano application can be started before the database without immediately failing and it successfully connects after retrying once the database is online.\n2. Meltano should also attempt to reconnect to the database whenever the connection is lost and continue operating once it has reconnected.\n3. Meltano uses the ENV configuration for maximum number of retries and fails with an error if they are exceeded.\n4. Meltano uses the ENV configuration for timeout to space out its attempts to reconnect.\n5. There are included defaults for number of retries and timeout so that end users don't need to configure them and Meltano will operate if those settings are missing from the ENV. \n\n### Links / references\nRelated to this [MR](https://gitlab.com/meltano/files-docker-compose/-/merge_requests/2) for use in a docker environment.\n\nRelevant recommendation from the docker startup order [documentation](https://docs.docker.com/compose/startup-order/)\n> To handle this, design your application to attempt to re-establish a connection to the database after a failure. If the application retries the connection, it can eventually connect to the database.\n>\n> The best solution is to perform this check in your application code, both at startup and whenever a connection is lost for any reason.", "state": "closed", "created_at": "2020-08-25T17:14:52.284000Z", "updated_at": "2020-12-31T01:04:56.260000Z", "closed_at": "2020-12-31T01:04:56.189000Z", "labels": ["Accepting Merge Requests", "feature requests", "flow::Review"], "assignees": [7359893], "user_notes_count": 14, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2308", "weight": null, "has_tasks": false, "author_id": 6382744, "assignee_id": 7359893, "closed_by_id": 87854, "milestone_id": 1751467, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70243443, "iid": 2307, "project_id": 7603319, "title": "CSRF error (Chrome) when running Meltano UI with authentication enabled but without HTTPS", "description": "When Meltano is run locally and `MELTANO_UI_AUTHENTICATION=true`, attempts to log in fail and the log messsage `The CSRF tokens do not match` is output in the console. This issue affects Chrome in particular - it could not be reproduced in Firefox.\n\nAs @DouweM helpfully pointed out on our call earlier, if you look at the Network tab in the Chrome inspector, you can see under Set-Cookie that an attempt to set a session cookie is made, but there's a warning as it expects the `Secure` attribute to be set (but in this case it isn't, since the Meltano UI is running at localhost:5000).\n\nEven though this was running locally, I had the environment set as the default (production). Looking at https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/api/app.py#L52 shows that this forces `SESSION_COOKIE_SECURE` to be set to `True` (https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/api/config.py#L102)\n\nI stumbled across this older merge request: https://gitlab.com/meltano/meltano/-/merge_requests/341 which says:\n\n> To enable authentication, you must run `meltano ui` using the `FLASK_ENV=production`. When run in `development`, authentication will be disabled.\n\nBy setting `FLASK_ENV=development` the issue is resolved.", "state": "closed", "created_at": "2020-08-25T01:32:47.595000Z", "updated_at": "2020-11-12T19:30:13.798000Z", "closed_at": "2020-11-12T19:30:13.727000Z", "labels": ["Accepting Merge Requests", "UI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2307", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1667058, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70204263, "iid": 2306, "project_id": 7603319, "title": "Add opportunity to store Pipelines data in the database", "description": "### Problem to solve\n\nCurrently, if the project is deployed as a docker container - the user can not CRUD pipelines. Basically he's not able to do anything with the pipeline, but to start it. The cause of that issue is that containerized project is being run in read-only mode. It's possible to turn that setting off, and allow the user to work with pipelines, but all changes will not survive a server restart or container update - as these are not stored in persistent storage like DB or external file storage.\n\n### Target audience\n\nThe users of Meltano UI.\n\n\n### Further details\n(Include use cases, benefits, and/or goals)\n\n\n### Proposal\n\nTo store pipeline configuration details in external DB alongside storing them in meltano.yml file, with the ones in DB taking precedence.\n\n\n### What does success look like, and how can we measure that?\n\nWhen we deploy containerized version of Meltano, the user can make changes into pipeline configuration. If we do a server restart, or update meltano version and deploy new container - user-made changes must still be there.", "state": "opened", "created_at": "2020-08-24T09:21:04.502000Z", "updated_at": "2020-08-24T23:32:38.651000Z", "closed_at": null, "labels": ["Orchestrate", "UI", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2306", "weight": null, "has_tasks": false, "author_id": 6175840, "assignee_id": null, "closed_by_id": null, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70126917, "iid": 2305, "project_id": 7603319, "title": "Make capitalization of docs sidebar headings consistent", "description": "", "state": "closed", "created_at": "2020-08-21T19:38:30.352000Z", "updated_at": "2020-08-27T17:45:48.915000Z", "closed_at": "2020-08-27T17:45:48.870000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2305", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70126916, "iid": 2304, "project_id": 7603319, "title": "Automatically check for dead links in docs", "description": "", "state": "opened", "created_at": "2020-08-21T19:38:28.299000Z", "updated_at": "2021-02-15T22:33:29.775000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2304", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70126913, "iid": 2303, "project_id": 7603319, "title": "Link all `meltano ...` CLI code spans to relevant CLI docs", "description": "", "state": "opened", "created_at": "2020-08-21T19:38:25.595000Z", "updated_at": "2020-08-28T23:09:54.588000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2303", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70126911, "iid": 2302, "project_id": 7603319, "title": "Increase homepage content width on mobile to match docs content width", "description": "", "state": "closed", "created_at": "2020-08-21T19:38:23.472000Z", "updated_at": "2020-08-27T17:15:15.890000Z", "closed_at": "2020-08-27T17:15:15.844000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2302", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70124985, "iid": 2301, "project_id": 7603319, "title": "Add `meltano run [<plugin>...]` to run arbitrary plugins in a pipeline", "description": "As in:\n\n- `meltano elt <extractor> <loader> [--transform=skip]` -> `meltano run <extractor> <loader>`, e.g. `meltano run tap-foo target-bar`\n- `meltano elt <extractor> <loader> --transform=run` -> `meltano run <extractor> <loader> <transformer>`, e.g. `meltano run tap-foo target-bar dbt`\n- `meltano elt <extractor> <loader> --transform=only` -> `meltano run <transformer> --with <extractor> --with <loader>`, e.g. `meltano run dbt --with tap-foo target-bar` (see https://gitlab.com/meltano/meltano/-/issues/2546)\n\nAnd instead of:\n\n```yaml\nschedules:\n- name: gitlab-to-jsonl\n  extractor: tap-gitlab\n  loader: target-jsonl\n  transform: run\n  interval: '@hourly'\n```\n\nWe get:\n\n```yml\n- name: gitlab-to-jsonl\n  interval: '@hourly'\n  pipeline:\n  - tap-gitlab\n  - target-jsonl\n  - dbt\n```", "state": "opened", "created_at": "2020-08-21T18:40:56.781000Z", "updated_at": "2021-03-08T16:39:29.907000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2301", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70124963, "iid": 2300, "project_id": 7603319, "title": "Allow extractor Singer messages to be transformed using Python before passing them to loader (ETL)", "description": "We could support [`transformer` plugins](https://meltano.com/docs/plugins.html#transformers) other than `dbt`, that would follow extraction rather than loading, and would transform an extractor's output stream of Singer messages (`SCHEMA`, `RECORD`, etc), before they're streamed into the loader.\n\nThe two types of transformers could be distinguished using an extra, e.g. `type: {etl,elt}` or `{follows,acts_on,transforms}: {extractor,loader}`\n\nWe could support both pip packages, and local executable files, using either the `pip_url` or `executable` plugin setting.", "state": "opened", "created_at": "2020-08-21T18:39:37.722000Z", "updated_at": "2021-03-08T16:39:26.818000Z", "closed_at": null, "labels": ["Extract", "Transform", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2300", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70124790, "iid": 2299, "project_id": 7603319, "title": "Allow extractor entity/attribute (stream/property)-level transformation rules to be defined in `meltano.yml`", "description": "Inspired by https://www.dropbase.io/ and our [existing extractor extras](https://meltano.com/docs/plugins.html#metadata-extra), I'm imagining something like:\n\n```yaml\nextractors:\n- name: tap-example\n  # ...\n  transform:\n    <entity>:\n      <function>: <args>\n      <attribute>:\n        <function>: <args>\n```\n\nSince these transformations would act on an extractor's output: a stream of Singer `SCHEMA` and `RECORD` messages, we could relatively easily support functions for:\n- renaming (prefixing, suffixing) entity (stream, table) or attribute (property, column) names\n- dropping entities or attributes, in cases where a tap doesn't support discovery mode and entity selection\n- adding attributes with predefined or dynamic values, like PipelineWise's metadata columns: https://transferwise.github.io/pipelinewise/user_guide/metadata_columns.html\n- filtering records based on one or more attribute values, keeping only those that do (or don't!) match (`drop_if`, `drop_unless`?)\n- replacing text in attribute values\n- replacing empty strings with nulls\n- replacing nulls with a string\n- changing attribute types and casting values, which can go beyond overriding the JSON schema using the [`schema` extra](https://meltano.com/docs/plugins.html#schema-extra)\n\nFunctions could take arguments of any type: a simple string, an array of values, or an object with additional keys. If a function doesn't take any attribute (like `drop`), it could just take a `true` boolean.\n\nSince functions could have object arguments, Meltano would not immediately be able to distinguish between `{entity: {attribute: {function: scalar_value}}}` and `{entity: {function: {nested_key: nested_value}}}`, where the key nested under an entity identifier could either be an attribute identifier or a function name. We don't have this issue with [`metadata`](https://meltano.com/docs/plugins.html#metadata-extra) and [`schema`](https://meltano.com/docs/plugins.html#schema-extra) extras, because metadata values cannot (so far) be objects, and since schema info can only be specified for attributes, not entities as a whole. Perhaps we can add a special `_` or `_self` or `_entity` key at the attribute level to nest entity-level transformation functions under, in cases where they need object values.", "state": "opened", "created_at": "2020-08-21T18:32:43.092000Z", "updated_at": "2021-03-08T16:39:28.165000Z", "closed_at": null, "labels": ["Extract", "Transform", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2299", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1905065, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70124058, "iid": 2298, "project_id": 7603319, "title": "Let extractor and profile configuration to be managed from \"create/edit pipeline\" modal in UI", "description": "We could allow a configuration profile (https://gitlab.com/groups/meltano/-/epics/51) to be explicitly selected, and/or we could default to one named after the pipeline.", "state": "opened", "created_at": "2020-08-21T18:08:49.998000Z", "updated_at": "2020-08-21T18:08:50.160000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2298", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70123888, "iid": 2297, "project_id": 7603319, "title": "Consistently use dashes in CLI flags rather than underscores", "description": "Culprits:\n- `meltano init` `--no_usage_stats`\n- `meltano elt` and `meltano schedule` `--job_id`\n- `meltano upgrade` `--pip_url`", "state": "opened", "created_at": "2020-08-21T18:02:10.615000Z", "updated_at": "2020-08-21T23:28:18.447000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2297", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70123673, "iid": 2296, "project_id": 7603319, "title": "Have `meltano config plugin@profile set ...` automatically create profile if it doesn't exist yet", "description": "Even if the profile YAML would be empty, and we only store a value in dotenv: the profile needs to exist in YAML for the env vars to be picked up.", "state": "closed", "created_at": "2020-08-21T17:54:48.546000Z", "updated_at": "2020-11-13T19:04:28.360000Z", "closed_at": "2020-11-13T19:04:28.237000Z", "labels": ["Accepting Merge Requests", "Configuration"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2296", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70123642, "iid": 2295, "project_id": 7603319, "title": "Consider having \"default\" profile config values serve as defaults for non-default profiles", "description": "This allows us to easily set top-level config that is inherited by all profiles:\n\n```yaml\nextractors:\n- name: tap-example\n  config:\n    foo: bar\n  bar: baz\n  profiles:\n  - name: custom_profile\n    config:\n      qux: foo\n```\n\nThe config for `tap-example@custom_profile` would be `{foo: \"bar\", _bar: \"baz\", qux: \"foo\"}`", "state": "closed", "created_at": "2020-08-21T17:53:39.123000Z", "updated_at": "2020-11-13T19:04:30.810000Z", "closed_at": "2020-11-13T19:04:30.675000Z", "labels": ["Accepting Merge Requests", "Configuration"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2295", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70123582, "iid": 2294, "project_id": 7603319, "title": "Include profile name in env vars used when writing to `.env`", "description": "If we don't, `meltano config plugin@profile set --store=dotenv foo bar` would set `PLUGIN_FOO` and override the value for all profiles, instead of just the targeted one.\n\nThe format could be `<NAMESPACE>__<PROFILE>__<SETTING>`", "state": "closed", "created_at": "2020-08-21T17:50:59.869000Z", "updated_at": "2020-11-13T19:04:32.740000Z", "closed_at": "2020-11-13T19:04:32.594000Z", "labels": ["Accepting Merge Requests", "Configuration"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2294", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70123214, "iid": 2293, "project_id": 7603319, "title": "Allow extractor metadata to be specified in UI", "description": "Once we have https://gitlab.com/meltano/meltano/-/issues/2230, we could also add a UI for the [extractor `metadata` extra](https://meltano.com/docs/plugins.html#metadata-extra), similar to https://gitlab.com/meltano/meltano/-/issues/2002.", "state": "opened", "created_at": "2020-08-21T17:38:12.027000Z", "updated_at": "2020-08-21T17:38:12.179000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2293", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70123195, "iid": 2292, "project_id": 7603319, "title": "Allow extractor schema overrides to be specified in UI", "description": "Once we have https://gitlab.com/meltano/meltano/-/issues/2229, we could also add a UI for the [extractor `schema` extra](https://meltano.com/docs/plugins.html#schema-extra), similar to https://gitlab.com/meltano/meltano/-/issues/2002.", "state": "opened", "created_at": "2020-08-21T17:37:26.924000Z", "updated_at": "2020-08-21T17:38:06.181000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "UI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2292", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70122963, "iid": 2291, "project_id": 7603319, "title": "Add `--catalog` flag to `meltano elt` to allow catalog to be provided manually", "description": "", "state": "closed", "created_at": "2020-08-21T17:29:20.557000Z", "updated_at": "2020-09-17T18:32:12.700000Z", "closed_at": "2020-09-17T18:32:12.571000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2291", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70122957, "iid": 2290, "project_id": 7603319, "title": "Add `meltano catalog <extractor>` CLI to view discovered and modified extractor catalog", "description": "This will make it easier to debug issues with catalogs and the `select`, `metadata`, and `schema` extractor extras, which currently requires you to run `meltano --log-level=debug elt ...` to get the path of the file passed to the tap using `--catalog` or `--properties`.\n\nTogether with https://gitlab.com/meltano/meltano/-/issues/2291, this will also allow people to make manually changes to the generated catalogs, while developing a new tap, for example.", "state": "closed", "created_at": "2020-08-21T17:29:05.746000Z", "updated_at": "2020-09-16T23:15:40.530000Z", "closed_at": "2020-09-16T23:15:40.383000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::To Do"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2290", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70122926, "iid": 2289, "project_id": 7603319, "title": "Add `--state` flag to `meltano elt` to allow state to be provided manually", "description": "", "state": "closed", "created_at": "2020-08-21T17:27:33.686000Z", "updated_at": "2020-09-17T20:21:31.037000Z", "closed_at": "2020-09-17T20:21:29.691000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Doing"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2289", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70122893, "iid": 2288, "project_id": 7603319, "title": "Add `meltano state <job_id>` CLI to view pipeline state", "description": "This will make it easier to debug issues with state, which currently requires you to run `meltano --log-level=debug elt ...` to get the path of the file passed to the tap using `--state`.\n\nTogether with https://gitlab.com/meltano/meltano/-/issues/2288, this will also allow people to make manually changes to state, while developing a new tap, for example.", "state": "closed", "created_at": "2020-08-21T17:26:28.218000Z", "updated_at": "2020-09-16T23:15:42.649000Z", "closed_at": "2020-09-16T23:15:42.535000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::To Do"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2288", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70122166, "iid": 2287, "project_id": 7603319, "title": "Turn plugin `pip_url` into plugin extra so that transforms can use a different key for dbt package URLs", "description": "[Transforms](https://meltano.com/docs/plugins.html#transforms) are not pip packages, so them having a `pip_url` makes little sense. \n\nInstead, we should allow dbt transform plugins to point at dbt packages on DbtHub, a Git repo, or a local directory: https://docs.getdbt.com/docs/building-a-dbt-project/package-management/#git-packages.\n\nThis will also allow us to add a `docker_image` key as an alternative to `pip_url`: https://gitlab.com/meltano/meltano/-/issues/2205\n\nWe'll probably want to mark this extra setting as `protected: true`, so that its value cannot be overridden through the UI, which would potentially enable arbitrary code execution.", "state": "opened", "created_at": "2020-08-21T17:00:57.410000Z", "updated_at": "2020-12-01T18:03:27.627000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Transform"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2287", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70122078, "iid": 2286, "project_id": 7603319, "title": "Turn plugin `capabilities` into extractor extra", "description": "Capabilities are only available on extractors, so instead of an option on all plugins, this should be an extractor `capabilities` extra instead, with a default value of `[]`.", "state": "closed", "created_at": "2020-08-21T16:58:15.720000Z", "updated_at": "2020-11-16T15:51:32.614000Z", "closed_at": "2020-11-16T15:51:32.569000Z", "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2286", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70039477, "iid": 2285, "project_id": 7603319, "title": "Add new transform extra `package_name` to use in `dbt_package.yml` and dbt `--models` instead of namespace", "description": "Part of untangling the mess described in https://gitlab.com/meltano/meltano/-/issues/2208#note_388529270:\n\n>>>\nThe inconsistent `namespace`s are an unfortunate consequence of the different roles that `namespace` has come to play in Meltano over time, and the different directions they pull us in:\n\n1. transform `namespace`: model name to be stored in `dbt_project.yml`, requiring `namespace` to match dbt model name\n   * https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/transform_add_service.py#L57\n1. extractor `namespace`: default value for `dbt`'s `models` setting, requiring `namespace` to match dbt model name, as in points 2 and 7\n   * https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L739\n>>>\n\n---\n\nThe transform `package_name` extra would be set to `$MELTANO_TRANSFORM_NAMESPACE` by default.\n\nThis will enable us to change the default value of the dbt `models` setting from `$MELTANO_EXTRACTOR_NAMESPACE my_meltano_project` to `$MELTANO_TRANSFORM__PACKAGE_NAME my_meltano_project`.", "state": "closed", "created_at": "2020-08-19T23:08:35.421000Z", "updated_at": "2020-09-15T15:04:47.802000Z", "closed_at": "2020-09-15T15:04:47.741000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2285", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70039437, "iid": 2284, "project_id": 7603319, "title": "Add new loader extra `dialect` to use as default dbt `target` and Meltano UI SQL dialect instead of namespace", "description": "Part of untangling the mess described in https://gitlab.com/meltano/meltano/-/issues/2208#note_388529270:\n\n>>>\nThe inconsistent `namespace`s are an unfortunate consequence of the different roles that `namespace` has come to play in Meltano over time, and the different directions they pull us in:\n\n1. loader `namespace`: SQL dialect to use in Meltano UI, requiring `namespace` to be `postgres`, `snowflake`, or `sqlite`\n   * https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/connection_service.py#L21\n1. loader `namespace`: default value for `dbt`'s `target` setting, requiring `namespace` to be either `postgres` or `snowflake`, since those are the two targets that exist in https://gitlab.com/meltano/files-dbt/-/blob/master/bundle/transform/profile/profiles.yml\n   * https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L730\n>>>\n\n---\n\nThe loader `dialect` extra of `target-postgres` would be set to `postgres` by default.\n\nThis will enable us to change the default value of the dbt `target` setting from `$MELTANO_LOADER_NAMESPACE` to `$MELTANO_LOAD__DIALECT`.", "state": "closed", "created_at": "2020-08-19T23:06:28.357000Z", "updated_at": "2020-09-15T15:04:48.278000Z", "closed_at": "2020-09-15T15:04:48.229000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2284", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70039399, "iid": 2283, "project_id": 7603319, "title": "Add new loader extra `target_schema` to use as default dbt `source_schema` instead of loader `schema`", "description": "Part of untangling the mess described in https://gitlab.com/meltano/meltano/-/issues/2208#note_388529270:\n\n>>>\nThe inconsistent `namespace`s are an unfortunate consequence of the different roles that `namespace` has come to play in Meltano over time, and the different directions they pull us in:\n\n1. extractor `namespace`: default value for `dbt`'s `source_schema` setting, through point 3's `schema` setting:\n   * https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L733\n>>>\n\n---\n\nThe loader `target_schema` extra of `target-postgres` would be set to `$PG_SCHEMA` by default.\n\nThis will enable us to change the default value of the dbt `source_schema` setting from `$MELTANO_LOAD_SCHEMA` to `$MELTANO_LOAD__TARGET_SCHEMA`.", "state": "closed", "created_at": "2020-08-19T23:02:04.345000Z", "updated_at": "2020-09-15T15:04:48.507000Z", "closed_at": "2020-09-15T15:04:48.404000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2283", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70039362, "iid": 2282, "project_id": 7603319, "title": "Add new extractor extra `preferred_schema` to use as default loader `schema` instead of namespace", "description": "Part of untangling the mess described in https://gitlab.com/meltano/meltano/-/issues/2208#note_388529270:\n\n>>>\nThe inconsistent `namespace`s are an unfortunate consequence of the different roles that `namespace` has come to play in Meltano over time, and the different directions they pull us in:\n\n1. extractor `namespace`: default value for the `schema` setting when used with loader `target-postgres` or `target-snowflake`, implying that `namespace`s should be unique among extractors\n   * https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L628\n   * https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L672 (this works because of https://meltano.com/docs/command-line-interface.html#pipeline-environment-variables)\n>>>\n\n---\n\nThe extractor `preferred_schema` extra would be set to `$MELTANO_EXTRACTOR_NAMESPACE` by default.\n\nThis will enable us to change the default value of the `target-postgres` and `target-snowflake` `schema` setting from `$MELTANO_EXTRACTOR_NAMESPACE` to `$MELTANO_EXTRACT__PREFERRED_SCHEMA`.", "state": "closed", "created_at": "2020-08-19T22:58:44.309000Z", "updated_at": "2020-09-15T15:04:48.626000Z", "closed_at": "2020-09-15T15:04:48.576000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2282", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70039329, "iid": 2281, "project_id": 7603319, "title": "Allow plugin extra (default) values to reference plugin name, namespace, profile", "description": "We can use the same `MELTANO_EXTRACTOR_NAME` (etc) variables exposed as [pipeline environment variables](https://meltano.com/docs/command-line-interface.html#pipeline-environment-variables).\n\nThis will allow us to add an extractor `preferred_schema` extra with a `$MELTANO_EXTRACTOR_NAMESPACE` default value.", "state": "closed", "created_at": "2020-08-19T22:55:16.103000Z", "updated_at": "2020-09-10T17:13:44.288000Z", "closed_at": "2020-09-10T17:13:44.239000Z", "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2281", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70039325, "iid": 2280, "project_id": 7603319, "title": "Allow plugin extra (default) values to reference plugin settings using env vars", "description": "This will allow us to add a loader `target_schema` extra and set it to `$PG_SCHEMA` for `target-postgres`.", "state": "closed", "created_at": "2020-08-19T22:54:40.403000Z", "updated_at": "2020-09-10T18:04:34.363000Z", "closed_at": "2020-09-10T18:04:34.319000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2280", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70038781, "iid": 2279, "project_id": 7603319, "title": "Populate primary env var and aliases when invoking plugin or expanding env vars", "description": "As suggested in https://gitlab.com/meltano/meltano/-/issues/2208#note_388529270:\n\n> Perhaps the best option would be to have Meltano write to both the `env` *and* `env_aliases` keys, so that we cover all bases for backward compatibility, but can still recommend the simple `<NAMESPACE>_<NAME>` vars, and prefer those when writing to `.env`.", "state": "closed", "created_at": "2020-08-19T22:20:06.483000Z", "updated_at": "2020-09-10T16:33:28.984000Z", "closed_at": "2020-09-10T16:33:28.940000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2279", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70038767, "iid": 2278, "project_id": 7603319, "title": "Read setting values from <PLUGIN_NAME>_<SETTING_NAME> env var, taking precedence over <PLUGIN_NAMESPACE>_<SETTING_NAME>", "description": "As suggested in https://gitlab.com/meltano/meltano/-/issues/2208#note_388529270:\n\n>>>\nAt that point, the distinction between `env` and `env_aliases` is lost, and we could *always* prefer to read and write from `<NAMESPACE>_<NAME>`, treating `env` as just another alias.\n\nTo connect this with the \"at which point we would not need the `namespace` at all anymore, and can instead just use the underscorized `name` directly\" conclusion above, we could _always_ prefer the `<PLUGIN_NAME>_<SETTING_NAME>` env var for reading and writing, and treat all of `<NAMESPACE>_<SETTING_NAME>`, `env`, and `env_aliases` as aliases. That, we could even implement today without having to untangle the whole `namespace` mess, although that's obviously something we should do at some point as well.\n>>>", "state": "closed", "created_at": "2020-08-19T22:19:25.688000Z", "updated_at": "2020-09-10T21:41:47.262000Z", "closed_at": "2020-09-10T21:41:47.213000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2278", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 70003476, "iid": 2277, "project_id": 7603319, "title": "New Extractor Request for Microsoft Ads (Bing)", "description": "### Problem to solve\nConnect to Bing Ads to extract marketing data from there via the UI rather than through cumbersome CLI installation of https://github.com/singer-io/tap-bing-ads\n\n\n### Target audience\n- Marketers who aren't comfortable with CLI\n- Data Analysts who have trouble getting the Bing Tap to work via CLI because of a lack of documentation and complex OAuth\n- All other standard Meltano personas\n\n\n### Further details\nSame use case and benefits as all other ads extractors. Since Bing's internal data structure is very similar to Google Ads also the use cases are nearly the same.\n\n\n### Proposal\nAdd to the Extractor UI\n\nIdeally also simplify getting MS OAuth through the Meltano UI just like it was done for Facebook. That OAuth helper tool was extremely helpful for Facebook and Microsoft's OAuth for Bing is even harder to accomplish than Facebook's in the first place so that would help a lot here...\n\n\n### What does success look like, and how can we measure that?\nBusiness Success: Being able to extract data from Bing Ads into a loader without having to manually do Oauth and/or any json configs.\n\nAcceptance Criteria\n- Bing Ads Extractor in Extractor UI list\n- config Fields required for Bing tap ready to be filled in UI\n- IF NEEDED (I don't know since I haven't gotten bing ads tap to work yet): Config screen for extraction options\n- (OAuth Helper tool getting the right scopes and refresh token for Bing)\n\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n- https://github.com/singer-io/tap-bing-ads", "state": "closed", "created_at": "2020-08-19T10:59:12.323000Z", "updated_at": "2020-09-03T18:58:12.738000Z", "closed_at": "2020-09-03T18:58:12.689000Z", "labels": ["Accepting Merge Requests", "Extract", "flow::Doing"], "assignees": [87854], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2277", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 3188450, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69979129, "iid": 2276, "project_id": 7603319, "title": "Add dark mode (prefers-color-scheme: dark) to documentation", "description": "", "state": "opened", "created_at": "2020-08-18T21:01:44.922000Z", "updated_at": "2020-08-18T21:04:36.458000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation", "flow::Doing"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2276", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69978294, "iid": 2275, "project_id": 7603319, "title": "Opening a deep link and navigating back to homepage using logo doesn't always work", "description": "Likely to be a side-effect of https://gitlab.com/meltano/meltano/-/merge_requests/1811.\n\n## Steps to reproduce\n\n1. Open any of the following URLs:\n   - https://meltano.com/docs/getting-started.html\n   - https://meltano.com/docs/plugins.html\n   - https://meltano.com/docs/installation.html\n   - https://meltano.com/docs/plugin-management.html\n   - https://meltano.com/docs/configuration.html\n   - https://meltano.com/docs/transforms.html\n   - https://meltano.com/docs/orchestration.html\n   - https://meltano.com/docs/containerization.html\n   - https://meltano.com/docs/command-line-interface.html\n   - https://meltano.com/docs/settings.html\n   - https://meltano.com/docs/architecture.html\n   - https://meltano.com/docs/contributor-guide.html\n3. Click the \"Meltano\" logo in the nav bar\n\n## Expected behavior\n\nHome page shows up\n\n## Actual behavior\n\nSidebar disappears, while the page content stays frozen.\n\n---\n\nFor some reason, everything works fine on these URLs:\n\n- https://meltano.com/docs/\n- https://meltano.com/tutorials/\n- https://meltano.com/docs/project.html\n- https://meltano.com/docs/integration.html\n- https://meltano.com/docs/production.html\n- https://meltano.com/docs/analysis.html\n- https://meltano.com/docs/getting-help.html\n- https://meltano.com/docs/responsible-disclosure.html\n- https://meltano.com/handbook/", "state": "closed", "created_at": "2020-08-18T20:30:14.630000Z", "updated_at": "2020-08-19T21:11:22.733000Z", "closed_at": "2020-08-19T21:11:22.684000Z", "labels": ["Documentation", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 3, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2275", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69935371, "iid": 2274, "project_id": 7603319, "title": "Use \"Meltano: open source ELT\" as tag line", "description": "Instead of \"Open source data pipelines\"", "state": "closed", "created_at": "2020-08-17T23:27:38.651000Z", "updated_at": "2020-08-18T00:11:58.616000Z", "closed_at": "2020-08-18T00:11:58.570000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2274", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69933096, "iid": 2273, "project_id": 7603319, "title": "Add label to logo on mobile", "description": "", "state": "closed", "created_at": "2020-08-17T21:17:43.263000Z", "updated_at": "2020-08-17T23:40:30.770000Z", "closed_at": "2020-08-17T23:40:30.699000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2273", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69933095, "iid": 2272, "project_id": 7603319, "title": "Update blog navigation bar to match website", "description": "", "state": "closed", "created_at": "2020-08-17T21:17:41.620000Z", "updated_at": "2020-08-17T23:22:37.015000Z", "closed_at": "2020-08-17T23:22:36.984000Z", "labels": ["Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2272", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69933094, "iid": 2271, "project_id": 7603319, "title": "Add Slack to navigation bar", "description": "", "state": "closed", "created_at": "2020-08-17T21:17:40.495000Z", "updated_at": "2020-08-17T23:40:31.079000Z", "closed_at": "2020-08-17T23:40:30.911000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2271", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69933092, "iid": 2270, "project_id": 7603319, "title": "Link to Getting Help from navigation bar", "description": "", "state": "closed", "created_at": "2020-08-17T21:17:39.363000Z", "updated_at": "2020-08-17T23:40:31.126000Z", "closed_at": "2020-08-17T23:40:31.071000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2270", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69932946, "iid": 2269, "project_id": 7603319, "title": "Use accent color for code snippets that are also links", "description": "Right now, `foo` and [`foo`](#) are indistinguishable in our docs.", "state": "closed", "created_at": "2020-08-17T21:08:03.745000Z", "updated_at": "2020-08-17T21:36:55.535000Z", "closed_at": "2020-08-17T21:36:55.413000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2269", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69849639, "iid": 2268, "project_id": 7603319, "title": "`meltano discover` and `/api/v1/plugins/all` sometimes omit custom plugins", "description": "Both features use `groupby(discovery_service.plugins(), key=lambda p: p.type)`, which (per [the docs](https://docs.python.org/3.6/library/itertools.html#itertools.groupby)), requires the input iterable to already be sorted on the same key function, which is not the case for `discovery_service.plugins()`, which lists all custom plugins ahead of discovered plugins, resulting in the a mix of types.", "state": "closed", "created_at": "2020-08-14T17:20:19.878000Z", "updated_at": "2020-08-17T21:05:45.925000Z", "closed_at": "2020-08-17T21:05:45.867000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2268", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69818506, "iid": 2267, "project_id": 7603319, "title": "Use latest version of VuePress", "description": "", "state": "closed", "created_at": "2020-08-13T21:17:24.954000Z", "updated_at": "2020-08-14T23:47:30.135000Z", "closed_at": "2020-08-14T23:47:30.092000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2267", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69810711, "iid": 2266, "project_id": 7603319, "title": "Auto-generate DBT sources from Extractor/Loader schema", "description": "### Problem to solve\nWhen a user first configures DBT in a Meltano project, there is some boilerplate work required to get the DBT project set up correctly. Some of this config could be generated by Meltano, so that more things \"just work\" without requiring manual config.\n\n### Target audience\nFirst-time Meltano user.\n\n### Further details\n\nWhen setting up the DBT Transformer, an initial `dbt_project.yml` file is generated which links up the skeleton project structure (e.g. specifying `source-paths`), but currently the configuration of the DBT project is left largely to the user. One useful step when setting up a DBT project is to define a `sources.yml` file that defines tables and columns for the source data, which can then be referenced elsewhere in the DBT models.\n\nhttps://docs.getdbt.com/docs/building-a-dbt-project/using-sources/\n\n\n### Proposal\n\nGiven that Meltano has the schemas in hand, it should be possible to generate a `sources.yml` file for the DBT project. For a new Meltano user with a large schema to import, this could save a lot of tedious work.\n\nOpen question: how to handle schema changes? Perhaps the autogeneration would be better as a manual job that generates in a well-known location, so that the operator can trigger an update, inspect the deltas, and then commit the new generated sources. Alternatively this could be generated dynamically on each run; there may be complications introduced by the dynamic approach, as DBT errors would be thrown any time something doesn't match.\n\nThis would mean you could write a new `mymodel.sql` like:\n\n```sql\nwith source as (\n    select * from {{ source(\"my-db\", \"existingmodel\") }}\n),\n\nmymodel as (\n  ...\n)\n\nselect * from mymodel\n```\n\n### What does success look like, and how can we measure that?\n\nUser can start a new Meltano project, extract a schema from their existing DB, and then write a DBT model referencing their existing schema without having to write any boilerplate.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\nPerhaps similar conceptually to https://gitlab.com/meltano/meltano/-/issues/2221 ?", "state": "opened", "created_at": "2020-08-13T16:15:52.816000Z", "updated_at": "2021-03-08T16:39:43.592000Z", "closed_at": null, "labels": ["Transform", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2266", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 783565, "assignee_id": null, "closed_by_id": null, "milestone_id": 1931841, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769773, "iid": 2265, "project_id": 7603319, "title": "Document `meltano elt` `job_id` option", "description": "While https://meltano.com/docs/command-line-interface.html#pipeline-state and the homepage refer to the Job ID, the importance of this option is not quite as explicitly stated in the ELT CLI docs as it could be.\n\n(This came up in Slack: https://meltano.slack.com/archives/CFG3C3C66/p1597184341453300)", "state": "closed", "created_at": "2020-08-12T16:17:23.555000Z", "updated_at": "2020-08-13T20:19:41.214000Z", "closed_at": "2020-08-13T20:19:41.114000Z", "labels": ["Documentation", "flow::Review"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2265", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769710, "iid": 2264, "project_id": 7603319, "title": "Rename \"Command Line Interface\" doc to \"`meltano` CLI reference\"", "description": "- [ ] Redirect command-line-interface.html to cli.html", "state": "closed", "created_at": "2020-08-12T16:15:27.287000Z", "updated_at": "2020-08-15T00:24:06.810000Z", "closed_at": "2020-08-15T00:24:06.729000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2264", "weight": null, "has_tasks": true, "task_status": "0 of 1 task completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769657, "iid": 2263, "project_id": 7603319, "title": "Move bulk of homepage \"Instantly containerizable and production-ready\" section to new \"Containerization\" doc", "description": "- [x] Simplify example code\n- [x] Move GitLab instructions to doc\n- [x] Leave at most 3 paragraphs and a button", "state": "closed", "created_at": "2020-08-12T16:13:57.581000Z", "updated_at": "2020-08-18T18:30:06.869000Z", "closed_at": "2020-08-18T18:30:06.811000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2263", "weight": null, "has_tasks": true, "task_status": "3 of 3 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769628, "iid": 2262, "project_id": 7603319, "title": "Add \"Meltano UI\" section to \"Orchestration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:13:10.077000Z", "updated_at": "2020-09-25T14:49:54.667000Z", "closed_at": "2020-09-25T14:49:54.530000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2262", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769623, "iid": 2261, "project_id": 7603319, "title": "Add new doc for `airflow` plugin and its settings", "description": "It should be made clear that all of Airflow's settings can be managed through `meltano config` and `meltano.yml`.\n\n(Parts of) https://meltano.com/docs/production.html#airflow-orchestrator should be moved here too.", "state": "opened", "created_at": "2020-08-12T16:13:00.636000Z", "updated_at": "2021-03-08T16:41:44.494000Z", "closed_at": null, "labels": ["Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2261", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769622, "iid": 2260, "project_id": 7603319, "title": "Make it clear that `meltano schedule` can be used without Airflow in \"Orchestration\" doc", "description": "", "state": "opened", "created_at": "2020-08-12T16:12:59.869000Z", "updated_at": "2021-03-08T16:44:49.973000Z", "closed_at": null, "labels": ["Documentation", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2260", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769594, "iid": 2259, "project_id": 7603319, "title": "Document how transforms are run in \"Data Transformation (T)\" doc", "description": "", "state": "opened", "created_at": "2020-08-12T16:12:16.248000Z", "updated_at": "2021-03-08T16:44:38.942000Z", "closed_at": null, "labels": ["Documentation", "flow::To Do"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2259", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769593, "iid": 2258, "project_id": 7603319, "title": "Add new doc for `dbt` plugin and its settings", "description": "Per [`discovery.yml`](https://gitlab.com/meltano/meltano/-/blob/d0784fc91126a3676df4fa8a833b2ff569982d75/src/meltano/core/bundle/discovery.yml#L1822):\n\n```yaml\n      - name: project_dir\n        value: $MELTANO_PROJECT_ROOT/transform\n      - name: profiles_dir\n        env: DBT_PROFILES_DIR\n        value: $MELTANO_PROJECT_ROOT/transform/profile\n      - name: target\n        value: $MELTANO_LOAD__DIALECT\n      - name: source_schema\n        value: $MELTANO_LOAD__TARGET_SCHEMA\n      - name: target_schema\n        value: analytics\n      - name: models\n        value: $MELTANO_TRANSFORM__PACKAGE_NAME $MELTANO_EXTRACTOR_NAMESPACE my_meltano_project\n```", "state": "opened", "created_at": "2020-08-12T16:12:15.298000Z", "updated_at": "2021-03-05T22:04:13.628000Z", "closed_at": null, "labels": ["Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2258", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1865740, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769592, "iid": 2257, "project_id": 7603319, "title": "Rename \"Transforms\" doc to \"Data Transformation (T)\"", "description": "", "state": "closed", "created_at": "2020-08-12T16:12:14.635000Z", "updated_at": "2020-08-21T19:36:46.180000Z", "closed_at": "2020-08-21T19:36:46.146000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2257", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769558, "iid": 2256, "project_id": 7603319, "title": "Move `meltano elt` non-CLI sections to \"Data Integration (EL)\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:11:20.278000Z", "updated_at": "2020-08-25T20:45:27.644000Z", "closed_at": "2020-08-25T20:45:27.562000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2256", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769551, "iid": 2255, "project_id": 7603319, "title": "Move homepage \"Selecting entities and attributes for extraction\" section to new \"Data Integration (EL)\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:11:10.068000Z", "updated_at": "2020-08-18T18:30:06.726000Z", "closed_at": "2020-08-18T18:30:06.641000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2255", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769518, "iid": 2254, "project_id": 7603319, "title": "Add \"Meltano UI\" section to \"Configuration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:10:13.217000Z", "updated_at": "2020-09-25T14:50:02.671000Z", "closed_at": "2020-09-25T14:50:02.616000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2254", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769516, "iid": 2253, "project_id": 7603319, "title": "Move `meltano config` \"Plugin extras\" section to \"Configuration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:10:10.675000Z", "updated_at": "2020-08-18T23:36:24.778000Z", "closed_at": "2020-08-18T23:36:24.724000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2253", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769515, "iid": 2252, "project_id": 7603319, "title": "Replace intro on \"Settings\" doc with link to \"Configuration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:10:10.065000Z", "updated_at": "2020-08-25T20:21:50.125000Z", "closed_at": "2020-08-25T20:21:50.085000Z", "labels": ["Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2252", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769514, "iid": 2251, "project_id": 7603319, "title": "Replace configuration layer description from `meltano config` doc with link to \"Configuration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:10:09.294000Z", "updated_at": "2020-08-18T18:30:06.343000Z", "closed_at": "2020-08-18T18:30:06.290000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2251", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769512, "iid": 2250, "project_id": 7603319, "title": "Move homepage \"Managing the configuration of your plugins\" section to new \"Configuration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:10:08.505000Z", "updated_at": "2020-08-18T18:30:06.683000Z", "closed_at": "2020-08-18T18:30:06.511000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2250", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769377, "iid": 2249, "project_id": 7603319, "title": "Add \"Meltano UI\" section to \"Plugin management\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:08:01.679000Z", "updated_at": "2020-09-25T14:46:22.648000Z", "closed_at": "2020-09-25T14:46:22.559000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2249", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1607483, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769376, "iid": 2248, "project_id": 7603319, "title": "Move `meltano add` \"Whenever you add a new plugin to a Meltano project...\" section to \"Plugin management\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:08:00.142000Z", "updated_at": "2020-08-25T20:45:27.805000Z", "closed_at": "2020-08-25T20:45:27.761000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2248", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769374, "iid": 2247, "project_id": 7603319, "title": "Move homepage \"Adding extractors and loaders to your project\" section to new \"Plugin management\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:07:59.256000Z", "updated_at": "2020-08-18T18:30:06.152000Z", "closed_at": "2020-08-18T18:30:06.047000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2247", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769301, "iid": 2246, "project_id": 7603319, "title": "Split \"Installation\" docs up into \"Pip/Local\" and \"Docker\" sections", "description": "", "state": "closed", "created_at": "2020-08-12T16:05:12.920000Z", "updated_at": "2020-08-26T21:21:28.189000Z", "closed_at": "2020-08-26T21:21:28.150000Z", "labels": ["Documentation", "flow::To Do"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2246", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769293, "iid": 2245, "project_id": 7603319, "title": "Move `meltano config` \"Plugin extra: foo\" sections to \"Plugins\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:04:48.476000Z", "updated_at": "2020-08-18T23:36:24.593000Z", "closed_at": "2020-08-18T23:36:24.536000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2245", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769288, "iid": 2244, "project_id": 7603319, "title": "Move `meltano add` \"Plugin-specific behavior\" section to \"Plugins\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:04:32.113000Z", "updated_at": "2020-08-18T23:36:24.403000Z", "closed_at": "2020-08-18T23:36:24.317000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2244", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769272, "iid": 2243, "project_id": 7603319, "title": "Add \"Plugins\" doc describing all plugin types", "description": "", "state": "closed", "created_at": "2020-08-12T16:04:18.052000Z", "updated_at": "2020-08-18T23:36:25.167000Z", "closed_at": "2020-08-18T23:36:24.977000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2243", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769216, "iid": 2242, "project_id": 7603319, "title": "Add \"Schedules\" section to \"Your Meltano project\" doc with link to \"Orchestration\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:02:11.091000Z", "updated_at": "2020-09-01T23:32:52.640000Z", "closed_at": "2020-09-01T23:32:52.601000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2242", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769208, "iid": 2241, "project_id": 7603319, "title": "Add \"Plugins\" section to \"Your Meltano project\" doc with link to \"Plugins\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:02:01.004000Z", "updated_at": "2020-09-01T23:32:52.791000Z", "closed_at": "2020-09-01T23:32:52.752000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2241", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769202, "iid": 2240, "project_id": 7603319, "title": "Move bulk of homepage \"Your Meltano project: your single source of truth\" section to new \"Your Meltano project\" doc", "description": "- [x] Move homepage \"You can initialize a new Meltano project...\" section to `meltano init` doc\n- [x] Simplify example code\n- [x] Don't repeat `meltano init` output\n- [x] Limit ourselves to 3 paragraphs at most", "state": "closed", "created_at": "2020-08-12T16:01:36.225000Z", "updated_at": "2020-08-18T18:30:07.055000Z", "closed_at": "2020-08-18T18:30:06.989000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2240", "weight": null, "has_tasks": true, "task_status": "4 of 4 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391215, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769170, "iid": 2239, "project_id": 7603319, "title": "Walk user through basic installation-to-ELT story in \"Getting Started\" doc", "description": "", "state": "closed", "created_at": "2020-08-12T16:00:25.258000Z", "updated_at": "2020-08-26T19:53:02.460000Z", "closed_at": "2020-08-26T19:53:02.416000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2239", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769163, "iid": 2238, "project_id": 7603319, "title": "Add Roadmap to Introduction doc", "description": "With links to milestone / issue boards and \"Accepting Merge Requests\"?", "state": "closed", "created_at": "2020-08-12T15:59:50.662000Z", "updated_at": "2020-08-28T23:28:15.740000Z", "closed_at": "2020-08-28T23:28:15.692000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2238", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769142, "iid": 2237, "project_id": 7603319, "title": "Remove \"Role Based Access Control\" doc for the time being", "description": "", "state": "closed", "created_at": "2020-08-12T15:59:06.599000Z", "updated_at": "2020-08-15T00:24:06.597000Z", "closed_at": "2020-08-15T00:24:06.545000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2237", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69769111, "iid": 2236, "project_id": 7603319, "title": "Split Documentation sidebar up into sections", "description": "Once the new pages described in this epic have been added, I imagine it looking something like this:\n\n```\n- What is Meltano?\n- Getting Started\n- Tutorials\n---\n- Your Meltano project\n- Plugins\n---\n- Installation\n- Plugin management\n- Configuration\n- Data Integration (EL)\n- Data Transformation (T)\n- Orchestration\n- Containerization\n- Deployment in Production\n- Analysis\n---\n- CLI reference\n- `meltano.yml` reference\n- Settings reference\n- Architecture\n---\n- Getting Help\n- Responsible Disclosure Policy\n- Contributor Guide\n- Team Handbook\n\n```", "state": "closed", "created_at": "2020-08-12T15:58:12.888000Z", "updated_at": "2020-08-15T00:24:07.330000Z", "closed_at": "2020-08-15T00:24:07.014000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2236", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69750716, "iid": 2235, "project_id": 7603319, "title": "Shared reports/dashboards return 401 Unauthorized when authentication is enabled", "description": "When `MELTANO_AUTHENTICATION` is true, accessing a Meltano instance requires authentication as expected. However, reports and dashboards shared using a generated share link are also inaccessible without authentication, despite the docs stating that \"anyone will be able to view the report or dashboard in question without needing to sign in to your Meltano instance\" (https://meltano.com/docs/analysis.html#install-meltano)", "state": "closed", "created_at": "2020-08-12T07:53:09.637000Z", "updated_at": "2020-09-03T17:07:32.401000Z", "closed_at": "2020-09-03T17:07:32.331000Z", "labels": ["Accepting Merge Requests", "UI", "bug", "flow::Review"], "assignees": [5042742], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2235", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": 5042742, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69740578, "iid": 2234, "project_id": 7603319, "title": "Automatically convert extractor `start_date` value to conform with RFC3339", "description": "Per https://github.com/singer-io/getting-started/blob/master/docs/CONFIG_AND_STATE.md#special-fields, start dates should conform to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) specification, which requires a timestamp, e.g. `2017-01-01T00:00:00Z`.\n\nThe UI date picker currently stores values without a timestamp: https://gitlab.com/meltano/meltano/-/issues/2233, and we used to recommend the same thing for `tap-gitlab`: https://gitlab.com/meltano/meltano/-/issues/2209\n\nSince the specification clearly states the value should be RFC3339-compliant, we could enforce this.", "state": "opened", "created_at": "2020-08-11T21:54:23.770000Z", "updated_at": "2021-03-08T16:40:08.411000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2234", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893434, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69740134, "iid": 2233, "project_id": 7603319, "title": "UI stores settings with `kind: date_iso8601`, e.g. `start_date`, as YYYY-MM-DD, without timestamp required by RFC3339", "description": "Per https://github.com/singer-io/getting-started/blob/master/docs/CONFIG_AND_STATE.md#special-fields, start dates should conform to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) specification, which requires a timestamp, e.g. `2017-01-01T00:00:00Z`.\n\nThe UI date picker currently stores values without a timestamp.", "state": "opened", "created_at": "2020-08-11T21:51:25.495000Z", "updated_at": "2020-08-11T21:54:24.205000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2233", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69739554, "iid": 2232, "project_id": 7603319, "title": "Don't expand env vars in settings shown in UI", "description": "`tap-postgres`'s `schema` setting is set to `$MELTANO_EXTRACTOR_NAMESPACE` by default, but shows up as empty in the UI since the env var does not exist there.\n\nWe should really not be expanding env vars in that form at all, since users shouldn't accidentally destroy the dynamic setting when they open the modal and save without realizing that they're overriding something.", "state": "opened", "created_at": "2020-08-11T21:47:24.715000Z", "updated_at": "2020-08-11T21:47:25.096000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2232", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69739001, "iid": 2231, "project_id": 7603319, "title": "Add `meltano orchestrate` to start current orchestrator", "description": "With Airflow, this would be equivalent to running `meltano invoke airflow scheduler`, but different (future) orchestrators would specify their own `run_args`.", "state": "opened", "created_at": "2020-08-11T21:43:13.976000Z", "updated_at": "2021-02-24T17:10:53.894000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Orchestrate", "feature requests"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2231", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69738759, "iid": 2230, "project_id": 7603319, "title": "Add `meltano metadata <extractor>` to view and manage metadata rules", "description": "This would make it easier to use the [extractor's `metadata` extra](https://meltano.com/docs/command-line-interface.html#extractor-extra-metadata) and view the currently configured rules and their effect on the catalog.\n\nCurrently, you'd need to use `meltano config --extras <plugin>` to view the value of the `_metadata` setting, and hope it has the desired effect.", "state": "opened", "created_at": "2020-08-11T21:41:44.751000Z", "updated_at": "2020-08-21T17:38:12.424000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2230", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69738755, "iid": 2229, "project_id": 7603319, "title": "Add `meltano schema <extractor>` to view and manage schema rules", "description": "This would make it easier to use the [extractor's `schema` extra](https://meltano.com/docs/command-line-interface.html#extractor-extra-schema) and view the currently configured rules and their effect on the catalog.\n\nCurrently, you'd need to use `meltano config --extras <plugin>` to view the value of the `_schema` setting, and hope it has the desired effect.", "state": "opened", "created_at": "2020-08-11T21:41:43.742000Z", "updated_at": "2020-08-21T17:37:27.646000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2229", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69738418, "iid": 2228, "project_id": 7603319, "title": "Add `meltano logs <job ID / schedule name>` to view a pipeline's most recent logs.", "description": "This would be the CLI equivalent to the \"Job Log\" modal that can already be found in the UI.\n\nSince we'd support all `job_id`s passed to `meltano elt`, this would work for schedules as well as one-off jobs.", "state": "opened", "created_at": "2020-08-11T21:39:20.427000Z", "updated_at": "2021-02-10T16:56:26.644000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2228", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69738168, "iid": 2227, "project_id": 7603319, "title": "Add `meltano schedule run <name>` to run a named schedule", "description": "This would be equivalent to running `meltano schedule list --format=json`, taking the desired schedule's `elt_args`, and running `meltano elt <elt_args>` with the configured `env`.", "state": "closed", "created_at": "2020-08-11T21:37:43.622000Z", "updated_at": "2021-01-25T23:21:53.618000Z", "closed_at": "2020-12-09T18:48:52.563000Z", "labels": ["Accepting Merge Requests", "CLI", "feature requests", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2227", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1714067, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69737987, "iid": 2226, "project_id": 7603319, "title": "List \"next run\" and \"last run\" in `meltano schedule list`, like in UI", "description": "", "state": "opened", "created_at": "2020-08-11T21:36:35.533000Z", "updated_at": "2020-08-11T21:36:35.533000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2226", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69737883, "iid": 2225, "project_id": 7603319, "title": "Add `meltano test` to test extractor settings", "description": "This feature would be analogous to the \"Test connection\" button that exists in the \"Extractor Configuration\" modal in the UI, which is currently implemented on the Orchestrations controller: https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/api/controllers/orchestrations.py#L407\n\nCurrently, only extractors are supported, but we could come up with a way to support loaders as well, at some point.", "state": "opened", "created_at": "2020-08-11T21:35:57.080000Z", "updated_at": "2020-08-11T21:36:02.258000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2225", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69737539, "iid": 2224, "project_id": 7603319, "title": "`meltano install` doesn't install new version of plugin when `pip_url` is changed but package version stayed the same", "description": "Right now, `meltano install` just runs `pip install <pip_url>`, which does not actually install the new package unless the version specified in `setup.py` has changed. \n\nThis is unexpected if a user wants to switch from the canonical `<pip_url>` to their own fork, since `meltano install` output will not give any indication that the plugin wasn't actually upgraded.\n\nWe can make `meltano install` smarter and detect `pip_url` changes (perhaps by storing the current pip_url in a file alongside the venv?), and/or we can add a `--reinstall` or `--upgrade` or `--force` flag to `meltano install` to ensure all taps are reinstalled. \n\nOr we can simply always pass pip's `--force-reinstall` flag: https://pip.pypa.io/en/stable/reference/pip_install/#cmdoption-force-reinstall", "state": "closed", "created_at": "2020-08-11T21:33:54.297000Z", "updated_at": "2021-02-25T20:35:16.542000Z", "closed_at": "2020-10-07T17:35:18.744000Z", "labels": ["Accepting Merge Requests", "CLI", "bug", "flow::Review"], "assignees": [87854, 2585766], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2224", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69734694, "iid": 2223, "project_id": 7603319, "title": "Clarify error message when `meltano invoke` or `meltano elt` attempts to execute a plugin that hasn't been installed yet", "description": "If a plugin has been added to the project, but is not actually installed into the `.meltano` directory (such as after cloning a repo from version control without running `meltano install`), `meltano elt <plugin>...` and `meltano invoke <plugin>` fail with an ugly error message:\n\n```\n[Errno 2] No such file or directory: '/Users/nehiljain/snaptravel/universal-elt-pipeline/airflow-elt/.meltano/extractors/tap-github/venv/bin/tap-github': '/Users/nehiljain/snaptravel/universal-elt-pipeline/airflow-elt/.meltano/extractors/tap-github/venv/bin/tap-github'\n```\n\nInstead, we can explain what happened and suggest running `meltano install <type> <name>`.", "state": "closed", "created_at": "2020-08-11T21:17:18.514000Z", "updated_at": "2020-09-04T23:41:31.458000Z", "closed_at": "2020-09-04T23:41:31.408000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2223", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69670194, "iid": 2222, "project_id": 7603319, "title": "Update `tap-google-analytics` settings in `discovery.yml`", "description": "The Google Analytics Tap settings in `discovery.yml` are not up to date with the plugin. For example, the tap supports a `oauth_credentials` setting as an alternative to `key_file_location`.\n\n[Slack conversation reporting this issue available here.](https://meltano.slack.com/archives/CFG3C3C66/p1597080699442700)", "state": "closed", "created_at": "2020-08-10T23:46:12.812000Z", "updated_at": "2020-08-12T15:45:14.584000Z", "closed_at": "2020-08-12T15:45:14.516000Z", "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [6573016], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2222", "weight": null, "has_tasks": false, "author_id": 6573016, "assignee_id": 6573016, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69620924, "iid": 2221, "project_id": 7603319, "title": "Automatically generate boilerplate models/table files/topic files", "description": "It would be nice if Meltano could automatically generate boilerplate model/topic/table files under the `model/` directory. This would save time when prototyping reports. Would it be possible to infer this from the output of the extractor runs or transformation runs?", "state": "opened", "created_at": "2020-08-10T10:55:05.254000Z", "updated_at": "2020-08-13T16:15:53.360000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Model", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2221", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69552224, "iid": 2220, "project_id": 7603319, "title": "Syntax highlighting for `shell` code is broken on homepage and in docs", "description": "In d7b4dd54, I changed the signatures of all shell code blocks from ```` ```bash ```` to ```` ```shell ````. \n\nThis worked fine locally:\n\n![Captura_de_Pantalla_2020-08-07_a_la_s__11.40.40](/uploads/3404a0106dcd8e5e740190d1694206ad/Captura_de_Pantalla_2020-08-07_a_la_s__11.40.40.png)\n\nBut not in production, where the `shell` language doesn't seem to be recognized:\n\n![Captura_de_Pantalla_2020-08-07_a_la_s__11.40.47](/uploads/59dbcd12f532fac0eb49ca9c287cbbd8/Captura_de_Pantalla_2020-08-07_a_la_s__11.40.47.png)\n\nThis may be due to a difference between dependency versions.", "state": "closed", "created_at": "2020-08-07T16:41:30.969000Z", "updated_at": "2020-08-07T17:42:05.783000Z", "closed_at": "2020-08-07T17:42:05.738000Z", "labels": ["Documentation", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2220", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69514106, "iid": 2219, "project_id": 7603319, "title": "`asyncio.streams.LimitOverrunError: Separator is not found, and chunk exceed the limit` with `tap-facebook` on v1.43.0", "description": "Al Whatmough reported [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1596698620412600):\n\n>>>\nI've noticed that going from the 1.42.0 to 1.43.0 release, the tap-postgres extractor isn't working (at least for me). When I run the pipeline, I see the following error from Singer:\n`asyncio.streams.LimitOverrunError: Separator is not found, and chunk exceed the limit `\n>>>\n\nThis may indicate we've regressed on https://gitlab.com/meltano/meltano/-/issues/2166 / https://gitlab.com/meltano/meltano/-/merge_requests/1782, although the error message we saw there was slightly different: `Separator is found, but chunk is longer than limit`.\n\nThe issue may be with the new `StreamReader` introduced in https://gitlab.com/meltano/meltano/-/merge_requests/1788: https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/logging/output_logger.py#L192, which doesn't have a `limit` set yet.", "state": "closed", "created_at": "2020-08-06T15:29:01.743000Z", "updated_at": "2020-11-19T16:48:54.779000Z", "closed_at": "2020-08-11T16:52:22.932000Z", "labels": ["bug", "flow::Review", "regression"], "assignees": [87854], "user_notes_count": 5, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2219", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69484986, "iid": 2218, "project_id": 7603319, "title": "Remove \"outdated\" headers from CLI and Orchestration docs", "description": "", "state": "closed", "created_at": "2020-08-05T23:24:43.075000Z", "updated_at": "2020-08-05T23:48:23.662000Z", "closed_at": "2020-08-05T23:48:23.566000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2218", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69483506, "iid": 2217, "project_id": 7603319, "title": "Document `meltano elt` debug mode", "description": "~Documentation follow-up to https://gitlab.com/meltano/meltano/-/issues/2214", "state": "closed", "created_at": "2020-08-05T21:40:53.259000Z", "updated_at": "2020-12-30T22:38:39.814000Z", "closed_at": "2020-08-05T22:07:20.006000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2217", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69480013, "iid": 2216, "project_id": 7603319, "title": "Append schema properties to catalog", "description": "### Problem to solve\n\nSome taps, such as [tap-dynamodb](https://github.com/singer-io/tap-dynamodb), due to the nature of the data source, do not have the ability to inspect the schema of their streams. Instead, they simply report the schema of the stream as `{\"type\":\"object\"}` unless a schema is specified in the catalog for the stream, at which point they will offer up that schema instead, effectively allowing the user to specify the schema if there is one.\n\nHowever, meltano only overwrites schemas that are reported by discover, rather than appending or replacing them with what is defined by the `meltano.yml` configuration. Since the tap can't inspect the schema, it's never reported by discover, so it doesn't make it into the catalog.\n\n### Proposal\n\nHave meltano deep-merge `meltano.yml` schema configs with those output by discover.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\nSee also [this slack thread](https://meltano.slack.com/archives/CFG3C3C66/p1596650866402900)", "state": "closed", "created_at": "2020-08-05T21:04:59.090000Z", "updated_at": "2020-09-02T18:32:12.043000Z", "closed_at": "2020-09-02T18:32:11.998000Z", "labels": ["Accepting Merge Requests", "CLI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2216", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69472655, "iid": 2215, "project_id": 7603319, "title": "`meltano invoke` captures arguments for the plugin", "description": "Example:\n\n`meltano invoke tap-gitlab --help`:\n\n```\nUsage: meltano invoke [OPTIONS] PLUGIN_NAME [PLUGIN_ARGS]...\n\nOptions:\n  --plugin-type [extractor|loader|transform|model|dashboard|orchestrator|transformer|file|extractors|loaders|transforms|models|dashboards|orchestrators|transformers|files]\n  --database-uri TEXT             System database URI\n  --help                          Show this message and exit.\n```\n\n`--` can be used to work around this: `meltano invoke tap-gitlab -- --help`. Still I might expect meltano help to be `meltano invoke --help tap-gitlab` and plugin help to be `meltano invoke tap-gitlab --help`.\n\nNot a big deal by any means, just something I noticed! :smile:", "state": "closed", "created_at": "2020-08-05T16:33:45.045000Z", "updated_at": "2020-08-11T17:25:28.657000Z", "closed_at": "2020-08-11T17:25:28.554000Z", "labels": ["CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2215", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69387484, "iid": 2214, "project_id": 7603319, "title": "Singer runner does not log tap messages in debug mode", "description": "When debugging a failing pipeline, often the stack trace is pretty vague. It's useful to know what messages the tap has emitted. However, running `meltano elt` with `--log-level=debug` does not print Singer messages.", "state": "closed", "created_at": "2020-08-04T00:05:45.796000Z", "updated_at": "2020-12-30T22:38:42.431000Z", "closed_at": "2020-08-04T23:40:47.001000Z", "labels": ["CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2214", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69376228, "iid": 2213, "project_id": 7603319, "title": "`meltano invoke` does not provide extra context to `airflow initdb failed`", "description": "", "state": "closed", "created_at": "2020-08-03T18:28:05.104000Z", "updated_at": "2020-08-03T19:05:02.551000Z", "closed_at": "2020-08-03T19:05:02.506000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2213", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69375617, "iid": 2212, "project_id": 7603319, "title": "Extractor extras show up as required in UI configuration form", "description": "", "state": "closed", "created_at": "2020-08-03T18:04:45.828000Z", "updated_at": "2020-08-03T18:37:14.953000Z", "closed_at": "2020-08-03T18:37:14.898000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2212", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69307389, "iid": 2211, "project_id": 7603319, "title": "Create a JSON schema for `meltano.yml` and publish it on schemastore.org", "description": "This will add validation and autocompletion functionality to various editors: https://www.schemastore.org/json/#editors, https://json-schema-everywhere.github.io/yaml\n\nTo do:\n- [ ] Create schema: https://gitlab.com/meltano/meltano/-/merge_requests/1804\n- [ ] Publish on SchemaStore.org https://github.com/SchemaStore/schemastore/blob/master/CONTRIBUTING.md#adding-to-catalog", "state": "opened", "created_at": "2020-07-31T17:48:41.181000Z", "updated_at": "2020-10-05T18:16:05.605000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854, 6573016], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2211", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69305520, "iid": 2210, "project_id": 7603319, "title": "Have `meltano add` print repository URL", "description": "We could also add a `meltano show` command (like `pip show`) to show this info about any plugin, whether already installed or not.", "state": "closed", "created_at": "2020-07-31T16:27:35.568000Z", "updated_at": "2020-09-02T21:31:39.958000Z", "closed_at": "2020-09-02T21:31:39.908000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2210", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69304598, "iid": 2209, "project_id": 7603319, "title": "Set `tap-gitlab` `start_date` to full RFC3339 timestamp, instead of just YYYY-MM-DD", "description": "See https://gitlab.com/meltano/tap-gitlab/-/merge_requests/26/diffs#note_389101047", "state": "closed", "created_at": "2020-07-31T15:51:32.899000Z", "updated_at": "2020-08-11T21:54:24.238000Z", "closed_at": "2020-07-31T16:16:09.276000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2209", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69214626, "iid": 2208, "project_id": 7603319, "title": "Standardize on setting env vars prefixed with plugin name, not namespace or custom `env`", "description": "I wonder if the decision to use dynamically generated namespaces, and thereby reducing the amount of config needed per plugin.\n\nIn tapdance (maybe similarly in pipelinewise?), the environment variables are scanned at start of execution, and will be automatically included if they begin with `f\"{plugin_id.replace('-','_').upper()}_\"`, where the plugin_id is something like `tap-salesforce` or `target-snowflake`.\n\nSo, the below would be automatically parsed by the default conventions:\n\n```\nTAP_SALESFORCE_account   = ...\nTAP_SALESFORCE_user      = ...\nTARGET_SNOWFLAKE_account = ...\nTARGET_SNOWFLAKE_role    = ...\n```\n\n\nI noticed most of the namespaces in Meltano match this pattern, but there are some odd ones that seem to break the pattern, and I can't see any benefits of doing so. To me, I have to think the \"just works\" benefit would be higher value than having advanced customizability and then have to rely on memory/lookups to confirm the exceptions to the rule.\n\nFrom the docs:\n\n```\n# Specify namespace, which will serve as the:\n# - prefix for configuration environment variables\n# - identifier to find related/compatible plugins\n# - default value for the `schema` setting when used\n#   with loader target-postgres or target-snowflake\n(namespace): tap_covid_19\n```\n\nThoughts?", "state": "closed", "created_at": "2020-07-30T01:37:15.316000Z", "updated_at": "2020-09-15T15:09:50.406000Z", "closed_at": "2020-09-15T15:09:50.370000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2208", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1471314, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69186681, "iid": 2207, "project_id": 7603319, "title": "Add capability to parse readme files and auto-generate a plugin's discovery.yml text.", "description": "In theory, at least, we should be able to parse the contents of markdown tables and capture the relevant settings config info for externally-managed plugins.\n\nThis would greatly streamline the onboarding of new plugins, and could likely reduce support costs for existing plugins.\n\nDepends on: #2206", "state": "opened", "created_at": "2020-07-29T18:11:25.507000Z", "updated_at": "2020-09-01T14:00:07.701000Z", "closed_at": null, "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2207", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69184041, "iid": 2206, "project_id": 7603319, "title": "Aggregate discovery.yml from individual plugin files", "description": "By writing individual plugin discovery files, and then aggregating them dynamically into discovery.yml, we can make it potentially easier to add new taps and targets, and possibly support a future option in which these files are either automatically generated or else sorted in a more decentralized/distributed manner.\n\nPer discussion here: https://meltano.slack.com/archives/C013Z450LCD/p1596043406040800?thread_ts=1595991595.028000&cid=C013Z450LCD", "state": "opened", "created_at": "2020-07-29T18:03:03.999000Z", "updated_at": "2021-02-26T21:58:32.044000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Documentation"], "assignees": [], "user_notes_count": 9, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2206", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69183865, "iid": 2205, "project_id": 7603319, "title": "Add `docker_image` property to support non-Python/pip plugins", "description": "The `tap-mssql` plugin is a good example of a non-standard, non-python tap which would nevertheless be desirable for mainstream support. One way to support this is by adding a docker_image option in discovery.yml and work through whatever issues come up in that process.\n\nOriginally started as a discussion here: https://meltano.slack.com/archives/C013Z450LCD/p1596043957041600?thread_ts=1595992122.035100&cid=C013Z450LCD", "state": "opened", "created_at": "2020-07-29T17:55:52.517000Z", "updated_at": "2021-03-08T16:39:52.775000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2205", "weight": null, "has_tasks": false, "author_id": 4809760, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893435, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69182080, "iid": 2204, "project_id": 7603319, "title": "Document how to deal with logs in production", "description": "See https://meltano.slack.com/archives/CFG3C3C66/p1595537052305300?thread_ts=1595531339.303500&cid=CFG3C3C66", "state": "closed", "created_at": "2020-07-29T16:50:27.213000Z", "updated_at": "2020-08-13T20:00:56.017000Z", "closed_at": "2020-08-13T20:00:52.085000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2204", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69181973, "iid": 2203, "project_id": 7603319, "title": "Document more clearly how to use Meltano with unknown (but not totally custom) Singer taps and targets", "description": "https://meltano.com/tutorials/create-a-custom-extractor.html currently assumes the entire extractor is custom and brand-new, but it's far more likely that users will want to use Meltano with existing taps from https://www.singer.io/, that simply aren't [known to Meltano](https://meltano.com/docs/contributor-guide.html#known-plugins) yet.\n\nHow to go about this can be documented much more clearly, beyond what's under https://meltano.com/#meltano-add.\n\nAs part of this documentation, we can also describe how to go about contributing these changes back to Meltano itself, to make these taps known for all users.", "state": "closed", "created_at": "2020-07-29T16:46:37.837000Z", "updated_at": "2020-08-07T00:19:46.726000Z", "closed_at": "2020-08-07T00:19:46.676000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2203", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69181855, "iid": 2202, "project_id": 7603319, "title": "Improve CLI `--help` messages", "description": "", "state": "opened", "created_at": "2020-07-29T16:43:39.273000Z", "updated_at": "2021-02-15T22:31:58.701000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "Documentation"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2202", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69181219, "iid": 2201, "project_id": 7603319, "title": "Document that `meltano config` supports custom settings that are passed on to the plugin as expected", "description": "", "state": "closed", "created_at": "2020-07-29T16:19:54.325000Z", "updated_at": "2020-08-06T17:57:38.190000Z", "closed_at": "2020-08-06T17:57:38.114000Z", "labels": ["CLI", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2201", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 69134755, "iid": 2200, "project_id": 7603319, "title": "Consistently handle CLI errors", "description": "", "state": "closed", "created_at": "2020-07-28T17:18:59.924000Z", "updated_at": "2020-07-28T17:43:52.140000Z", "closed_at": "2020-07-28T17:43:52.077000Z", "labels": ["CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2200", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68988153, "iid": 2199, "project_id": 7603319, "title": "`meltano discover` only lists custom plugins", "description": "", "state": "closed", "created_at": "2020-07-26T16:51:51.505000Z", "updated_at": "2020-07-28T17:31:50.231000Z", "closed_at": "2020-07-28T17:31:50.193000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2199", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68928507, "iid": 2198, "project_id": 7603319, "title": "Don't install transforms into `transform` directory when project is readonly.", "description": "Required by https://gitlab.com/meltano/files-docker/-/merge_requests/4: https://gitlab.com/meltano/files-docker/-/merge_requests/4#note_384802990", "state": "closed", "created_at": "2020-07-23T23:41:02.449000Z", "updated_at": "2020-07-28T21:49:53.499000Z", "closed_at": "2020-07-28T21:49:53.402000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2198", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68882329, "iid": 2197, "project_id": 7603319, "title": "Use `singer-io/target-csv` instead of our own fork", "description": "Our fork (https://gitlab.com/meltano/target-csv) of https://github.com/singer-io/target-csv was created to fix https://gitlab.com/meltano/target-csv/-/issues/1 (aka https://github.com/singer-io/target-csv/issues/14) without having to wait for singer-io to release a new version. Now that that has happened (https://github.com/singer-io/target-csv/releases/tag/v0.3.0), we can deprecate our fork and change the `pip_url` for `target-csv` back to `git+https://github.com/singer-io/target-csv.git` so users benefit from the latest changes, like a new `destination_path` setting.", "state": "closed", "created_at": "2020-07-22T22:45:08.266000Z", "updated_at": "2020-09-03T16:10:05.269000Z", "closed_at": "2020-08-12T16:07:05.561000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [6573016], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2197", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 6573016, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68820578, "iid": 2196, "project_id": 7603319, "title": "Pretty print and apply appropriate nesting to `meltano config` output", "description": "", "state": "closed", "created_at": "2020-07-21T17:44:31.833000Z", "updated_at": "2020-07-29T17:01:05.677000Z", "closed_at": "2020-07-21T18:33:03.983000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2196", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68315554, "iid": 2195, "project_id": 7603319, "title": "Slightly increase size of custom Meltano UI logo (`ui.logo_url`) in navbar", "description": "", "state": "closed", "created_at": "2020-07-20T22:15:17.368000Z", "updated_at": "2020-07-20T22:40:22.186000Z", "closed_at": "2020-07-20T22:40:22.120000Z", "labels": ["UI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2195", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68280237, "iid": 2194, "project_id": 7603319, "title": "Add \"Edit\" button to pipelines list", "description": "- To allow \"Transform\" to be edited if it was set incorrectly initially\n- Make it clear that when the pipeline name is changed, previous state will not be picked up", "state": "opened", "created_at": "2020-07-20T20:39:35.204000Z", "updated_at": "2020-08-07T16:58:28.716000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2194", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68280233, "iid": 2193, "project_id": 7603319, "title": "Pipeline start date does not update when configured start date does, which is confusing", "description": "", "state": "opened", "created_at": "2020-07-20T20:39:30.574000Z", "updated_at": "2020-08-07T16:58:28.513000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2193", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68280117, "iid": 2192, "project_id": 7603319, "title": "Add \"Configure\" buttons to extractor and loader in Pipelines list", "description": "", "state": "opened", "created_at": "2020-07-20T20:39:16.224000Z", "updated_at": "2020-08-07T16:58:28.328000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2192", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68280011, "iid": 2191, "project_id": 7603319, "title": "Disable \"Transform\" dropdown in \"Create Pipeline\" modal when loader does not support transformation", "description": "", "state": "opened", "created_at": "2020-07-20T20:39:12.096000Z", "updated_at": "2020-08-07T16:58:28.150000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2191", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68279902, "iid": 2190, "project_id": 7603319, "title": "Add \"Add a loader using the CLI\" link to \"Create Pipeline\" modal", "description": "Link to https://meltano.com/docs/getting-started.html#setup-your-loader.\n\nTo be removed once we get to https://gitlab.com/meltano/meltano/-/issues/2071.", "state": "opened", "created_at": "2020-07-20T20:38:59.898000Z", "updated_at": "2020-08-07T16:58:27.963000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2190", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68279587, "iid": 2189, "project_id": 7603319, "title": "Add \"Full Refresh\" button to UI", "description": "- Only when pipeline actually has state\n- Update text in \"ConnectorSettings\" component about changing start date", "state": "opened", "created_at": "2020-07-20T20:38:22.127000Z", "updated_at": "2020-08-07T16:58:27.620000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2189", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68279037, "iid": 2188, "project_id": 7603319, "title": "Disable \"Explore\" buttons in UI when loader does not support analysis", "description": "", "state": "opened", "created_at": "2020-07-20T20:36:38.042000Z", "updated_at": "2020-08-07T16:58:27.417000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2188", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68278835, "iid": 2187, "project_id": 7603319, "title": "Meltano Analyze UI fails when multiple pipelines exist for a data source and the first one's loader doesn't support analysis", "description": "", "state": "opened", "created_at": "2020-07-20T20:36:24.984000Z", "updated_at": "2020-08-07T16:58:27.202000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2187", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68278419, "iid": 2186, "project_id": 7603319, "title": "`discovery.yml` is sometimes downloaded multiple times per CLI command or UI request", "description": "`PluginDiscoveryService`'s caching leaves something to be desired.", "state": "opened", "created_at": "2020-07-20T20:35:33.824000Z", "updated_at": "2020-08-21T23:06:53.282000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug", "performance"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2186", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68278208, "iid": 2185, "project_id": 7603319, "title": "Automatically create `target-jsonl` `destination_path` directory using new `before_run` command array in `meltano.yml`", "description": "- Script can reference plugin config env vars\n\n```yml\nloaders:\n- name: target-jsonl\n  namespace: jsonl\n  before_run:\n  - mkdir -p $TARGET_JSONL_DESTINATION_PATH\n```", "state": "opened", "created_at": "2020-07-20T20:35:12.436000Z", "updated_at": "2020-08-07T17:12:46.496000Z", "closed_at": null, "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2185", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68277577, "iid": 2184, "project_id": 7603319, "title": "Raise error when `meltano elt` is run with `--transform={only,run}` but loader doesn't support transformation", "description": "- Also, `meltano elt` should not log \"Transformation skipped\" if loader doesn't support transformation to begin with", "state": "opened", "created_at": "2020-07-20T20:33:57.522000Z", "updated_at": "2020-08-07T17:12:53.076000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2184", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68276989, "iid": 2183, "project_id": 7603319, "title": "Make it clear whether `meltano config <plugin> set` set a known setting, or a custom one, which may indicate a typo", "description": "", "state": "opened", "created_at": "2020-07-20T20:32:53.866000Z", "updated_at": "2020-08-21T23:09:47.398000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI"], "assignees": [], "user_notes_count": 8, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2183", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 68276956, "iid": 2182, "project_id": 7603319, "title": "Have `meltano config <plugin> set <name> <value>`  support env var in place of setting name", "description": "We can gracefully recover when a user makes this tiny understandable mistake.", "state": "opened", "created_at": "2020-07-20T20:32:47.907000Z", "updated_at": "2020-08-21T23:09:00.990000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2182", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 65589896, "iid": 2181, "project_id": 7603319, "title": "Changing UI logo using MELTANO_UI_LOGO_URL doesn't change logo on login page", "description": "When the `MELTANO_UI_LOGO_URL` environment variable is set (https://meltano.com/docs/settings.html#ui-logo-url) it changes the logo at the top left of the UI. However, it doesn't change the logo on the login page when `AUTHENTICATITON` is set to 1.\n\nIt would be good if this setting changed the logo URL globally - I'm not sure if there are any other places where it's in use?", "state": "closed", "created_at": "2020-07-18T08:45:14.913000Z", "updated_at": "2020-07-20T22:36:21.295000Z", "closed_at": "2020-07-20T22:36:20.890000Z", "labels": ["UI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2181", "weight": null, "has_tasks": false, "author_id": 5042742, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 64511028, "iid": 2180, "project_id": 7603319, "title": "Interrupting a pipeline leaves it in the running state", "description": "When `meltano elt` is interrupted, leaves the job in the `RUNNING` state. Among other things, this causes the UI to always report the task as running.\n\nFor example:\n\n```bash\nmeltano elt --job_id test tap-covid-19 target-jsonl --transform=skip &\n\nsleep 30\nkill $(ps ux | grep meltano | grep test | awk '{print $2}')\n```\n\n| id | job\\_id | state | started\\_at | ended\\_at | payload | payload\\_flags | run\\_id | trigger |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| 10 | test | RUNNING | 2020-07-17 22:50:13.724255 | NULL | {} | 0 | 74cf1aa5-50c2-4215-a2c2-19f72718e4a5 | cli |\n\n\nI tried several signals, including `SIGTERM`, `SIGHUP`, `SIGINT`, `SIGQUIT`, `SIGUSR1` and they all behaved the same way.\n\nAlso, somewhat related to #2147, I never saw the state update on the running job. This may be the current intentional behavior, but I might expect Meltano to store the state for running jobs as well as successful and failed jobs.", "state": "closed", "created_at": "2020-07-17T23:11:46.914000Z", "updated_at": "2020-12-23T21:17:07.059000Z", "closed_at": "2020-07-28T18:29:54.380000Z", "labels": ["CLI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2180", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 64257302, "iid": 2179, "project_id": 7603319, "title": "`meltano config <plugin> set foo bar baz` followed by `meltano config <plugin> unset foo` doesn't unset 'foo.bar' setting", "description": "", "state": "closed", "created_at": "2020-07-17T20:51:04.465000Z", "updated_at": "2020-07-17T22:04:33.309000Z", "closed_at": "2020-07-17T22:04:33.253000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2179", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 63853170, "iid": 2178, "project_id": 7603319, "title": "Add \"`meltano.yml` reference\" doc", "description": "The `meltano.yml` format is not currently documented, and can only be figured out by a user using trial-and-error and watching how commands such as `meltano add`, `meltano add --custom`, and `meltano config <plugin>set` affect the file.", "state": "opened", "created_at": "2020-07-17T16:27:26.614000Z", "updated_at": "2021-02-15T22:33:08.194000Z", "closed_at": null, "labels": ["Documentation"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2178", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 63846865, "iid": 2177, "project_id": 7603319, "title": "Preserve comments and flow style when programmatically modifying `meltano.yml`", "description": "PyYAML doesn't support this currently (https://github.com/yaml/pyyaml/issues/90), but https://pypi.org/project/ruamel.yaml does.", "state": "opened", "created_at": "2020-07-17T16:23:10.920000Z", "updated_at": "2020-10-13T18:04:08.827000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2177", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 61992604, "iid": 2176, "project_id": 7603319, "title": "Document how to use different settings for different pipelines of the same tap/target", "description": "See https://meltano.slack.com/archives/CFG3C3C66/p1594667270109000?thread_ts=1594434709.063300&cid=CFG3C3C66", "state": "closed", "created_at": "2020-07-16T20:54:21.188000Z", "updated_at": "2020-08-05T23:21:04.411000Z", "closed_at": "2020-08-05T23:21:04.203000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2176", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 61815163, "iid": 2175, "project_id": 7603319, "title": "Make error message complaining about schema discovery support explicit about the missing `discover` capability", "description": "Hi, I added my custom tap as per the tutorial on https://meltano.com/tutorials/create-a-custom-extractor.html\n```bash\n../venv/meltano/bin/meltano add --custom extractor tap-fishtown-csv\n(namespace): tap-fishtown-csv\n(pip_url): git+https://gitlab.com/tjb-bnb/tap-csv.git\n(executable): tap-csv\n(capabilities): state\n(settings):  start_date,bucket,backend,tables\n```\n\nI can invoke it with the expected results:\n```bash\n../venv/meltano/bin/meltano invoke tap-fishtown-csv\n```\n\nBut I get a stack trace if I continue with the tutorial:\n```bash\n$ ../venv/meltano/bin/meltano select --list tap-fishtown-csv '*' '*'\n[2020-07-16 20:54:57,541] [8659|MainThread|root] [INFO] Catalog not found, trying to run the tap with --discover.\n[2020-07-16 20:54:57,541] [8659|MainThread|root] [ERROR] Extractor 'tap-fishtown-csv' does not support schema discovery\nTraceback (most recent call last):\n  File \"/singer/venv/meltano/lib/python3.7/site-packages/meltano/cli/select.py\", line 52, in select\n    show(project, extractor, show_all=flags[\"all\"])\n  File \"/singer/venv/meltano/lib/python3.7/site-packages/meltano/cli/select.py\", line 99, in show\n    list_all = select_service.list_all(session)\n  File \"/singer/venv/meltano/lib/python3.7/site-packages/meltano/core/select_service.py\", line 46, in list_all\n    schema = self.load_schema(session)\n  File \"/singer/venv/meltano/lib/python3.7/site-packages/meltano/core/select_service.py\", line 33, in load_schema\n    self.extractor.run_discovery(invoker)\n  File \"/singer/venv/meltano/lib/python3.7/site-packages/meltano/core/plugin/singer/tap.py\", line 95, in run_discovery\n    f\"Extractor '{self.name}' does not support schema discovery\"\nmeltano.core.plugin.error.PluginLacksCapabilityError: Extractor 'tap-fishtown-csv' does not support schema discovery\nError: Cannot list the selected attributes: the tap does not support schema discovery or selection.\n```", "state": "closed", "created_at": "2020-07-16T18:56:29.230000Z", "updated_at": "2020-07-17T23:33:10.467000Z", "closed_at": "2020-07-17T23:33:10.417000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2175", "weight": null, "has_tasks": false, "author_id": 930079, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 61760496, "iid": 2174, "project_id": 7603319, "title": "Health check endpoint", "description": "Many load balancers such as AWS ALB check for an application to be live through an HTTP request, looking for a 200 status code. Applications often have a specific endpoint to indicate the web server is running, which doesn't take significant resources to respond to.\n\nUsing the main UI works, but it might cause it to re-render the home page over and over. And if you have authentication required, you'll need to use `/auth/login` as the route.\n\nI looked at using `/api/version` but it seems to require authentication.\n\nThe proposal is to add a simple unauthenticated flask route like `/api/health` that just returns a 200 status code if flask is running. It could optionally return information about the status of components of Meltano, e.g. Airflow, but this isn't required for solving the load balancer health check problem.\n\nI can knock this out today if it's something y'all want to support!", "state": "closed", "created_at": "2020-07-16T18:24:21.359000Z", "updated_at": "2020-07-17T22:10:08.172000Z", "closed_at": "2020-07-17T22:10:08.107000Z", "labels": ["UI", "flow::Review"], "assignees": [689351], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2174", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 689351, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 61360797, "iid": 2173, "project_id": 7603319, "title": "meltano.yml transforms into invalid tap.config.json", "description": "Hi, I'm following these instructions: https://meltano.com/tutorials/create-a-custom-extractor.html\n\nI need this in the config.json of the custom plugin:\n\n```json\n{\n    \"start_date\": \"1017-05-01T00:00:00Z\",\n    \"bucket\": \"csv\",\n    \"backend\": \"file\",\n    \"tables\": [\n        {\n            \"name\": \"raw_import\",\n            \"pattern\": \"888(.*)\\\\.txt$\",\n            \"key_properties\": [\"_s3_source_file\",\"_s3_source_lineno\"],\n            \"format\": \"csv\",\n            \"encoding\": \"macintosh\",\n            \"delimiter\": \";\"\n        }\n    ]\n}\n```\n\nNo matter what I put into meltano.yml, the autogenerated tap.config.json is something different. Can you please make this a bit more user-friendly? I don't even know how meltano.yml gets transformed (it seems inconsistent between top-level and sublevel). Could you please provide the option to supply your own config.json?\n\nSome of the things I've tried putting into meltano.yml:\n```yml\nversion: 1\nplugins:\n  extractors:\n  - name: tap-fishtown-csv\n...\n    settings:\n...\n    - name: tables\n      env: TAP_FISHTOWN_CSV_TABLES\n      value:\n          - name: raw_import,\n            pattern: '888(.*)\\.txt$',\n            key_properties: [\"_s3_source_file\", \"_s3_source_lineno\"],\n            format: csv,\n            encoding: macintosh,\n            delimiter: \";\"\n```", "state": "closed", "created_at": "2020-07-16T13:52:18.303000Z", "updated_at": "2020-09-01T13:45:53.354000Z", "closed_at": "2020-09-01T13:45:53.160000Z", "labels": ["Customer Support", "flow::Doing"], "assignees": [87854], "user_notes_count": 13, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2173", "weight": null, "has_tasks": false, "author_id": 930079, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 59505443, "iid": 2172, "project_id": 7603319, "title": "Redact secrets meant for other plugins in environment passed along with plugin invocation", "description": "", "state": "closed", "created_at": "2020-07-15T17:38:55.169000Z", "updated_at": "2020-07-15T17:55:38.571000Z", "closed_at": "2020-07-15T17:55:38.456000Z", "labels": [], "assignees": [], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2172", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 59503054, "iid": 2171, "project_id": 7603319, "title": "Have `meltano config` automatically store settings in the appropriate location", "description": "- If the setting has already been overwritten: use that location\n- If the setting is sensitive or environment-specific, use `.env`, else `meltano.yml`\n- If neither is available, use the system database", "state": "closed", "created_at": "2020-07-15T17:37:03.625000Z", "updated_at": "2020-07-17T16:28:24.618000Z", "closed_at": "2020-07-15T22:07:00.696000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2171", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 59428910, "iid": 2170, "project_id": 7603319, "title": "meltano.yml does not allow referencing arbitrary environment variables from .env", "description": "Based on my understanding of `meltano.yml`, I would expect this to work:\n\n`.env`:\n\n```bash\nWAREHOUSE_URL=postgres://localhost:5432/meltano\n```\n\n`meltano.yml`:\n\n```yml\nplugins:\n  loaders:\n  - name: target-postgres\n    pip_url: git+https://github.com/meltano/target-postgres.git\n    config:\n      url: $WAREHOUSE_URL\n```\n\nHowever, with this configuration, this is the result:\n\n```\n$ meltano config target-postgres\n[2020-07-15 12:23:01,556] [84379|MainThread|root] [WARNING] Variable WAREHOUSE_URL is missing from the environment.\n{\"url\": null, \"user\": \"warehouse\", \"password\": \"warehouse\", \"host\": \"localhost\", \"port\": 5502, \"dbname\": \"warehouse\", \"schema\": null}\n```\n\nMy hunch is that `load_dotenv` isn't called before `meltano.yml` is parsed.\n\nThis is not a blocker for us, the problem goes away if `PG_URL` is used instead, or if `export WAREHOUSE_URL` is used before `meltano config`. Just wanted to bring it up because I think most would find the behavior surprising.\n\nI didn't add the bug labels because I'm not sure if this is actually a bug or if this behavior isn't supported.", "state": "closed", "created_at": "2020-07-15T16:37:09.928000Z", "updated_at": "2020-10-07T16:21:23.494000Z", "closed_at": "2020-07-16T17:43:10.253000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2170", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57714100, "iid": 2169, "project_id": 7603319, "title": "State is ignored silently when extractor does not advertise `state` capability", "description": "When this happens, we should log a warning.", "state": "closed", "created_at": "2020-07-14T20:27:33.793000Z", "updated_at": "2020-07-16T18:06:12.547000Z", "closed_at": "2020-07-16T18:06:12.493000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2169", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57500952, "iid": 2168, "project_id": 7603319, "title": "Handle unsupported metadata in singer taps", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n\nMeltano currently (v1.39.1) ignores the metadata with `\"inclusion\": \"unsupported\"` and try to include such attributes for an object causing the tap to fail.\n\n\n### What is the expected *correct* behavior?\n\nDo not include metadata with `\"inclusion\": \"unsupported\"` and conform with the Singer specification at https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#metadata\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\nThis issue can be seen with tap-zuora.\nAdd custom extractor tap-zuora and run `meltano elt tap-zuora target-csv`.\n\n\n### Relevant logs and/or screenshots\n\n```\nCRITICAL There is a syntax error in one of the queries in the AQuA input (Query = select CreatedById, CreatedDate, EndDate, ErrorFileUrl, Id, ProcessedAccounts, ProcessedCharges, ResultFileUrl, RunNumber, StartDate, TotalAccounts, UpdatedById, UpdatedDate, Entity.Id from ChargeMetricsRun where UpdatedDate >= '1900-01-01T00:00:00 (+00:00)' order by UpdatedDate asc, Error = There is no field named EndDate) \n```\n\nFor EndData the metadata produced by discovery is marked as unsupported:\n```\n       {\n          \"breadcrumb\": [\n            \"properties\",\n            \"EndDate\"\n          ],\n          \"metadata\": {\n            \"inclusion\": \"unsupported\"\n          }\n        }\n```\n\n### Possible fixes\n\nIgnore all unsupported fields when sending a query to tap\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-07-14T17:54:17.699000Z", "updated_at": "2020-07-17T17:32:51.606000Z", "closed_at": "2020-07-17T17:32:51.535000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2168", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 6351669, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57476173, "iid": 2167, "project_id": 7603319, "title": "Autogenerated job_id are not same in system database and folder structure", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\nIn the current meltano version: v1.39.1 the folder name is different from the job_id in system database.\n\n\n### What is the expected *correct* behavior?\nThe folder name should exactly match the job_id in system database\n\n\n### Steps to reproduce\nRun `meltano elt` command without the `--job_id`\n```\nmeltano elt tap-zuora target-csv\n```\nMeltano in this case will auto-generate the job_id and create a folder under `.meltano/run`. It will also create an entry in the system database with the job_id. In the current meltano version: v1.39.1 the folder name is different from the job_id in system database.\n\n### Relevant logs and/or screenshots\n\nIn the system database I found the generated job id is different from the folder name under `.meltano/run/elt/`.\n\nCorrect Job Id per database: job_20200714-00:38:49.927082\nFolder name: job-20200714-003849-927082\n\n\n### Possible fixes\n\nSynchronize the job_id in the system database and the folder name under `.meltano/run/elt/` to avoid confusion.\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-07-14T17:37:38.195000Z", "updated_at": "2020-09-04T20:14:51.137000Z", "closed_at": "2020-09-04T20:14:51.023000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2167", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 6351669, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399397, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57456253, "iid": 2166, "project_id": 7603319, "title": "ELT run fails when more than 64KiB of state is written", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n\nRunning `meltano elt` with `tap-salesforce` and `target-jsonl` throws error after a long run and downloading more than 800 objects.\n\n\n### What is the expected *correct* behavior?\n\nRunning `meltano elt` with `tap-salesforce` and `target-jsonl` should complete successfully without any error.\n\n\n### Steps to reproduce\n\nRun `meltano elt tap-salesforce target-jsonl` with all objects (*.*) and after downloading more than 800 objects the meltano throws error.\n\n### Relevant logs and/or screenshots\n\n```\nERROR exception calling callback for <Future at 0x7fb9db662110 state=finished returned NoneType>\nTraceback (most recent call last):\n  File \"/usr/lib64/python3.7/concurrent/futures/_base.py\", line 324, in _invoke_callbacks\n    callback(self)\n  File \"/usr/lib64/python3.7/asyncio/futures.py\", line 365, in _call_set_state\n    dest_loop.call_soon_threadsafe(_set_state, destination, source)\n  File \"/usr/lib64/python3.7/asyncio/base_events.py\", line 732, in call_soon_threadsafe\n    self._check_closed()\n  File \"/usr/lib64/python3.7/asyncio/base_events.py\", line 479, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nTask exception was never retrieved\nfuture: <Task finished coro=<SingerRunner.bookmark() done, defined at /home/ec2-user/.venv/meltano/lib64/python3.7/site-packages/meltano/core/runner/singer.py:133> exception=ValueError('Separator is found, but chunk is longer than limit')>\nTraceback (most recent call last):\n  File \"/usr/lib64/python3.7/asyncio/streams.py\", line 496, in readline\n    line = await self.readuntil(sep)\n  File \"/usr/lib64/python3.7/asyncio/streams.py\", line 592, in readuntil\n    'Separator is found, but chunk is longer than limit', isep)\nasyncio.streams.LimitOverrunError: Separator is found, but chunk is longer than limit\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/ec2-user/.venv/meltano/lib64/python3.7/site-packages/meltano/core/runner/singer.py\", line 135, in bookmark\n    last_state = await target_stream.readline()\n  File \"/usr/lib64/python3.7/asyncio/streams.py\", line 505, in readline\n    raise ValueError(e.args[0])\nValueError: Separator is found, but chunk is longer than limit\nELT could not complete, an error happened during the process: Subprocesses didn't exit cleanly: tap(1), target(0)\n```\n\n### Possible fixes\n\nThe error indicates that the tap is writing a state line (that the target is forwarding) of more than 64KiB in length, or that the total state emitted up to that point is over 64KiB in length (see https://stackoverflow.com/a/55458913)\n\nThat's a lot of state, but not necessarily out of character for Salesforce\nIt will also help if `meltano` persist state in system database more frequently, may be after each object download completion.\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n/label ~bug\n/label ~\"To Do\"\n```", "state": "closed", "created_at": "2020-07-14T17:21:15.021000Z", "updated_at": "2020-08-06T15:29:02.337000Z", "closed_at": "2020-07-28T17:37:11.778000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2166", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 6351669, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57398149, "iid": 2165, "project_id": 7603319, "title": "For the moment, don't direct users to the UI from the Installation and Getting Started docs", "description": "", "state": "closed", "created_at": "2020-07-14T16:35:21.120000Z", "updated_at": "2020-08-26T19:53:02.140000Z", "closed_at": "2020-08-26T19:53:02.069000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2165", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1391218, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57394758, "iid": 2164, "project_id": 7603319, "title": "Restructure and update CLI documentation", "description": "The docs at https://meltano.com/docs/command-line-interface.html are currently somewhat lacking, inconsistently formatted, and often incomplete compared to the information available on the homepage: https://meltano.com/.", "state": "opened", "created_at": "2020-07-14T16:32:26.788000Z", "updated_at": "2021-02-15T22:33:17.440000Z", "closed_at": null, "labels": ["Documentation"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2164", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57381494, "iid": 2163, "project_id": 7603319, "title": "Make it clear in the UI why \"Explore\" button may be disabled", "description": "", "state": "opened", "created_at": "2020-07-14T16:17:05.665000Z", "updated_at": "2020-08-21T23:05:28.366000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2163", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 57360407, "iid": 2162, "project_id": 7603319, "title": "Print link to plugin documentation in `meltano add <plugin>` and `meltano config <plugin> list` output", "description": "For example, adding or configuring `tap-csv` should print a link to https://meltano.com/plugins/extractors/csv.html with a line like \"For more information about these settings, see:\".\n\nConfiguring Meltano itself should print a link to https://meltano.com/docs/settings.html.", "state": "closed", "created_at": "2020-07-14T15:48:58.219000Z", "updated_at": "2020-07-31T16:27:45.688000Z", "closed_at": "2020-07-28T23:44:56.494000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2162", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54338092, "iid": 2161, "project_id": 7603319, "title": "instructions unclear, no way to find out how to configure", "description": "Hi, I tried to import a directory of CSV files into an existing Postgres database, following the instructions on https://meltano.com/. I am an experienced DBT and Postgres user, but new to Meltano. However, there is no way to find out how to configure tap-csv. It seems to need some kind of variables where to find the CSV files, but nothing works.\n\nThis is the journy what I did (bash history, Ubuntu Linux 19.10) and what I expected:\n\n```bash\ndocker pull meltano/meltano\ndocker run meltano/meltano --version\ndocker run -v $(pwd):/projects              -w /projects              meltano/meltano init testprojekt\ncd testprojekt\ndocker run  -v $(pwd):/project              -w /project              -p 5000:5000              meltano/meltano discover extractors\ndocker run  -v $(pwd):/project  -w /project meltano/meltano discover loaders\n```\n\nHere, by analogy with https://meltano.com/, I need to add tap-csv.\n\n```bash\ndocker run  -v $(pwd):/project  -w /project meltano/meltano add extractor tap-csv\ndocker run  -v $(pwd):/project  -w /project meltano/meltano add loader target-postgres\n```\n\nFrom here on, there are no easy-to-find instructions how to tell tap-csv where to find the CSV files. \nSo I tried to run it against the existing and running database, as documented in https://meltano.com/#transformation\n(Shouldn't there be a way to configure all that in a file?):\n\n```bash\nexport PG_ADDRESS=localhost\nexport PG_PORT=5432\nexport PG_USERNAME=postgres\nexport PG_PASSWORD=secret\nexport PG_DATABASE=postgres\ndocker run  -v $(pwd):/project  -w /project  meltano/meltano elt tap-csv target-postgres --job_id=csv-to-postgres\n```\n\nSo it errors out with:\n\n```\nERROR tap-csv: Config is missing required keys: ['files']\n```\n\nBy analogy with https://meltano.com/#meltano-config, I would expect the following to tell me how to configure tap-csv:\n\n```bash\ndocker run  -v $(pwd):/project  -w /project  meltano/meltano config tap-csv list\ncsv_files_definition [env: TAP_CSV_FILES_DEFINITION] current value: None (from default)\n```\n\nGreat, I need a TAP_CSV_FILES_DEFINITION, but no hint where to get it. Reading https://gitlab.com/meltano/tap-csv, I suspect I need a config.json because that contains a \"files\" section.\nSo I tried to create a config.json:\n\n```bash\ncat >>config.json\nbash: config.json: Keine Berechtigung\n#Woops, I would expect meltano to leave my file permissions alone, but instead it chowns them all to root.\nsudo chown -R $USER.$USER .\n\ncat >>config.json\n{\n\t\"files\":\t[ \t\n\t\t\t\t\t{\t\"entity\" : \"leads\",\n\t\t\t\t\t\t\"file\" : \"/project/load/\",\n\t\t\t\t\t\t\"keys\" : []\n\t\t\t\t\t}\n\t\t\t\t]\n}\n#and copy some example .csv files with no primary key into testprojekt/load/\n```\n\nThen tell Meltano about it (here I would have expected clearer instructions on http://meltano.com):\n\n```bash\ndocker run  -v $(pwd):/project  -w /project  meltano/meltano config tap-csv set TAP_CSV_FILES_DEFINITION /project/config.json\n```\n\nTry again to run Meltano:\n\n```bash\ndocker run  -v $(pwd):/project  -w /project  meltano/meltano elt tap-csv target-postgres --job_id=csv-to-postgres\n#again:\nERROR tap-csv: Config is missing required keys: ['files']\n(stacktrace)\n```\n\nAgain, see the instructions https://meltano.com/#meltano-select\n\n```bash\ndocker run  -v $(pwd):/project  -w /project  meltano/meltano select --list --all tap-csv \n[2020-07-11 19:34:19,453] [1|MainThread|root] [ERROR] Extractor 'tap-csv' does not support entity selection or metadata rules\n(stacktrace)\n```\n\nHere I expected Meltano to tell me what variables to set, instead of a stack trace. At this point, I gave up on Meltano.", "state": "closed", "created_at": "2020-07-11T19:39:10.064000Z", "updated_at": "2020-07-16T15:55:30.944000Z", "closed_at": "2020-07-16T15:09:56.345000Z", "labels": ["Customer Support", "flow::Doing"], "assignees": [87854], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2161", "weight": null, "has_tasks": false, "author_id": 930079, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54315726, "iid": 2160, "project_id": 7603319, "title": "Have Meltano UI log all requests when log level is debug", "description": "", "state": "closed", "created_at": "2020-07-10T21:17:22.031000Z", "updated_at": "2020-07-10T21:58:32.044000Z", "closed_at": "2020-07-10T21:58:31.996000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2160", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54315696, "iid": 2159, "project_id": 7603319, "title": "Reuse `PluginDiscoveryService` more to improve performance, especially when `PluginSettingsService` is used", "description": "", "state": "closed", "created_at": "2020-07-10T21:15:23.967000Z", "updated_at": "2020-07-10T22:17:52.913000Z", "closed_at": "2020-07-10T22:17:52.842000Z", "labels": ["flow::Review", "performance"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2159", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54308217, "iid": 2158, "project_id": 7603319, "title": "Research integration with Auth0", "description": "### Problem to solve\nFind out steps to complete in order to be able to integrate with Auth0, so that users who leverage Auth0 can use it for authentication and role-management.\n\n### Target audience\nMeltano CLI and Meltano UI users.", "state": "opened", "created_at": "2020-07-10T17:57:00.350000Z", "updated_at": "2020-07-14T16:09:47.689000Z", "closed_at": null, "labels": [], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2158", "weight": null, "has_tasks": false, "author_id": 6175840, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54308120, "iid": 2157, "project_id": 7603319, "title": "Add config variable to hide \"Explore\" and \"Dashboards\" tabs from header of Meltano UI.", "description": "### Problem to solve\n(Summarize the problem we are trying to solve in the form of we need to do [A], so that [B] can [C])\nNeed to add config variable to hide \"Explore\" and \"Dashboards\" tabs from header of Meltano UI as there are users who don't need these features at the moment.\n\n### Target audience\nMeltano UI users.\n\n### Proposal\nAdd variable to meltano.yml config file like:\n```\npages:\n- Extractors\n- Pipelines\n- Explore\n- Dashboards\n```", "state": "closed", "created_at": "2020-07-10T17:54:23.574000Z", "updated_at": "2020-07-16T17:47:37.004000Z", "closed_at": "2020-07-16T17:47:36.929000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2157", "weight": null, "has_tasks": false, "author_id": 6175840, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54307587, "iid": 2156, "project_id": 7603319, "title": "Automatically do a full refresh of a stream when selection rules are added or changed", "description": "See https://gitlab.com/meltano/meltano/-/issues/2125#note_375149564 for more context.", "state": "opened", "created_at": "2020-07-10T17:32:58.814000Z", "updated_at": "2020-07-10T17:41:19.157000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2156", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54307513, "iid": 2155, "project_id": 7603319, "title": "Option for extracting only a specific stream", "description": "See https://gitlab.com/meltano/meltano/-/issues/2125#note_374974897 for more context.\n\nThis would require us to store whether a `meltano elt` run refreshed all streams or just a subset, and take that into account when we load the previous runs' state in the next full (or partial) run.\n\nThis may interact in tricky ways with https://gitlab.com/meltano/meltano/-/issues/2147.", "state": "closed", "created_at": "2020-07-10T17:30:21.399000Z", "updated_at": "2020-09-07T18:29:59.283000Z", "closed_at": "2020-09-07T18:29:57.042000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 7, "merge_requests_count": 1, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2155", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54306724, "iid": 2154, "project_id": 7603319, "title": "Meltano UI for containerized project should not allow changes to project files, but can allow changing configuration stored in system database", "description": "Right now, we enable the `ui.readonly` option in the [Dockerfile](https://gitlab.com/meltano/files-docker/-/blob/master/bundle/Dockerfile) using the `MELTANO_READONLY` environment variable, but really, only actions that touch the project directory itself (`meltano.yml`, `.meltano/`, `.env` etc) need to be blocked.\n\nWe may need a new setting, e.g. `project.readonly`, which can also be enforced in CLI commands.", "state": "closed", "created_at": "2020-07-10T16:57:24.947000Z", "updated_at": "2020-07-16T17:42:56.396000Z", "closed_at": "2020-07-16T17:42:56.315000Z", "labels": ["UI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2154", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54188655, "iid": 2153, "project_id": 7603319, "title": "Proposal: add `logo_url` property to extractor.", "description": "### Problem to solve\nWe need to add `logo_url` property to extractors, so that users can see the logo of their custom extractor instead of blank space.\n\n### Target audience\nMeltano UI users.\n\n### Further details\nProper customization", "state": "closed", "created_at": "2020-07-09T23:06:25.811000Z", "updated_at": "2020-07-10T17:43:12.686000Z", "closed_at": "2020-07-10T17:43:12.594000Z", "labels": ["UI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2153", "weight": null, "has_tasks": false, "author_id": 6175840, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54187167, "iid": 2152, "project_id": 7603319, "title": "`meltano ui` prints all `gunicorn.error` logs twice", "description": "", "state": "closed", "created_at": "2020-07-09T21:48:32.314000Z", "updated_at": "2020-07-09T22:14:56.057000Z", "closed_at": "2020-07-09T22:14:55.948000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2152", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54186508, "iid": 2151, "project_id": 7603319, "title": "`meltano ui` never prints `Meltano UI is now available at...` if `ui.server_name` is set", "description": "", "state": "closed", "created_at": "2020-07-09T21:19:08.518000Z", "updated_at": "2020-07-09T21:44:59.284000Z", "closed_at": "2020-07-09T21:44:59.174000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2151", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54108692, "iid": 2150, "project_id": 7603319, "title": "Monitoring dashboard based on tap metrics data", "description": "See https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages and https://gitlab.com/meltano/meltano/-/issues/2148", "state": "opened", "created_at": "2020-07-08T16:20:27.759000Z", "updated_at": "2020-07-08T16:21:31.024000Z", "closed_at": null, "labels": ["UI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2150", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54102788, "iid": 2149, "project_id": 7603319, "title": "Create Helm chart to deploy Meltano to Kubernetes", "description": "The Helm chart should ideally run the Meltano schedule via Kubernetes orchestration without Airflow if possible.\n\nMinimum Goal:\nThe minimum goal will to be to provide a way to run a single `meltano elt` pipeline on a schedule with a Kubernetes job.\n\nIdeal Outcome:\nThe ideal outcome would be to support both running a project specific docker image and the default Meltano docker image in both readonly, as well as read-write mode to support the broadest possible user base. Each scheduled pipeline created using `meltano schedule` and available through `meltano schedule list --format=json` would result in its own scheduled `meltano elt` job.", "state": "opened", "created_at": "2020-07-08T14:16:00.817000Z", "updated_at": "2021-03-11T21:17:37.435000Z", "closed_at": null, "labels": ["flow::Doing"], "assignees": [6382744], "user_notes_count": 8, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2149", "weight": null, "has_tasks": false, "author_id": 6382744, "assignee_id": 6382744, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54064225, "iid": 2148, "project_id": 7603319, "title": "Proposal: Persist Metrics emitted by taps during runs", "description": "### Target audience\nMeltano admins, devops engineers \n\n\n### Proposal\nhttps://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages Storing these messages in meltano db. Using that in some sort of monitoring dashboard will be great for production deployments.\n\n\n### What does success look like, and how can we measure that?\nA table with all the metrics emitted by runs. Enriched with the job it etc\nA UI to build timeseries graph of a metric for a tap over time/runs", "state": "opened", "created_at": "2020-07-07T22:03:31.787000Z", "updated_at": "2020-10-28T18:10:05.921000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2148", "weight": null, "has_tasks": false, "author_id": 783199, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54064128, "iid": 2147, "project_id": 7603319, "title": "Persist and consider state messages regardless of job success", "description": "### Problem to solve\nSo a usecase I have is the Github tap which will take days to run for the first time (cold start). Every time, this process breaks for some reason, it is super expensive and frustrating to restart it from scratch even though the work is done; i.e. I have the data in the target.\n\n\n\n### Target audience\nMeltano ELT users\n\n\n### Further details\n- Cold Start\n- Incremental Runs\n\n\n### Proposal\nI think storing all the state messages outputted by a tap during a run will be valuable. https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message these are structured logs and can be ingested in meltano db or some other store for future use.\n\n\n### What does success look like, and how can we measure that?\nDB stores all the states logs in a table which can be queried to start new runs more efficiently.", "state": "closed", "created_at": "2020-07-07T21:58:33.136000Z", "updated_at": "2020-07-29T17:19:06.679000Z", "closed_at": "2020-07-28T21:08:58.025000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 7, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2147", "weight": null, "has_tasks": false, "author_id": 783199, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361880, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54062859, "iid": 2146, "project_id": 7603319, "title": "Cross-link from code samples on homepage back to required earlier sections", "description": "", "state": "closed", "created_at": "2020-07-07T21:02:34.503000Z", "updated_at": "2020-07-07T21:31:25.647000Z", "closed_at": "2020-07-07T21:31:25.567000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2146", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54060881, "iid": 2145, "project_id": 7603319, "title": "Add option to modify schema properties of a stream in meltano.yml", "description": "### Issue\nMeltano currently supports modifying only the metadata section of streams in the underlying `catalog.json`. We should be able to modify the attributes under the schema section as well. This would enable users to overwrite type constraints when a taps `--discover` method doesn't play well with a target, and the user is confident in the type of data points that exists in the source data.\n\n### Example\nI am currently using `tap-google-sheets` together with `target-snowflake`. `tap-google-sheets` uses `anyOf` statements for numeric columns, which isn't supported by `target-snowflake`. When using singer, I modify the columns that use `anyOf` types in the jsonschema with an appropriate datatype, such as integer or float. With meltano, my hands are tied.\n\nIdeally, these incompatibilites would be handled either at the source dataset, or by a robust tap. But taps can often be wrong/incompatible, and having the option to overwrite parts of catalog seems like beneficial.", "state": "closed", "created_at": "2020-07-07T19:52:13.732000Z", "updated_at": "2020-07-22T23:42:41.581000Z", "closed_at": "2020-07-22T23:42:41.532000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Doing"], "assignees": [87854], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2145", "weight": null, "has_tasks": false, "author_id": 6381920, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54054820, "iid": 2144, "project_id": 7603319, "title": "Allow Meltano UI to available behind a reverse proxy at a relative URL root", "description": "Instead of Meltano UI being available at `https://meltano.example.com` or `https://example.com:5000`, it should be possible to have it be available at `https://example.com/meltano`, behind a reverse proxy.\n\nThe Meltano UI backend and frontend will need to know that relative root so that URLs can be built correctly.", "state": "opened", "created_at": "2020-07-07T18:04:36.375000Z", "updated_at": "2020-07-07T18:04:36.375000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "feature requests"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2144", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54054517, "iid": 2143, "project_id": 7603319, "title": "Turn remaining UI development env vars into project settings", "description": "- `FLASK_ENV`: `ui.dev.flask_env`?\n- `FLASK_PROFILE`: `ui.dev.profile`?\n- `MELTANO_UI_URL`: `ui.dev.webapp_url`? (Only used by Flask to redirect to frontend served by `yarn webapp:serve`)\n- `MELTANO_APP_URL`: `ui.dev.api_url`? (Only used by `yarn webapp:serve`)\n- `MELTANO_EMBED`: `ui.dev.embed`? (Only used by `yarn webapp:serve`)", "state": "opened", "created_at": "2020-07-07T17:55:29.610000Z", "updated_at": "2020-07-07T17:55:29.610000Z", "closed_at": null, "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2143", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54053964, "iid": 2142, "project_id": 7603319, "title": "Allow `discovery.yml` URL to be overwritten using `MELTANO_DISCOVERY_URL` environment variable", "description": "By default, the URL is https://www.meltano.com/discovery.yml, but users may prefer to point at their own `discovery.yml` instead.", "state": "closed", "created_at": "2020-07-07T17:47:18.143000Z", "updated_at": "2020-07-08T22:20:29.108000Z", "closed_at": "2020-07-08T22:20:29.063000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2142", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54053880, "iid": 2141, "project_id": 7603319, "title": "Add `ui.session_cookie_domain` setting", "description": "To be used instead of `ui.server_name` when the application should be reachable with different hostnames, as in https://gitlab.com/meltano/meltano/-/issues/2081:\n\n> Specifying `SERVER_NAME` causes Flask to refuse to respond to traffic whose hostname doesn't match this property. However, often load balancers are doing health checks to see if the app is running so that it can replace processes when they die. AWS ALB (and others too I bet) don't actually include the hostname in the health check requests, so they always think the app is unhealthy. Setting it to `None` allows all traffic to be accepted but generates a security warning at boot", "state": "closed", "created_at": "2020-07-07T17:44:45.494000Z", "updated_at": "2020-07-08T20:56:53.682000Z", "closed_at": "2020-07-08T20:56:53.524000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2141", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54050337, "iid": 2140, "project_id": 7603319, "title": "Only have `meltano ui` complain about missing `ui.server_name`, `ui.secret_key` and `ui.password_salt` when `ui.authentication` is enabled", "description": "", "state": "closed", "created_at": "2020-07-07T16:15:18.650000Z", "updated_at": "2020-07-08T20:10:28.617000Z", "closed_at": "2020-07-08T20:10:28.490000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2140", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54049232, "iid": 2139, "project_id": 7603319, "title": "Add `meltano list [plugin_type]` to list plugins and their installed versions", "description": "Original title: Ability to do `pip freeze` for `meltano install`\n\n### Problem to solve\nWhen I want to modify the version of tap (extractor) I am not able to verify the version of my installation easily\n\n\n### Target audience\nA developer managing deployments for meltano\n\n\n\n### Proposal\nAdd a command like `meltano invoke pip freeze` or something along those lines", "state": "opened", "created_at": "2020-07-07T15:47:30.262000Z", "updated_at": "2020-12-23T23:10:16.872000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI", "feature requests"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2139", "weight": null, "has_tasks": false, "author_id": 783199, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54001059, "iid": 2138, "project_id": 7603319, "title": "Treat .env as its own configuration source to simplify precedence logic", "description": "", "state": "closed", "created_at": "2020-07-06T23:56:37.640000Z", "updated_at": "2020-07-07T16:26:47.336000Z", "closed_at": "2020-07-07T16:26:45.068000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2138", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 54001054, "iid": 2137, "project_id": 7603319, "title": "Make Meltano UI and Gunicorn logging consistent", "description": "", "state": "closed", "created_at": "2020-07-06T23:56:34.849000Z", "updated_at": "2020-07-07T00:15:49.448000Z", "closed_at": "2020-07-07T00:15:49.391000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2137", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53990743, "iid": 2136, "project_id": 7603319, "title": "Show error message in Analyze UI when pipeline for extractor is missing, even if extractor is installed", "description": "", "state": "closed", "created_at": "2020-07-06T20:29:43.065000Z", "updated_at": "2020-07-06T21:01:29.650000Z", "closed_at": "2020-07-06T21:01:29.491000Z", "labels": ["UI", "bug", "flow::Review"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2136", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53990516, "iid": 2135, "project_id": 7603319, "title": "\"Explore\" page doesn't load for custom (as opposed to plugin-based) topics and models", "description": "", "state": "closed", "created_at": "2020-07-06T20:21:13.473000Z", "updated_at": "2020-07-06T21:01:29.994000Z", "closed_at": "2020-07-06T21:01:29.943000Z", "labels": ["UI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2135", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53985409, "iid": 2134, "project_id": 7603319, "title": "Introduce plugin variants to support multiple versions of target-snowflake e.a.", "description": "https://github.com/datamill-co/target-snowflake and https://github.com/transferwise/pipelinewise-target-snowflake are both more mature and battle-tested than our own https://gitlab.com/meltano/target-snowflake. \n\nAs described in https://gitlab.com/meltano/target-snowflake/-/issues/27, our version is currently incompatible with macOS Catalina. Instead of investing the time to address that, we may very well be better off recommending users use one of the other versions instead.", "state": "closed", "created_at": "2020-07-06T17:34:38.831000Z", "updated_at": "2020-10-06T20:03:41.196000Z", "closed_at": "2020-10-06T20:03:41.106000Z", "labels": ["Accepting Merge Requests", "Load", "flow::Review"], "assignees": [87854], "user_notes_count": 11, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2134", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53978845, "iid": 2133, "project_id": 7603319, "title": "Automatically `meltano install` missing tap and target when running `meltano elt`", "description": "`meltano elt tap-foo target-bar` will already add `tap-foo` and `target-bar` to the project (and `meltano.yml`) if they are not already present. \n\nHowever, if they've already been added to the project, but are not actually installed into the `.meltano` directory (such as after cloning a repo from version control without running `meltano install`), `meltano elt` fails with an ugly error message, as reported by @nehiljain:\n\n```\nELT could not complete, an error happened during the process: Cannot start tap or target: [Errno 2] No such file or directory: '/Users/nehiljain/snaptravel/universal-elt-pipeline/airflow-elt/.meltano/extractors/tap-github/venv/bin/tap-github': '/Users/nehiljain/snaptravel/universal-elt-pipeline/airflow-elt/.meltano/extractors/tap-github/venv/bin/tap-github'\n```\n\nWe can do much better, and automatically `meltano install` these missing taps and targets when running `meltano elt` as well.", "state": "opened", "created_at": "2020-07-06T15:50:24.466000Z", "updated_at": "2020-08-11T21:17:43.271000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "CLI"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2133", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53899708, "iid": 2132, "project_id": 7603319, "title": "Support WEB_CONCURRENCY env var as alternative to WORKERS", "description": "", "state": "closed", "created_at": "2020-07-03T22:24:51.760000Z", "updated_at": "2020-07-03T22:46:31.661000Z", "closed_at": "2020-07-03T22:46:31.581000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2132", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53897981, "iid": 2131, "project_id": 7603319, "title": "Have \"true\" environment variables take precedence over those defined in `.env`", "description": "", "state": "closed", "created_at": "2020-07-03T20:54:35.645000Z", "updated_at": "2020-07-06T21:47:31.316000Z", "closed_at": "2020-07-06T21:47:31.275000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2131", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53897970, "iid": 2130, "project_id": 7603319, "title": "Have CLI respect `MELTANO_PROJECT_ROOT` env var when set instead of looking at current directory", "description": "", "state": "closed", "created_at": "2020-07-03T20:53:34.576000Z", "updated_at": "2020-07-03T22:41:51.924000Z", "closed_at": "2020-07-03T22:41:51.810000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2130", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53897920, "iid": 2129, "project_id": 7603319, "title": "Cast values of `kind: integer` settings set through environment variables", "description": "", "state": "closed", "created_at": "2020-07-03T20:52:13.061000Z", "updated_at": "2020-07-03T22:41:52.099000Z", "closed_at": "2020-07-03T22:41:52.046000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2129", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53897871, "iid": 2128, "project_id": 7603319, "title": "Allow alternative env vars to be specified for settings", "description": "", "state": "closed", "created_at": "2020-07-03T20:49:20.194000Z", "updated_at": "2020-07-06T17:40:29.283000Z", "closed_at": "2020-07-03T22:41:52.238000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2128", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53261797, "iid": 2127, "project_id": 7603319, "title": "Allow config stored in `meltano.yml` or environment to be edited in the UI when running locally.", "description": "When running locally, we can just write to `meltano.yml` or `.env` as appropriate; no need to restrict ourselves to settings stored in the system database.", "state": "closed", "created_at": "2020-07-01T22:05:59.059000Z", "updated_at": "2020-07-16T17:42:46.114000Z", "closed_at": "2020-07-16T17:42:46.029000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2127", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53260867, "iid": 2126, "project_id": 7603319, "title": "Consider making `tap-gitlab` `api_url` and `target-postgres` `host` editable in the UI", "description": "These settings were protected because of a potential security issue (https://gitlab.com/meltano/meltano/-/issues/1187, https://gitlab.com/meltano/meltano/-/merge_requests/1099), but that should really only matter when running Meltano UI in production, not locally, or when you can be sure only trusted people will have access.", "state": "opened", "created_at": "2020-07-01T22:04:11.944000Z", "updated_at": "2020-09-07T15:32:56.826000Z", "closed_at": null, "labels": ["bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2126", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 53173075, "iid": 2125, "project_id": 7603319, "title": "Option for full extraction", "description": "Sometimes we need to rerun a period of data, or fully refresh data from a data source. It would be useful to allow \"bypassing\" the state or clearing it out.\n\nI envision this being a boolean flag on the `meltano elt` command that would simple ignore the state and run the tap as if it were the first run. Something like:\n\n`meltano elt <tap> <target> --full-refresh`\n\nSome prior art for reference, from dbt https://docs.getdbt.com/docs/running-a-dbt-project/command-line-interface/run/#refresh-incremental-models", "state": "closed", "created_at": "2020-07-01T19:28:08.513000Z", "updated_at": "2020-07-28T18:08:03.170000Z", "closed_at": "2020-07-17T23:30:46.523000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 7, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2125", "weight": null, "has_tasks": false, "author_id": 71418, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 52504892, "iid": 2124, "project_id": 7603319, "title": "Saving plugin config in UI fails when config contains custom properties", "description": "", "state": "closed", "created_at": "2020-06-30T20:54:46.015000Z", "updated_at": "2020-06-30T21:04:43.095000Z", "closed_at": "2020-06-30T21:04:43.044000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2124", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 52397634, "iid": 2123, "project_id": 7603319, "title": "Show current values and their source in `meltano config <plugin> list`", "description": "", "state": "closed", "created_at": "2020-06-30T17:45:57.499000Z", "updated_at": "2020-06-30T21:04:43.305000Z", "closed_at": "2020-06-30T21:04:43.255000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2123", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 52396399, "iid": 2122, "project_id": 7603319, "title": "Allow custom (`meltano.yml`-`config`-defined) settings to be overridden using environment", "description": "Right now, you can run `meltano set config <plugin> set some_field some_value` and get `some_field: some_value` added to the plugin's `config` object in `meltano.yml`, but you can not then override it using `<PLUGIN>_SOME_FIELD`.", "state": "closed", "created_at": "2020-06-30T17:43:45.125000Z", "updated_at": "2020-06-30T21:04:43.625000Z", "closed_at": "2020-06-30T21:04:43.441000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2122", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 52391635, "iid": 2121, "project_id": 7603319, "title": "New project `meltano.yml` contains `plugins: {}`", "description": "It shouldn't contain empty objects at all.", "state": "closed", "created_at": "2020-06-30T17:37:15.124000Z", "updated_at": "2020-06-30T18:03:53.329000Z", "closed_at": "2020-06-30T18:03:53.271000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2121", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 52305351, "iid": 2120, "project_id": 7603319, "title": "Allow Meltano UI logo to be changed using configuration", "description": "This will allow consultancies to offer a whitelabel Meltano UI experience to their clients.", "state": "closed", "created_at": "2020-06-30T15:05:18.876000Z", "updated_at": "2020-07-20T20:11:37.519000Z", "closed_at": "2020-07-09T23:29:22.753000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2120", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 52296116, "iid": 2119, "project_id": 7603319, "title": "Document that `meltano schedule` `interval` option supports any cron expression", "description": "Or Barda [asked on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1593517590381300):\n\n> Hi, is there a way to schedule ELT in a smaller granularity than hourly?\n\nI responded:\n\n>>>\nYes! The schedule `interval` option supports any cron expression (e.g. `* * * * *` for every minute) as well as the `@`-prefixed presets supported by Airflow: https://airflow.apache.org/docs/stable/scheduler.html#dag-runs (e.g. `@hourly` ).\n>>>", "state": "closed", "created_at": "2020-06-30T14:47:42.860000Z", "updated_at": "2020-06-30T23:44:12.883000Z", "closed_at": "2020-06-30T23:44:12.818000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2119", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 51528299, "iid": 2118, "project_id": 7603319, "title": "Document how to use an existing Airflow installation to orchestrate Meltano", "description": "Or Barda [asked on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1593340568356000):\n\n> Hi guys, is there a way to use already running AirFlow in Meltano as the orchestrator?\n\nI responded:\n\n>>>\nAbsolutely! Using Meltano's \"built-in\"  Airflow orchestrator really just means installing it into a Meltano-managed Python venv inside `.meltano`, and invoking it through `meltano invoke` so that some default Meltano-compatible configuration can be dynamically applied at invocation time: https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml#L840-855\n\nThat config points Airflow to `$MELTANO_PROJECT_ROOT/orchestrate/dags` to look for dags, which is where you'll find https://gitlab.com/meltano/files-airflow/-/blob/master/bundle/orchestrate/dags/meltano.py (since `meltano add orchestrator airflow` also addd the Airflow file bundle from that repo).\n\nThat DAG should work with any Airflow installation as long as the `MELTANO_PROJECT_ROOT` env var is set to point at the Meltano project directory, and as long as Meltano itself is installed and `meltano install` has been run inside the project.\n\nThat setup assumes you'll use `meltano schedule` to schedule your `meltano elt` pipelines, since it iterates over the result of `meltano schedule list --format=json` to create DAGs for each, but you can also create your own DAGs for any pipeline you fancy using `BashOperator` + `meltano elt`, or `DockerOperator` + `docker run <your project image> elt ...`  (see https://meltano.com/#containerization)\n>>>", "state": "closed", "created_at": "2020-06-29T15:17:07.636000Z", "updated_at": "2020-12-17T15:45:44.319000Z", "closed_at": "2020-07-01T16:17:26.995000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2118", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50218602, "iid": 2117, "project_id": 7603319, "title": "Add tap-github to known taps", "description": "### Problem to solve\nLike tap-gitlab we should add tap-github to known meltano taps\n\n\n### Target audience\nAll meltano users\n\n\n### Further details\n\n\n\n### Proposal\nI was working on an ELT pipeline to analyse apache airflow github repository. I tried the github tap as a custom tap and it worked smoothly. I think we should be able to make it one of the standard taps known to meltano\n\n\n### What does success look like, and how can we measure that?\nUsers of meltano don't need to add github tap as custom tap but instead do \n`meltano add extractor tap-github`\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-06-27T21:20:31.874000Z", "updated_at": "2020-08-25T20:45:20.371000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2117", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 783199, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50149179, "iid": 2116, "project_id": 7603319, "title": "Prefix `meltano elt` log output with tap/target/dbt labels", "description": "Users have had difficulty finding error messages in the long `meltano elt` output generated when a tap or target fails.", "state": "closed", "created_at": "2020-06-26T23:08:29.884000Z", "updated_at": "2020-12-30T22:38:49.522000Z", "closed_at": "2020-08-04T23:40:47.379000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2116", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1361881, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50149167, "iid": 2115, "project_id": 7603319, "title": "`meltano` commands leave empty `.meltano/run` directory when run in non-project dir", "description": "", "state": "closed", "created_at": "2020-06-26T23:07:32.232000Z", "updated_at": "2020-07-16T18:01:14.942000Z", "closed_at": "2020-07-16T18:01:14.870000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2115", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50135485, "iid": 2114, "project_id": 7603319, "title": "Transformation does not work with `target-postgres` when `url` is used rather than `user`/`password`/`host`/`port`/`dbname`", "description": "Related to https://gitlab.com/meltano/meltano/-/merge_requests/1710.\n\nWhen invoked through Meltano, `dbt`'s DB connection is configured using the appropriate profile in [`transform/profile/profiles.yml`](https://gitlab.com/meltano/files-dbt/-/blob/master/bundle/transform/profile/profiles.yml), which uses the `PG_{ADDRESS,PORT,USERNAME,PASSWORD,DATABASE}` env vars that correspond to `target-postgres`'s `user`/`password`/`host`/`port`/`dbname` settings.\n\nWhen `url` is used, `PG_URL` is populated but none of those other env vars are, so `dbt` won't be able to infer the connection details from the environment.\n\nPer https://docs.getdbt.com/docs/supported-databases/profile-postgres/, `dbt` doesn't support an `url` property for `postgres`, so Meltano will have to deconstruct the URL and populate the individual `PG_*` env vars as appropriate.\n\nIdeally this wouldn't be hard-coded `target-postgres` specific behavior, and Meltano would have some built-in mechanism to deconstruct connection URLs.", "state": "opened", "created_at": "2020-06-26T15:59:42.798000Z", "updated_at": "2020-06-26T15:59:42.798000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Transform", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2114", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50101280, "iid": 2113, "project_id": 7603319, "title": "airflow fails to start in v1.37.0", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\n\n`FileNotFound` error for `.meltano/run/airflow/airflow.cfg` when invoking the airflow server on a new project.\n\nRolling back to 1.36.1, installing airbrake, and then upgrading again fixed the issue.\n\n### What is the expected *correct* behavior?\n_What should be happening?_\n\nThe Airflow server should start\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\n```bash\nmeltano init sampleproj\ncd sampleproj/\nmeltano add orchestrator airflow\nmeltano invoke airflow webserver -D\n```\n\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\n\n```\n[2020-06-25 21:42:30,152|W|MainThread|root] before_configure hook 'before_configure' has failed: [Errno 2] No such file or directory: '/Users/cjk/fixd/projects/meltano/sampleproj/.meltano/run/airflow/airflow.cfg'\n[2020-06-25 21:42:30,152|E|MainThread|root] [Errno 2] No such file or directory: '/Users/cjk/fixd/projects/meltano/sampleproj/.meltano/run/airflow/airflow.cfg'\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/shutil.py\", line 566, in move\n    os.rename(src, real_dst)\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/cjk/fixd/projects/meltano/sampleproj/.meltano/run/airflow/airflow.cfg' -> '/Users/cjk/fixd/projects/meltano/sampleproj/.meltano/orchestrators/airflow/airflow.cfg'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/cli/invoke.py\", line 31, in invoke\n    service = invoker_factory(project, plugin, prepare_with_session=session)\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/core/plugin_invoker.py\", line 27, in invoker_factory\n    invoker.prepare(prepare_with_session)\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/core/plugin_invoker.py\", line 96, in prepare\n    with self.plugin.trigger_hooks(\"configure\", self, session):\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 112, in __enter__\n    return next(self.gen)\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/core/behavior/hookable.py\", line 68, in trigger_hooks\n    self.__class__.trigger(self, f\"before_{hook_name}\", *args, **kwargs)\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/core/behavior/hookable.py\", line 93, in trigger\n    raise err\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/core/behavior/hookable.py\", line 87, in trigger\n    hook_func(target, *args, **kwargs)\n  File \"/Users/cjk/fixd/meltano/venv/lib/python3.7/site-packages/meltano/core/plugin/airflow.py\", line 75, in before_configure\n    shutil.move(airflow_cfg_path, stub_path)\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/shutil.py\", line 580, in move\n    copy_function(src, real_dst)\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/shutil.py\", line 266, in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/shutil.py\", line 120, in copyfile\n    with open(src, 'rb') as fsrc:\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/cjk/fixd/projects/meltano/sampleproj/.meltano/run/airflow/airflow.cfg'\nAn error occured: [Errno 2] No such file or directory: '/Users/cjk/fixd/projects/meltano/sampleproj/.meltano/run/airflow/airflow.cfg'.\nAborted!\n```\n\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\nI suspect something in !1711 triggered this.\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-06-26T01:47:53.886000Z", "updated_at": "2020-06-26T16:11:17.573000Z", "closed_at": "2020-06-26T16:11:17.521000Z", "labels": ["bug", "flow::Review", "regression"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2113", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321882, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50097089, "iid": 2112, "project_id": 7603319, "title": "Stop inheriting Meltano venv when invoking Airflow", "description": "Follow-up to https://gitlab.com/meltano/meltano/-/issues/2060\n\nRelated to https://gitlab.com/meltano/meltano/-/issues/2057", "state": "closed", "created_at": "2020-06-25T22:17:56.384000Z", "updated_at": "2020-10-06T16:10:26.838000Z", "closed_at": "2020-10-06T16:10:26.766000Z", "labels": ["Accepting Merge Requests", "Orchestrate", "flow::Doing"], "assignees": [2585766], "user_notes_count": 0, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2112", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 2585766, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50094093, "iid": 2111, "project_id": 7603319, "title": "Add support for `<ENV>_FILE` config env vars to support Docker Secrets", "description": "Per https://docs.docker.com/engine/swarm/secrets/#build-support-for-docker-secrets-into-your-images:\n\n> If you develop a container that can be deployed as a service and requires sensitive data, such as a credential, as an environment variable, consider adapting your image to take advantage of Docker secrets. One way to do this is to ensure that each parameter you pass to the image when creating the container can also be read from a file.", "state": "opened", "created_at": "2020-06-25T20:10:14.971000Z", "updated_at": "2020-10-05T18:16:12.890000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [6573016], "user_notes_count": 5, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2111", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 6573016, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50094029, "iid": 2110, "project_id": 7603319, "title": "Have users explicitly choose to add related transform, model, and dashboard plugins when adding an extractor through the UI", "description": "The UI currently always runs the equivalent of `meltano add --include-related extractor <name>`, but the `--include-related` flag should be optional.", "state": "opened", "created_at": "2020-06-25T20:08:09.700000Z", "updated_at": "2020-08-07T16:58:27.015000Z", "closed_at": null, "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2110", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50093951, "iid": 2109, "project_id": 7603319, "title": "Using UI to add extractor with related transform plugin to project fails when dbt hasn't yet been installed", "description": "`dbt` will automatically be installed when `meltano elt` is run with `--transform={run,only}`, but since _adding_ the transform requires `transform/dbt_project.yml` to already exist, this will fail if the [`dbt` file bundle](https://gitlab.com/meltano/files-dbt) hasn't already been added to the project, which is automatically installed along with `meltano add transformer dbt`.\n\nDo we need to explicitly make `dbt` an install-time dependency of `transform` plugins, and ensure it and its own related plugins (i.e. the `dbt` file bundle) are installed first?", "state": "closed", "created_at": "2020-06-25T20:05:13.365000Z", "updated_at": "2020-07-15T16:12:50.983000Z", "closed_at": "2020-07-15T16:12:50.912000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2109", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50093852, "iid": 2108, "project_id": 7603319, "title": "Make it clear in UI when it's running in read-only mode", "description": "In read-only mode, Meltano can only be used to list existing pipelines, manually run them, and view the status and logs of the latest run.\n\nIn read-write mode, it can be used to actually manage the project: add and configure extractors, loaders, and pipelines.\n\nLocally in development, you'd usually run it in the default read-write mode, but when deploying a [containerized Meltano project](https://meltano.com/#containerization), changes cannot be made anymore since the project has been packaged up, and the UI runs in read-only mode.\n\nRelated to https://gitlab.com/meltano/meltano/-/issues/2083", "state": "closed", "created_at": "2020-06-25T20:01:18.327000Z", "updated_at": "2020-07-09T22:39:59.385000Z", "closed_at": "2020-07-09T22:39:59.304000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2108", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50093800, "iid": 2107, "project_id": 7603319, "title": "UI does not have access to logs when pipelines are running in different container(s)", "description": "A Docker container running `meltano invoke airflow scheduler` or `meltano elt` will generate logs for each pipeline run at `.meltano/run/elt/<pipeline name aka job ID>/<run ID>/elt.log`, that currently can't be read from the Docker container running `meltano ui`, since they both have their own `.meltano` directory.\n\nWe can start by simply allowing a logs path to be set using an environment variable. https://gitlab.com/meltano/meltano/-/issues/2099 would make this more discoverable.", "state": "opened", "created_at": "2020-06-25T19:58:38.274000Z", "updated_at": "2020-08-07T17:18:08.237000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2107", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50004441, "iid": 2106, "project_id": 7603319, "title": "Provide better docker-compose.yml example", "description": "", "state": "closed", "created_at": "2020-06-23T23:11:16.943000Z", "updated_at": "2020-09-10T16:10:02.718000Z", "closed_at": "2020-09-10T16:10:02.681000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854, 6382744], "user_notes_count": 7, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2106", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1399398, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 50004068, "iid": 2105, "project_id": 7603319, "title": "Stop automatically running Airflow scheduler as part of Meltano UI", "description": "In real-world scenarios, running it separately makes much more sense.\n\nThis tripped me up in https://gitlab.com/meltano/meltano/-/issues/2048, where a Docker container with the `meltano` entrypoint and `ui` command would not just start Meltano UI but also Airflow.", "state": "closed", "created_at": "2020-06-23T22:47:18.562000Z", "updated_at": "2021-02-24T17:10:53.823000Z", "closed_at": "2020-06-30T17:54:48.166000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2105", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 49948508, "iid": 2104, "project_id": 7603319, "title": "Exposed Apache htpasswd file", "description": "Potential security breach. See /cloud/packer/files/etc/caddy/htpasswd", "state": "closed", "created_at": "2020-06-23T11:02:19.610000Z", "updated_at": "2020-06-23T17:15:55.961000Z", "closed_at": "2020-06-23T17:15:55.925000Z", "labels": [], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2104", "weight": null, "has_tasks": false, "author_id": 4648648, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 49452773, "iid": 2103, "project_id": 7603319, "title": "Allow config to be specified in nested object in meltano.yml", "description": "```sh\nmeltano config tap-gitlab set metadata.tap_gitlab-commits.replication-key created_at\n``` \n\nResults in:\n\n```yaml\nconfig:\n  metadata.tap_gitlab-commits.replication-key: created_at\n```\n\nWe'd like to also support:\n\n```sh\nmeltano config tap-gitlab set metadata tap_gitlab-commits replication-key created_at\n```\n\nWhich would result in:\n\n```yaml\nconfig:\n  metadata:\n    tap_gitlab-commits:\n      replication-key: created_at\n```\n\nOf course the following two should still behave identically, no matter how the actual data is stored in `meltano.yml`:\n\n```sh\nmeltano config tap-gitlab unset metadata tap_gitlab-commits replication-key\nmeltano config tap-gitlab unset metadata.tap_gitlab-commits.replication-key\n```", "state": "closed", "created_at": "2020-06-19T15:50:37.651000Z", "updated_at": "2020-06-19T20:26:05.998000Z", "closed_at": "2020-06-19T20:26:05.937000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2103", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 46726241, "iid": 2102, "project_id": 7603319, "title": "`meltano upgrade` steps after upgrading package fail because old code is used", "description": "Running `meltano upgrade` to upgrade v1.35.0 to v1.36.0 didn't go as smoothly as it could have:\n\n```sh\n$ meltano upgrade\nUpgrading `meltano` package...\n[snip]\nInstalling collected packages: meltano\n  Attempting uninstall: meltano\n    Found existing installation: meltano 1.35.0\n    Uninstalling meltano-1.35.0:\n      Successfully uninstalled meltano-1.35.0\n    Running setup.py install for meltano ... done\nSuccessfully installed meltano-1.36.0\nThe `meltano` package has been upgraded.\nReloading UI if running...\n\nUpdating files managed by plugins...\n[2020-06-17 10:21:58,050|E|MainThread|root] Meltano could not update /Users/douwemaan/Development/meltano-projects/demo-project/orchestrate/dags/meltano.py: [Errno 2] No such file or directory: '/Users/douwemaan/.pyenv/versions/3.7.6/envs/meltano-demo-project/lib/python3.7/site-packages/meltano/core/bundle/dags/meltano.py'\n[2020-06-17 10:21:58,050|E|MainThread|root] Meltano could not update /Users/douwemaan/Development/meltano-projects/demo-project/transform/profile/profiles.yml: [Errno 2] No such file or directory: '/Users/douwemaan/.pyenv/versions/3.7.6/envs/meltano-demo-project/lib/python3.7/site-packages/meltano/core/bundle/transform/profile/profiles.yml'\n\nApplying migrations to system database...\n[2020-06-17 10:21:58,052|I|MainThread|alembic.runtime.migration] Context impl SQLiteImpl.\n[2020-06-17 10:21:58,053|I|MainThread|alembic.runtime.migration] Will assume non-transactional DDL.\nSystem database up-to-date.\n\nRecompiling models...\n[2020-06-17 10:22:01,325|E|MainThread|root] Meltano could not parse the `discovery.yml` returned by the server.\n\nMeltano and your Meltano project have been upgraded!\n```\n\nWe could have `meltano upgrade` upgrade the package and then shell out to `meltano upgrade --skip-package`, so we get the new implementation.", "state": "closed", "created_at": "2020-06-17T15:45:48.560000Z", "updated_at": "2020-06-18T18:03:48.418000Z", "closed_at": "2020-06-18T18:03:48.363000Z", "labels": ["CLI", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2102", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 46712559, "iid": 2101, "project_id": 7603319, "title": "Make discovery.yml version mismatch error message more clear", "description": "This is currently causing confusion, as seen [on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1592347660283700):\n\n> Any idea why I'm seeing \"Meltano could not parse the discovery.yml returned by the server\" when running meltano commands? Doesn't seem to affect functionality\n\nI responded:\n\n>>>\nWhat happened is that I had to increment the version of the meltano.yml file format because I added a new plugin type: files. As a result, pre-v1.36.0 Meltano would try to fetch the latest version from meltano.com/discovery.yml and find a version that was too new and it couldn\u2019t parse (edited) \n\nWhen that happens, Meltano falls back on a cached copy from the latest successful fetch, or if there is none, the version bundled with the meltano package\n>>>\n\nWe can explain this more clearly in the error message.", "state": "closed", "created_at": "2020-06-17T15:32:09.457000Z", "updated_at": "2020-06-30T17:55:34.980000Z", "closed_at": "2020-06-30T17:55:34.766000Z", "labels": ["Accepting Merge Requests", "CLI", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2101", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 45628440, "iid": 2100, "project_id": 7603319, "title": "Have `meltano ui setup` write to `.env` instead of `ui.cfg`", "description": "Follow-up to https://gitlab.com/meltano/meltano/-/issues/2090\n\nAs I wrote in https://gitlab.com/meltano/meltano/-/merge_requests/1697#note_362387666:\n\n> I'd actually prefer to move away from `ui.cfg` sooner rather than later (while continuing to support it for legacy reasons), since it doesn't have any benefits over setting these variables through `.env` or the actual environment, which is more consistent with how the rest of Meltano is configured. `meltano ui setup` could write to `.env` instead of `ui.cfg`, or just print the appropriate `export X=Y` statements with some instructions", "state": "closed", "created_at": "2020-06-16T21:20:36.144000Z", "updated_at": "2020-07-07T17:55:52.145000Z", "closed_at": "2020-07-07T17:55:52.050000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2100", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 45372806, "iid": 2099, "project_id": 7603319, "title": "Let Meltano itself and Meltano UI be configured using `meltano config` and `meltano.yml` just like plugins", "description": "", "state": "closed", "created_at": "2020-06-16T16:13:09.523000Z", "updated_at": "2020-07-08T01:29:33.167000Z", "closed_at": "2020-07-08T01:29:33.063000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2099", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 45335968, "iid": 2098, "project_id": 7603319, "title": "Tests are constantly downloading meltano.com/discovery.yml", "description": "Simply always using the bundled discovery.yml should speed up the tests.", "state": "closed", "created_at": "2020-06-16T15:24:19.490000Z", "updated_at": "2020-06-16T16:43:32.457000Z", "closed_at": "2020-06-16T16:43:32.417000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2098", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 44347026, "iid": 2097, "project_id": 7603319, "title": "`test_init` test hangs and causes `pytest_postgres` job timeout", "description": "Job [#596347221](https://gitlab.com/meltano/meltano/-/jobs/596347221) failed for 4d8a858f204278c73b05a649f8abeaf19eaaa163.", "state": "closed", "created_at": "2020-06-15T23:16:40.394000Z", "updated_at": "2020-06-16T22:24:43.920000Z", "closed_at": "2020-06-16T22:24:43.880000Z", "labels": ["P1", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2097", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 44237758, "iid": 2096, "project_id": 7603319, "title": "CLI output is noisy", "description": "```sh\n$ meltano config tap-gitlab\n[2020-06-15 16:19:31,313|I|MainThread|alembic.runtime.migration] Context impl SQLiteImpl.\n[2020-06-15 16:19:31,313|I|MainThread|alembic.runtime.migration] Will assume non-transactional DDL.\nSystem database up-to-date.\n{\"api_url\": \"https://gitlab.com\", \"private_token\": \"\", \"groups\": \"meltano\", \"projects\": \"meltano/demo-project\", \"ultimate_license\": false, \"start_date\": \"2020-05-01\"}\n```\n\nThe first 3 lines of output are a distraction more than anything.", "state": "closed", "created_at": "2020-06-15T21:27:04.894000Z", "updated_at": "2020-06-15T22:04:18.195000Z", "closed_at": "2020-06-15T22:04:18.074000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2096", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 43055886, "iid": 2095, "project_id": 7603319, "title": "Allow list of plugin names of same type to be provided to `meltano add` and `meltano install`", "description": "", "state": "closed", "created_at": "2020-06-14T20:48:03.520000Z", "updated_at": "2020-06-15T20:21:28.620000Z", "closed_at": "2020-06-15T20:21:24.285000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2095", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 42966450, "iid": 2094, "project_id": 7603319, "title": "Consistently refer to plugin types and names in CLI output", "description": "", "state": "closed", "created_at": "2020-06-11T17:51:18.771000Z", "updated_at": "2020-06-11T20:40:44.997000Z", "closed_at": "2020-06-11T20:40:44.938000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2094", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 42966279, "iid": 2093, "project_id": 7603319, "title": "Installing transform plugin fails with error if dbt is not installed yet", "description": "", "state": "closed", "created_at": "2020-06-11T17:42:57.256000Z", "updated_at": "2020-06-11T20:40:20.897000Z", "closed_at": "2020-06-11T20:40:20.799000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2093", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 42965501, "iid": 2092, "project_id": 7603319, "title": "`meltano install <plugin_type> --include-related ` installs too many related plugins", "description": "If orchestrator `airflow` is in the project, `meltano install orchestrators --include-related` should install `airflow` and any plugins related to `airflow`, but not plugins related to plugins that aren't orchestrators.", "state": "closed", "created_at": "2020-06-11T17:37:00.440000Z", "updated_at": "2020-07-03T22:33:07.015000Z", "closed_at": "2020-06-11T20:35:39.103000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2092", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36430286, "iid": 2091, "project_id": 7603319, "title": "Support PORT env var as alternative to MELTANO_API_PORT", "description": "As @rabidaudio wrote in https://gitlab.com/meltano/meltano/-/issues/2081:\n\n> Heroku injects a `PORT` environment variable to tell the app which port to expose. Meltano allows this but uses `MELTANO_API_PORT`.", "state": "closed", "created_at": "2020-06-08T21:30:27.075000Z", "updated_at": "2020-07-03T22:46:32.225000Z", "closed_at": "2020-07-03T22:46:32.130000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2091", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36425633, "iid": 2090, "project_id": 7603319, "title": "Allow SERVER_NAME, SECRET_KEY, and SECURITY_PASSWORD_SALT to be set using environment instead of ui.cfg", "description": "As @rabidaudio wrote in https://gitlab.com/meltano/meltano/-/issues/2081:\n\n> Configuration options `SERVER_NAME`, `SECRET_KEY`, and `SECURITY_PASSWORD_SALT` must be read from a `ui.cfg` file in the project directory, and cannot be set via environment variables.", "state": "closed", "created_at": "2020-06-08T21:26:16.161000Z", "updated_at": "2020-06-19T15:50:32.172000Z", "closed_at": "2020-06-19T15:50:32.117000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [689351], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2090", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 689351, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36194438, "iid": 2089, "project_id": 7603319, "title": "New projects contain Airflow and dbt-specific files even when these plugins are not used", "description": "We can add a new `file` plugin type that will be installed automatically alongside the relevant plugin. We can also use this to support `meltano add file dockerfile` in https://gitlab.com/meltano/meltano/-/issues/2048.", "state": "closed", "created_at": "2020-06-08T18:00:01.892000Z", "updated_at": "2020-06-15T21:32:08.170000Z", "closed_at": "2020-06-15T21:32:07.987000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2089", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36182358, "iid": 2088, "project_id": 7603319, "title": "Add \"meltano upgrade\" subcommands", "description": "`meltano upgrade` updates:\n- package\n- files\n- database\n- models\n\nEach deserves its own subcommand.", "state": "closed", "created_at": "2020-06-08T17:49:35.370000Z", "updated_at": "2020-06-09T17:05:47.535000Z", "closed_at": "2020-06-09T17:05:47.477000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2088", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36168337, "iid": 2087, "project_id": 7603319, "title": "Allow plugin type to be specified on invoke and config commands", "description": "Since plugins of different types can have the same name (see, for example, extractors and transforms), we need to be able to explicitly specify the type if the default (first found) plugin was not the intended one.", "state": "closed", "created_at": "2020-06-08T17:34:47.163000Z", "updated_at": "2020-06-09T16:29:26.612000Z", "closed_at": "2020-06-09T16:29:26.558000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2087", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36157306, "iid": 2086, "project_id": 7603319, "title": "\"meltano config --format=json\" prints Python object, not actual JSON", "description": "", "state": "closed", "created_at": "2020-06-08T17:21:22.672000Z", "updated_at": "2020-06-09T16:13:46.838000Z", "closed_at": "2020-06-09T16:13:46.776000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2086", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 36133134, "iid": 2085, "project_id": 7603319, "title": "When meltano.yml is updated programatically, order of object and set values changes", "description": "As seen in https://gitlab.com/meltano/demo-project/-/commit/166866c84ae8105e3300dbbeae98c3265ff7d3d3", "state": "closed", "created_at": "2020-06-08T16:59:34.546000Z", "updated_at": "2020-06-08T17:40:10.171000Z", "closed_at": "2020-06-08T17:40:10.122000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2085", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35509980, "iid": 2084, "project_id": 7603319, "title": "meltano init error 13 permission denied to copy files", "description": "Meltano init test\n\nthrowing error saying Error 13 permission denied. It does create some folders, but not sure whether any important things not copied over. \n\nI am using Ubuntu 18.04 WSL, \nPython 3.6.9 \nmeltano, version 1.34.2\n\nError log:\n\nhttps://gitlab.com/snippets/1983842", "state": "closed", "created_at": "2020-06-06T09:18:13.922000Z", "updated_at": "2020-06-17T19:56:57.164000Z", "closed_at": "2020-06-17T19:56:57.088000Z", "labels": ["bug"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2084", "weight": null, "has_tasks": false, "author_id": 6178048, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35291513, "iid": 2083, "project_id": 7603319, "title": "`MELTANO_READONLY` and `MELTANO_AUTHENTICATION` interact in confusing ways", "description": "According to [the documentation](https://www.meltano.com/docs/environment-variables.html#authentication):\n\n> If read-only mode is enabled (`MELTANO_READONLY=1`), authentication will only be required for write actions.\n\nThis means that authentication can't be used to protect read access. Making a meltano server publicly accessible means you expose your potentially sensitive business data to the world", "state": "closed", "created_at": "2020-06-01T22:41:25.588000Z", "updated_at": "2020-07-09T20:43:53.590000Z", "closed_at": "2020-07-09T20:43:53.444000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2083", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35204862, "iid": 2082, "project_id": 7603319, "title": "Allow system database schema to be overridden when PostgreSQL is used", "description": "See https://gitlab.com/meltano/meltano/-/issues/2072#note_352207845", "state": "opened", "created_at": "2020-05-29T23:37:05.810000Z", "updated_at": "2020-10-05T18:15:19.052000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [689351], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2082", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 689351, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35203936, "iid": 2081, "project_id": 7603319, "title": "Support for 12-factor", "description": "We found some quirks getting Meltano spun up in production in a [12-factor environment](https://en.wikipedia.org/wiki/Twelve-Factor_App_methodology). Heroku is the most notable environment like this but I believe many Kubernetes environments follow similar patterns, including ours.\n\n- Often a load balancer is used in front of server processes and used as SSL termination. For the UI to accept HTTP traffic from the load balancers, `FORWARDED_ALLOW_IPS=*` is required, as noted in #2015 . Not really Meltano's fault but worth documenting\n- Configuration options `SERVER_NAME`, `SECRET_KEY`, and `SECURITY_PASSWORD_SALT` must be read from a `ui.cfg` file in the project directory, and cannot be set via environment variables. I'd be happy to send a PR for this, it seems like an easy fix\n- Specifying `SERVER_NAME` causes Flask to refuse to respond to traffic whose hostname doesn't match this property. However, often load balancers are doing health checks to see if the app is running so that it can replace processes when they die. AWS ALB (and others too I bet) don't actually include the hostname in the health check requests, so they always think the app is unhealthy. Setting it to `None` allows all traffic to be accepted but generates a security warning at boot\n- Some discrepancies in environment variable names mean there's got to be some remapping. Heroku injects a `PORT` environment variable to tell the app which port to expose. Meltano allows this but uses `MELTANO_API_PORT`. Databases get injected as `DATABASE_URL` and need to get set to `MELTANO_DATABASE_URI` and broken out into `PG_DATABASE`,`PG_ADDRESS`, etc.  Not a problem but I wanted to note it here just in case\n\nAs a workaround, we use a little script like this to boot the ui in production:\n\n```py\nimport sys\nimport os\nfrom urllib.parse import urlparse\nfrom meltano.cli import main\n\nos.environ['FORWARDED_ALLOW_IPS'] = '*'\n\nif os.getenv('DATABASE_URL'):\n  os.environ['MELTANO_DATABASE_URI'] = os.getenv('DATABASE_URL')\n  os.environ['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')\n  parts = urlparse(os.environ['DATABASE_URL'])\n  os.environ['PG_DATABASE'] = parts.path[1:]\n  os.environ['PG_PASSWORD'] = parts.password\n  os.environ['PG_USERNAME'] = parts.username\n  os.environ['PG_ADDRESS'] = parts.hostname\n  os.environ['PG_PORT'] = str(parts.port)\n\nif os.getenv('PORT'):\n  os.environ['MELTANO_API_PORT'] = os.getenv('PORT')\n\nif not os.path.isfile('ui.cfg'):\n  f = open('ui.cfg', 'w')\n  try:\n    f.write('SERVER_NAME = None\\n')\n    # f.write(f\"SERVER_NAME = \\\"{os.getenv('SERVER_NAME')}\\\"\\n\")\n    f.write(f\"SECRET_KEY = \\\"{os.getenv('SECRET_KEY')}\\\"\\n\")\n    f.write(f\"SECURITY_PASSWORD_SALT = \\\"{os.getenv('SECURITY_PASSWORD_SALT')}\\\"\\n\")\n  finally:\n    f.close()\n\nsys.argv = ['meltano', 'ui', 'start']\nmain()\n```", "state": "closed", "created_at": "2020-05-29T22:21:28.488000Z", "updated_at": "2020-07-07T17:44:46.182000Z", "closed_at": "2020-06-25T22:51:11.721000Z", "labels": ["Discussion"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2081", "weight": null, "has_tasks": false, "author_id": 689351, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35191178, "iid": 2080, "project_id": 7603319, "title": "`meltano upgrade` tries but fails to overwrite `.gitignore` in project", "description": "```\n[2020-05-29 11:02:47,353|E|MainThread|root] Meltano could not update /Users/douwemaan/Development/meltano-projects/demo-project/.gitignore: [Errno 2] No such file or directory: '/Users/douwemaan/Development/meltano/src/meltano/core/bundle/.gitignore'\n```\n\nIt shouldn't try to overwrite `.gitignore` at all.", "state": "closed", "created_at": "2020-05-29T16:05:42.576000Z", "updated_at": "2020-05-29T17:27:42.387000Z", "closed_at": "2020-05-29T17:27:42.340000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2080", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35189225, "iid": 2079, "project_id": 7603319, "title": "\"Job\" table name and \"job_id\" column name are confusing, since the table actually stores runs, and the job_id is the pipeline name", "description": "- [ ] Rename `job` table to `run(s)`\n- [ ] Rename `job_id` column to `pipeline_name`", "state": "opened", "created_at": "2020-05-29T15:15:14.135000Z", "updated_at": "2020-05-29T15:20:25.540000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Technical Debt"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2079", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35150028, "iid": 2078, "project_id": 7603319, "title": "Airflow DAG does not respect non-default system database URI", "description": "", "state": "closed", "created_at": "2020-05-29T03:44:30.360000Z", "updated_at": "2020-05-29T15:05:02.861000Z", "closed_at": "2020-05-29T15:05:02.788000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2078", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35148539, "iid": 2077, "project_id": 7603319, "title": "DBT inside \"meltano elt\" inside Airflow inside \"meltano invoke airflow\" can fail because it inherits Meltano venv through `PYTHONPATH`", "description": "Addressing https://gitlab.com/meltano/meltano/-/issues/2060 would fix this too, since we would no longer be injecting the Meltano venv into Airflow's venv through the `PYTHONPATH` variable. For the moment, we can work around it by resetting `PYTHONPATH`.", "state": "closed", "created_at": "2020-05-29T02:23:23.190000Z", "updated_at": "2020-05-29T02:46:23.694000Z", "closed_at": "2020-05-29T02:46:23.647000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2077", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35147887, "iid": 2076, "project_id": 7603319, "title": "Airflow looks for DAGs in plugins dir instead of dags dir", "description": "Introduced by https://gitlab.com/meltano/meltano/commit/3603cd558613c5ae2a511f9860e0b599d12faf63, part of https://gitlab.com/meltano/meltano/-/merge_requests/1664. Released in v1.34.0 and v1.34.1.\n\n```sh\nmeltano --log-level=debug invoke airflow version\n```\n\nPrints, among other things:\n\n```\n[2020-05-28 20:51:45,540|D|MainThread|root] Env: {... 'AIRFLOW__CORE__DAGS_FOLDER': '/Users/douwemaan/Desktop/meltano-projects/demo-project/orchestrate/plugins', ...}\n```\n\nThis is caused by this snippet of [`discovery.yml`](https://gitlab.com/meltano/meltano/blob/master/src/meltano/core/bundle/discovery.yml):\n\n```yaml\n      - name: core.dags_folder\n        value: $MELTANO_PROJECT_ROOT/orchestrate/dags\n        env: AIRFLOW__CORE__DAGS_FOLDER\n      - name: core.plugins_folder\n        value: $MELTANO_PROJECT_ROOT/orchestrate/plugins\n        env: AIRFLOW__CORE__DAGS_FOLDER\n```\n\nThe duplicate `env` values results in the `AIRFLOW__CORE__DAGS_FOLDER` variable first being set to the value of `core.dags_folder` (correct), and then being overridden with the value of `core.plugins_folder` (incorrect).", "state": "closed", "created_at": "2020-05-29T01:56:33.748000Z", "updated_at": "2020-05-29T02:25:05.977000Z", "closed_at": "2020-05-29T02:25:05.910000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2076", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35146346, "iid": 2075, "project_id": 7603319, "title": "Airflow complains that metadata DB is not initialized when `AIRFLOW__CORE__SQL_ALCHEMY_CONN` is overridden at runtime", "description": "", "state": "closed", "created_at": "2020-05-29T00:34:21.805000Z", "updated_at": "2020-05-29T03:05:36.014000Z", "closed_at": "2020-05-29T03:05:35.935000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2075", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35141192, "iid": 2074, "project_id": 7603319, "title": "Clean up issue tracker, close old epics and issues", "description": "", "state": "opened", "created_at": "2020-05-28T20:59:52.324000Z", "updated_at": "2021-03-08T16:43:17.418000Z", "closed_at": null, "labels": ["flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2074", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35141186, "iid": 2073, "project_id": 7603319, "title": "Add \"Accepting Merge Requests\" labels to issues", "description": "", "state": "opened", "created_at": "2020-05-28T20:59:28.741000Z", "updated_at": "2021-02-15T22:34:10.048000Z", "closed_at": null, "labels": ["Documentation"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2073", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35140802, "iid": 2072, "project_id": 7603319, "title": "Recommend using Postgres system DB in production", "description": "As discussed in https://gitlab.com/meltano/meltano/-/issues/2046#note_351375402", "state": "closed", "created_at": "2020-05-28T20:42:05.708000Z", "updated_at": "2020-05-29T23:54:01.581000Z", "closed_at": "2020-05-29T23:54:01.532000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2072", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35135597, "iid": 2071, "project_id": 7603319, "title": "Add new Loaders page to UI", "description": "To allow not just Pipelines and Extractors to be managed through the UI, we should add a new Loaders page modeled after the new and improved Extractors page.\n\nWe already had such a page before, but it was removed in https://gitlab.com/meltano/meltano/-/merge_requests/1359. We should be able to recover the `Loaders` component from that MR and start from there, although we may be better off starting with the Extractors page. We'll likely also want to use the [`LoaderSettingsModal` component](https://gitlab.com/meltano/meltano/blob/master/src/webapp/src/components/pipelines/LoaderSettingsModal.vue), which still exists in the codebase but is not currently used.\n\nWe should also not forget to:\n\n- [ ] Add a \"Manage loaders\" link to the \"Add pipeline\" modal on the Pipelines page: https://gitlab.com/meltano/meltano/-/issues/2068", "state": "closed", "created_at": "2020-05-28T17:38:03.679000Z", "updated_at": "2020-08-14T20:13:14.110000Z", "closed_at": "2020-08-14T20:13:14.052000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [6175840], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2071", "weight": null, "has_tasks": true, "task_status": "0 of 1 task completed", "author_id": 87854, "assignee_id": 6175840, "closed_by_id": 87854, "milestone_id": 1380290, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35135596, "iid": 2070, "project_id": 7603319, "title": "List installed and available extractors separately on Extractors page", "description": "Since the goal of the Extractors page is to allow people to manage their Meltano project's extractors, it's important to differentiate between extractors that are actually already part of the project, and extractors that are just available to be added to the project, but may not actually be relevant.\n\n- [x] Thus, we should split the Extractors page up into two lists with \"Extractors\" and \"Available extractors\" headers. In the first list, all extractors will show \"Configure\" buttons, and in the second, all will show \"Add to project\" buttons. The \"Don't see your data source here?\" section can remain under \"Available extractors\"\n- [x] If no extractors have been added to the project yet, we can either hide the \"Extractors\" section entirely or show a message suggesting the user add a new extractor using the options below.", "state": "closed", "created_at": "2020-05-28T17:38:03.187000Z", "updated_at": "2020-07-23T15:48:57.721000Z", "closed_at": "2020-07-23T15:48:57.575000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [6175840], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2070", "weight": null, "has_tasks": true, "task_status": "2 of 2 tasks completed", "author_id": 87854, "assignee_id": 6175840, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35135595, "iid": 2069, "project_id": 7603319, "title": "Turn \"Connections\" page into \"Extractors\" management UI", "description": "Since the UI and CLI are both intended to be interfaces for managing Meltano projects and pipelines, it is important that we use consistent terminology across both, `meltano.yml`, and the documentation.\n\nThus, I think we should:\n\n- [ ] Rename \"Connections\" to \"Extractors\" in the URL, labels, and headings\n- [ ] Rename the \"Data Source\" column on the \"Pipelines page\" to \"Extractor\"\n- [ ] Rename the \"Connect\" button to \"Add to project\"\n- [ ] Rename the \"Edit Connection\" button to \"Configure\"\n- [ ] Remove \"Explore\" buttons, since they're already on the Pipelines page\n- [ ] Remove the \"View Pipeline\" button in favor of a new \"[N] pipelines\" link similar in style to the current \"Installed\" span, with an icon depending on N (`exclamation-triangle` for 0, else `check-circle`), and a tooltip listing the names of the pipelines\n\nAdditionally, we should:\n- [ ] Stop automatically creating (and running) a new pipeline when a connection (extractor configuration) is saved, since this can be done from the Pipelines page as of https://gitlab.com/meltano/meltano/-/issues/2068.", "state": "closed", "created_at": "2020-05-28T17:38:02.843000Z", "updated_at": "2020-07-02T15:52:52.044000Z", "closed_at": "2020-07-02T15:52:49.644000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [6201763], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2069", "weight": null, "has_tasks": true, "task_status": "0 of 7 tasks completed", "author_id": 87854, "assignee_id": 6201763, "closed_by_id": 87854, "milestone_id": 1321883, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35135594, "iid": 2068, "project_id": 7603319, "title": "Add interface to schedule new pipelines to Pipelines page", "description": "The UI does not currently have an equivalent to `meltano schedule` to allow users to schedule new pipelines by specifying their extractor, loader, transform (run, only, skip), and update interval. Instead, pipelines/schedules are automatically created when a \"connection\" (really an extractor's configuration) is saved on the Connections page, with `loader` always set to `target-postgres`, `transform` dynamically determined based on the presence of a compatible (namespace-matching) `transform` plugin, and `interval` always set to `@daily`.\n\n- [ ] We should add a new \"Create\" button to the top right of the page (like on the Dashboards page), that will trigger a \"Create pipeline schedule\" modal with \"Extractor\", \"Loader\", \"Transform\", and \"Update Interval\" dropdowns.\n\n- [ ] The \"Extractor\" dropdown should list all _installed_ extractors, with a \"Manage extractors\" link at the bottom directing the user to the Connections page (Extractors page, after we rename it).\n\n- [ ] The \"Loaders\" dropdown should similarly list all _installed_ loaders. We can add a \"Manage loaders\" link at the bottom once we add the new Loaders page: https://gitlab.com/meltano/meltano/-/issues/2071\n\n- [ ] The \"Transform\" dropdown should be disabled if a transform plugin compatible with the chosen extractor has not been installed, in which case the stored value would be `skip`. If a transform plugin with a matching namespace has been installed, the options should be \"Run\" (selected by default), \"Only\", and \"Skip\", corresponding to values `run`, `only`, and `skip`.\n\n- [ ] The \"Update Interval\" dropdown should show the same options shown in the \"Update Interval\" dropdown in the Pipelines table.\n\n- [ ] The \"Save\" button should save the schedule (like `meltano schedule` does), but NOT autorun it. Once it's been saved, the user can choose to hit the \"Run Now\" button in the table or wait for the interval to pass.\n\nWe already had such a button and modal before, but it was inlined in the page in https://gitlab.com/meltano/meltano/-/merge_requests/1359, and removed entirely in https://gitlab.com/meltano/meltano/-/merge_requests/1410. We should be able to recover the `CreatePipelineSchedule(Modal)` component from those MRs, and start from there. If its current behavior differs from what I laid out above, we can discuss what we think makes most sense.\n\nWe should also not forget to:\n\n- [ ] Remove \"The UI currently only supports setting up pipelines with the target-postgres loader.\" from the bottom of the page", "state": "closed", "created_at": "2020-05-28T17:38:02.201000Z", "updated_at": "2020-08-05T15:25:56.828000Z", "closed_at": "2020-06-25T20:49:58.881000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [6201763], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2068", "weight": null, "has_tasks": true, "task_status": "0 of 7 tasks completed", "author_id": 87854, "assignee_id": 6201763, "closed_by_id": 87854, "milestone_id": 1321882, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35135593, "iid": 2067, "project_id": 7603319, "title": "Add pipeline name, loader, and transform columns to Pipelines table", "description": "https://gitlab.com/meltano/demo-project defines the following scheduled pipelines in its `meltano.yml`, that were created using `meltano schedule`:\n\n```yaml\nschedules:\n- extractor: tap-gitlab\n  interval: '@hourly'\n  loader: target-jsonl\n  name: gitlab-to-jsonl\n  start_date: 2020-05-01 00:00:00\n  transform: skip\n- extractor: tap-gitlab\n  interval: '@daily'\n  loader: target-postgres\n  name: gitlab-to-postgres\n  start_date: 2020-05-01 00:00:00\n  transform: run\n```\n\nThe Pipelines page currently displays these like this:\n\n![Captura_de_Pantalla_2020-05-28_a_la_s__11.45.36](/uploads/8f3004eae462ee627a7111b41c30d4c6/Captura_de_Pantalla_2020-05-28_a_la_s__11.45.36.png)\n\nWe should add the following columns, to make this page equivalent to `meltano schedule list` and allow us to differentiate between different pipelines with the same extractor:\n- [ ] Pipeline/schedule name \n- [ ] Loader\n- [ ] Transform (\"Run\", \"Only\", \"Skip\")\n\nWe can consider making the font size and logos smaller to fit more content.", "state": "closed", "created_at": "2020-05-28T17:38:01.694000Z", "updated_at": "2020-06-18T16:10:27.905000Z", "closed_at": "2020-06-18T16:10:27.822000Z", "labels": ["Accepting Merge Requests", "UI", "flow::Review"], "assignees": [6201763], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2067", "weight": null, "has_tasks": true, "task_status": "0 of 3 tasks completed", "author_id": 87854, "assignee_id": 6201763, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35132079, "iid": 2066, "project_id": 7603319, "title": "`meltano upgrade` says `You must update Meltano to get new plugins updates.` when discovery version is bumped", "description": "\n```\n[2020-05-28 10:35:36,356|D|MainThread|urllib3.connectionpool] Starting new HTTPS connection (1): www.meltano.com:443\n[2020-05-28 10:35:36,731|D|MainThread|urllib3.connectionpool] https://www.meltano.com:443 \"GET /discovery.yml HTTP/1.1\" 200 32088\n[2020-05-28 10:35:36,876|W|MainThread|root] You must update Meltano to get new plugins updates.\n[2020-05-28 10:35:36,994|D|MainThread|root] Successfully compiled topics\n```\n\nPresumably because `PluginDiscoveryService.__version__` hasn't been reloaded yet and still holds the old version.", "state": "opened", "created_at": "2020-05-28T15:39:39.819000Z", "updated_at": "2020-05-28T15:39:39.819000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2066", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35132011, "iid": 2065, "project_id": 7603319, "title": "`meltano upgrade` complains when `gunicorn` is not running", "description": "```\n[2020-05-28 10:35:36,994|E|MainThread|root] Cannot restart from `/Users/douwemaan/Desktop/meltano-projects/demo-project/.meltano/run/gunicorn.pid`: [Errno 2] No such file or directory: '/Users/douwemaan/Desktop/meltano-projects/demo-project/.meltano/run/gunicorn.pid'\n```", "state": "closed", "created_at": "2020-05-28T15:37:33.505000Z", "updated_at": "2020-05-29T17:27:42.599000Z", "closed_at": "2020-05-29T17:27:42.558000Z", "labels": ["Accepting Merge Requests", "bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2065", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35130764, "iid": 2064, "project_id": 7603319, "title": "Document correct update instructions when using Docker", "description": "See Slack thread https://meltano.slack.com/archives/CFG3C3C66/p1590601731207000.\n\nThere, I wrote:\n\n>>>\nAll right, I think the issue is that meltano upgrade is not actually supported when using the Docker installation method (which I didn't fully realize until now and isn't documented), because while you can make changes inside a Docker container, the Docker image itself is a snapshot and won't be updated until you actually pull a new version of the image. So if you're using Meltano with Docker, the way to update would be to run docker pull meltano/meltano and to then recreate your container. If you're using docker-compose , it'd be even easier: docker-compose pull meltano && docker-compose up -d meltano\n>>>", "state": "closed", "created_at": "2020-05-28T15:03:22.583000Z", "updated_at": "2020-05-29T17:27:42.784000Z", "closed_at": "2020-05-29T17:27:42.728000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2064", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35035559, "iid": 2063, "project_id": 7603319, "title": "After updating `psycopg2`, installing meltano now requires `pg_config` to be present on system", "description": "Technically introduced by https://gitlab.com/meltano/meltano/-/merge_requests/1665\n\nFailure in job that didn't have `pg_config`: https://gitlab.com/meltano/meltano/-/jobs/568513947\n\n<details>\n<summary>Error message</summary>\n\n```\n    digitalocean:   Downloading psycopg2-2.8.5.tar.gz (380 kB)\n==> digitalocean:     ERROR: Command errored out with exit status 1:\n==> digitalocean:      command: /var/meltano/.venv/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-3k2ro1j7/psycopg2/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-3k2ro1j7/psycopg2/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-pip-egg-info-nlhb7bn4\n==> digitalocean:          cwd: /tmp/pip-install-3k2ro1j7/psycopg2/\n==> digitalocean:     Complete output (23 lines):\n==> digitalocean:     running egg_info\n==> digitalocean:     creating /tmp/pip-pip-egg-info-nlhb7bn4/psycopg2.egg-info\n==> digitalocean:     writing /tmp/pip-pip-egg-info-nlhb7bn4/psycopg2.egg-info/PKG-INFO\n==> digitalocean:     writing dependency_links to /tmp/pip-pip-egg-info-nlhb7bn4/psycopg2.egg-info/dependency_links.txt\n==> digitalocean:     writing top-level names to /tmp/pip-pip-egg-info-nlhb7bn4/psycopg2.egg-info/top_level.txt\n==> digitalocean:     writing manifest file '/tmp/pip-pip-egg-info-nlhb7bn4/psycopg2.egg-info/SOURCES.txt'\n==> digitalocean:\n==> digitalocean:     Error: pg_config executable not found.\n==> digitalocean:\n==> digitalocean:     pg_config is required to build psycopg2 from source.  Please add the directory\n==> digitalocean:     containing pg_config to the $PATH or specify the full executable path with the\n==> digitalocean:     option:\n==> digitalocean:\n==> digitalocean:         python setup.py build_ext --pg-config /path/to/pg_config build ...\n==> digitalocean:\n==> digitalocean:     or with the pg_config option in 'setup.cfg'.\n==> digitalocean:\n==> digitalocean:     If you prefer to avoid building psycopg2 from source, please install the PyPI\n==> digitalocean:     'psycopg2-binary' package instead.\n==> digitalocean:\n==> digitalocean:     For further information please check the 'doc/src/install.rst' file (also at\n==> digitalocean:     <https://www.psycopg.org/docs/install.html>).\n==> digitalocean:\n==> digitalocean:     ----------------------------------------\n==> digitalocean: ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\n```\n</details>\n\nOur users could run into this as well, which is not ideal because we want to make installing Meltano as easy as possible.", "state": "closed", "created_at": "2020-05-26T20:49:52.926000Z", "updated_at": "2020-05-26T21:29:12.031000Z", "closed_at": "2020-05-26T21:29:11.991000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2063", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35029384, "iid": 2062, "project_id": 7603319, "title": "Support `--database-uri` option and `MELTANO_DATABASE_URI` env var on `meltano init`", "description": "These are currently only supported on `meltano` commands run inside an existing project, meaning that the initial system database is always created at `.meltano/meltano.db` even if a different location is preferred.", "state": "closed", "created_at": "2020-05-26T17:39:40.019000Z", "updated_at": "2020-05-26T19:40:12.928000Z", "closed_at": "2020-05-26T19:40:12.883000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2062", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35025534, "iid": 2061, "project_id": 7603319, "title": "`demo_project` and `homepage_sample_code` jobs are failing on MRs from forks", "description": "These jobs were added in https://gitlab.com/meltano/meltano/-/merge_requests/1667 and https://gitlab.com/meltano/meltano/-/merge_requests/1659 respectively, and can be seen to fail on https://gitlab.com/meltano/meltano/-/merge_requests/1665.\n\n`demo_project` is failing because the MR author has \"no permissions to trigger downstream pipeline\".\n\n[`homepage_sample_code`](https://gitlab.com/aroder/meltano/-/jobs/568159275) is failing because the `TAP_COVID_19_API_TOKEN` environment variable is unset in forks.", "state": "closed", "created_at": "2020-05-26T16:11:12.012000Z", "updated_at": "2020-05-26T20:36:12.897000Z", "closed_at": "2020-05-26T20:36:12.849000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2061", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35024935, "iid": 2060, "project_id": 7603319, "title": "Refactor default AIrflow DAG to read and parse `meltano.yml` directly instead of using the `meltano` package", "description": "Required by https://gitlab.com/meltano/meltano/-/issues/2057 because of https://gitlab.com/meltano/meltano/-/merge_requests/1670#note_349419872.", "state": "closed", "created_at": "2020-05-26T15:52:02.598000Z", "updated_at": "2020-06-25T22:51:32.201000Z", "closed_at": "2020-06-25T22:51:32.156000Z", "labels": ["Accepting Merge Requests", "flow::Review"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2060", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321882, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35021810, "iid": 2059, "project_id": 7603319, "title": "Errors in before/after install hooks are not handled correctly", "description": "", "state": "closed", "created_at": "2020-05-26T14:55:36.425000Z", "updated_at": "2020-05-26T19:39:38.016000Z", "closed_at": "2020-05-26T19:39:37.863000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2059", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 35019967, "iid": 2058, "project_id": 7603319, "title": "`pytest_postgres` job is failing because execution took longer than 1h0m0s seconds", "description": "Here, pytest_postgres took 7 minutes: https://gitlab.com/meltano/meltano/-/jobs/566931559\n\nSince then it's been taking an hour and timing out: https://gitlab.com/meltano/meltano/-/jobs/566932241\n\nThis appears to have started happening after https://gitlab.com/meltano/meltano/-/merge_requests/1664, although https://gitlab.com/meltano/meltano/-/jobs/566921821 was still fast.", "state": "closed", "created_at": "2020-05-26T14:17:20.931000Z", "updated_at": "2020-06-16T16:47:29.306000Z", "closed_at": "2020-05-26T19:40:27.231000Z", "labels": ["P1", "bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2058", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34992328, "iid": 2057, "project_id": 7603319, "title": "Bump airflow version to 1.10.latest", "description": "", "state": "closed", "created_at": "2020-05-25T22:44:10.294000Z", "updated_at": "2020-10-07T17:23:35.785000Z", "closed_at": "2020-10-07T17:23:35.740000Z", "labels": ["Accepting Merge Requests", "Orchestrate", "flow::Review"], "assignees": [2585766], "user_notes_count": 0, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2057", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 2585766, "closed_by_id": 87854, "milestone_id": 1626120, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34982318, "iid": 2056, "project_id": 7603319, "title": "Automatically run child CI pipeline in Meltano demo project to ensure new changes are backward compatible", "description": "Will help verify changes in https://gitlab.com/meltano/meltano/-/merge_requests/1664", "state": "closed", "created_at": "2020-05-25T15:34:14.604000Z", "updated_at": "2020-05-25T16:33:46.775000Z", "closed_at": "2020-05-25T16:33:46.731000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2056", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34980451, "iid": 2055, "project_id": 7603319, "title": "CI fails on MRs from forks because `<namespace>/meltano` Docker image that test jobs depend on is never created", "description": "Seen in https://gitlab.com/meltano/meltano/-/merge_requests/1665", "state": "closed", "created_at": "2020-05-25T14:41:40.674000Z", "updated_at": "2020-05-26T16:03:50.951000Z", "closed_at": "2020-05-26T16:03:50.896000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2055", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34980015, "iid": 2054, "project_id": 7603319, "title": "Error building wheel for psycopg2 2.7.7", "description": "### What is the current *bug* behavior?\n`pip install meltano` results in an error when it tries to build the wheel for psycopg2. I can reproduce this error by running `pip install psycopg2==2.7.7`. The OS is Ubuntu 20.04 LTS and python version is 3.8.2. I'm running Ubuntu through Windows 10 WSL.\n\n### What is the expected *correct* behavior?\nMeltano should install without erroring at the psycopg2 requirement.\n\n\n\n### Steps to reproduce\n`pip install meltano` or `pip install psycopg2==2.7.7`\n\n\n\n### Relevant logs and/or screenshots\n```\n  Building wheel for psycopg2 (setup.py) ... error\n  ERROR: Command errored out with exit status 1:\n   command: /mnt/c/dev/meltano/venv/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-3i8raszm/psycopg2/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-3i8raszm/psycopg2/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d /tmp/pip-wheel-sqgo26nf\n       cwd: /tmp/pip-install-3i8raszm/psycopg2/\n  Complete output (72 lines):\n  running bdist_wheel\n  running build\n  running build_py\n  creating build\n  creating build/lib.linux-x86_64-3.8\n  creating build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/errorcodes.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/pool.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/sql.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/psycopg1.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/tz.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/_range.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/extensions.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/__init__.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/extras.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/_ipaddress.py -> build/lib.linux-x86_64-3.8/psycopg2\n  copying lib/_json.py -> build/lib.linux-x86_64-3.8/psycopg2\n  creating build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_replication.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_cancel.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_quote.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_module.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_copy.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_cursor.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_types_basic.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_fast_executemany.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_connection.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_sql.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_bugX000.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/dbapi20_tpc.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_green.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_async_keyword.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_with.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/testconfig.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_ipaddress.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_transaction.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_types_extras.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/dbapi20.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_notify.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_psycopg2_dbapi20.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_lobject.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_errcodes.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/testutils.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_extras_dictcursor.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_bug_gc.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/__init__.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_dates.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  copying tests/test_async.py -> build/lib.linux-x86_64-3.8/psycopg2/tests\n  Skipping optional fixer: buffer\n  Skipping optional fixer: idioms\n  Skipping optional fixer: set_literal\n  Skipping optional fixer: ws_comma\n  running build_ext\n  building 'psycopg2._psycopg' extension\n  creating build/temp.linux-x86_64-3.8\n  creating build/temp.linux-x86_64-3.8/psycopg\n  x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=2.7.7 (dt dec pq3 ext lo64) -DPG_VERSION_NUM=120002 -DHAVE_LO64=1 -I/mnt/c/dev/meltano/venv/include -I/usr/include/python3.8 -I. -I/usr/include/postgresql -I/usr/include/postgresql/12/server -c psycopg/psycopgmodule.c -o build/temp.linux-x86_64-3.8/psycopg/psycopgmodule.o -Wdeclaration-after-statement\n  psycopg/psycopgmodule.c: In function \u2018psyco_is_main_interp\u2019:\n  psycopg/psycopgmodule.c:689:18: error: dereferencing pointer to incomplete type \u2018PyInterpreterState\u2019 {aka \u2018struct _is\u2019}\n    689 |     while (interp->next)\n        |                  ^~\n\n  It appears you are missing some prerequisite to build the package from source.\n\n  You may install a binary package by installing 'psycopg2-binary' from PyPI.\n  If you want to install psycopg2 from source, please install the packages\n  required for the build and try again.\n\n  For further information please check the 'doc/src/install.rst' file (also at\n  <http://initd.org/psycopg/docs/install.html>).\n\n  error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n  ----------------------------------------\n  ERROR: Failed building wheel for psycopg2\n```\n\n\n\n### Possible fixes\nI've gone through updating packages like python3-dev, python3.8-dev, gcc, build-essentials, and others I found recommended. None had any effect. \n\nRunning `pip install psycopg2`, `pip install psycopg2==2.8.5`, or cloning meltano and updating the psycopg2 version to 2.8.5 and running `pip install -r requirements.txt` all succeed. I'll create a PR for this, but I wanted to record this issue in case I am missing something.\n\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-05-25T14:28:27.944000Z", "updated_at": "2020-05-26T17:37:31.554000Z", "closed_at": "2020-05-26T17:37:31.502000Z", "labels": ["flow::Review"], "assignees": [71418], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2054", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 71418, "assignee_id": 71418, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34908809, "iid": 2053, "project_id": 7603319, "title": "Bump dbt version to 0.16.1", "description": "We'll need to make sure `DBT_PROFILES_DIR` and `DBT_TARGET` are also set when running the `dbt clean` and `dbt deps` commands, not just `dbt run` and `dbt compile`.", "state": "closed", "created_at": "2020-05-22T19:03:05.813000Z", "updated_at": "2020-05-26T19:39:24.071000Z", "closed_at": "2020-05-26T19:39:22.450000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2053", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34903466, "iid": 2052, "project_id": 7603319, "title": "Document how to configure Meltano UI / gunicorn for production", "description": "", "state": "closed", "created_at": "2020-05-22T15:39:49.716000Z", "updated_at": "2020-07-09T21:14:04.618000Z", "closed_at": "2020-07-09T21:14:04.510000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2052", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1342574, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34813368, "iid": 2051, "project_id": 7603319, "title": "Automatically populate newly added plugin config object in meltano.yml with env vars or default values", "description": "As suggested in https://gitlab.com/meltano/meltano/-/issues/2047.", "state": "opened", "created_at": "2020-05-20T16:22:49.683000Z", "updated_at": "2020-06-25T19:53:48.131000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Triage"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2051", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34813365, "iid": 2050, "project_id": 7603319, "title": "Document that `$ENV_VARS` can be used in config and setting values in meltano.yml and discovery.yml", "description": "As suggested in https://gitlab.com/meltano/meltano/-/issues/2047.", "state": "closed", "created_at": "2020-05-20T16:22:47.211000Z", "updated_at": "2020-05-25T22:36:30.600000Z", "closed_at": "2020-05-25T22:36:30.557000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2050", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34775965, "iid": 2049, "project_id": 7603319, "title": "Add GitLab CI Scheduler orchestrator to allow deployment with a simple push to GitLab", "description": "", "state": "opened", "created_at": "2020-05-19T21:15:49.450000Z", "updated_at": "2020-11-17T20:21:52.716000Z", "closed_at": null, "labels": [], "assignees": [], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2049", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34775036, "iid": 2048, "project_id": 7603319, "title": "Add Dockerfile to new project that will build project-specific image with plugins already installed", "description": "Spun out of https://gitlab.com/meltano/meltano/-/issues/2023", "state": "closed", "created_at": "2020-05-19T20:47:51.498000Z", "updated_at": "2020-06-25T19:31:03.364000Z", "closed_at": "2020-06-25T19:31:03.306000Z", "labels": ["Accepting Merge Requests", "Discussion", "P1", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2048", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1321882, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34774917, "iid": 2047, "project_id": 7603319, "title": "Figure out recommended strategy on managing secrets in production", "description": "Spun out of https://gitlab.com/meltano/meltano/-/issues/2023", "state": "closed", "created_at": "2020-05-19T20:43:29.451000Z", "updated_at": "2020-05-20T16:54:27.257000Z", "closed_at": "2020-05-20T16:54:27.119000Z", "labels": ["Discussion", "P1", "flow::Triage"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2047", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34774735, "iid": 2046, "project_id": 7603319, "title": "Allow pipeline state to be stored somewhere other than the system database", "description": "Spun out of https://gitlab.com/meltano/meltano/-/issues/2023", "state": "opened", "created_at": "2020-05-19T20:39:08.697000Z", "updated_at": "2020-06-25T19:51:56.927000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Discussion", "P1", "flow::To Do"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2046", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34754385, "iid": 2045, "project_id": 7603319, "title": "Hide plugin logo in UI if image file could not be found", "description": "", "state": "closed", "created_at": "2020-05-19T15:36:44.273000Z", "updated_at": "2020-05-19T15:59:39.521000Z", "closed_at": "2020-05-19T15:59:39.474000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2045", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34753993, "iid": 2044, "project_id": 7603319, "title": "Don't show button to open Log Modal on Pipelines page if pipeline has never run", "description": "", "state": "closed", "created_at": "2020-05-19T15:34:50.854000Z", "updated_at": "2020-05-19T16:00:38.174000Z", "closed_at": "2020-05-19T16:00:38.125000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2044", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34753648, "iid": 2043, "project_id": 7603319, "title": "Use plugin name in UI when label is not set", "description": "", "state": "closed", "created_at": "2020-05-19T15:33:15.758000Z", "updated_at": "2020-05-19T15:59:48.558000Z", "closed_at": "2020-05-19T15:59:48.513000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2043", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34748636, "iid": 2042, "project_id": 7603319, "title": "Connection Setup UI fails when plugin docs URL is not set", "description": "", "state": "closed", "created_at": "2020-05-19T15:14:35.296000Z", "updated_at": "2020-05-19T15:37:53.911000Z", "closed_at": "2020-05-19T15:37:53.871000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2042", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34743794, "iid": 2041, "project_id": 7603319, "title": "Clarify that only known plugins are displayed in the UI, and how known plugins can be added and made UI-ready", "description": "", "state": "closed", "created_at": "2020-05-19T14:56:15.905000Z", "updated_at": "2020-05-19T16:24:13.812000Z", "closed_at": "2020-05-19T16:24:13.634000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2041", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34619061, "iid": 2040, "project_id": 7603319, "title": "Seperate starting Airflow scheduler from starting Airflow UI in homepage example", "description": "", "state": "closed", "created_at": "2020-05-15T19:32:16.360000Z", "updated_at": "2020-05-15T19:55:15.348000Z", "closed_at": "2020-05-15T19:55:14.646000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2040", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614871, "iid": 2039, "project_id": 7603319, "title": "Cross-post \"Why we are building an open source platform for ELT pipelines\" on GitLab blog", "description": "", "state": "closed", "created_at": "2020-05-15T16:37:51.769000Z", "updated_at": "2020-05-18T23:00:53.822000Z", "closed_at": "2020-05-18T23:00:53.755000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2039", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614682, "iid": 2038, "project_id": 7603319, "title": "Document current recommendations for managing configuration in production", "description": "@aroder [asked on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1589464219051900):\n\n>>>\nI'm trying to think through devops and using meltano in production. Specifically, config values. The .env file and meltano.db are in .gitignore. Are there any recommendations or practices around deploying and around managing production config values?\n>>>\n\nI responded:\n\n>>>\nRight now, I would suggest using `config` objects on your plugins' definitions in `meltano.yml` for non-sensitive values, which I intend to make more accessible through `meltano config` soon: https://gitlab.com/meltano/meltano/-/issues/2013.\n\nFor sensitive values, environment variables are your best bet since many systems exist to manage them in production environments, some of which also support hiding the most sensitive ones in vaults.\n\nI would love it if Meltano would develop into a more scalable, more mature direction on this front.\n>>>", "state": "closed", "created_at": "2020-05-15T16:32:17.085000Z", "updated_at": "2020-05-29T23:54:01.779000Z", "closed_at": "2020-05-29T23:54:01.735000Z", "labels": ["Accepting Merge Requests", "Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2038", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614458, "iid": 2037, "project_id": 7603319, "title": "Use a different start_date or repository for tap-gitlab example on homepage, because it's currently somewhat slow", "description": "", "state": "closed", "created_at": "2020-05-15T16:25:08.956000Z", "updated_at": "2020-05-15T20:37:42.378000Z", "closed_at": "2020-05-15T20:37:42.313000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2037", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614456, "iid": 2036, "project_id": 7603319, "title": "Consider documenting on homepage how Meltano and a Meltano project can be upgraded", "description": "", "state": "closed", "created_at": "2020-05-15T16:25:08.383000Z", "updated_at": "2020-05-20T14:53:52.171000Z", "closed_at": "2020-05-20T14:53:52.136000Z", "labels": ["Documentation", "flow::To Do"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2036", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614454, "iid": 2035, "project_id": 7603319, "title": "Document on homepage how a Meltano project works and can be shared and collaborated on", "description": "We'll want to clarify, among other things, how to install plugins in a newly cloned existing project.\n\nWe'll also want to point out that this is where your plugin and schedule definitions are stored. With an example file?", "state": "closed", "created_at": "2020-05-15T16:25:08.028000Z", "updated_at": "2020-05-19T23:16:27.336000Z", "closed_at": "2020-05-19T23:16:27.171000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2035", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614453, "iid": 2034, "project_id": 7603319, "title": "Clarify on homepage that without `meltano select`, all entities and properties are selected by default", "description": "", "state": "closed", "created_at": "2020-05-15T16:25:07.599000Z", "updated_at": "2020-05-15T20:03:56.933000Z", "closed_at": "2020-05-15T20:03:54.799000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2034", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614452, "iid": 2033, "project_id": 7603319, "title": "Ensure we refer to \"Singer- and dbt-based ELT pipelines\" consistently", "description": "Across:\n- [x] Readme\n- [x] Project description\n- [x] Group description\n- [x] Meta description\n- [x] Twitter bio?", "state": "closed", "created_at": "2020-05-15T16:25:07.295000Z", "updated_at": "2020-05-19T18:16:59.141000Z", "closed_at": "2020-05-19T18:16:59.090000Z", "labels": ["Documentation", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2033", "weight": null, "has_tasks": true, "task_status": "5 of 5 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614450, "iid": 2032, "project_id": 7603319, "title": "\"Install\" CTA on homepage shouldn't link to page with \"possibly outdated\" warning", "description": "Either:\n- [ ] Remove the warning, or\n- [ ] Create a new installation page/section to link to", "state": "closed", "created_at": "2020-05-15T16:25:06.591000Z", "updated_at": "2020-05-19T18:17:51.090000Z", "closed_at": "2020-05-19T17:00:44.363000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2032", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614449, "iid": 2031, "project_id": 7603319, "title": "Document that per-schedule configuration can also be set using `schedules` `env` key in `meltano.yml`", "description": "", "state": "closed", "created_at": "2020-05-15T16:25:05.947000Z", "updated_at": "2020-05-25T22:41:06.389000Z", "closed_at": "2020-05-25T22:41:06.343000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2031", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34614447, "iid": 2030, "project_id": 7603319, "title": "Set up CI job to ensure homepage example script continues to work", "description": "", "state": "closed", "created_at": "2020-05-15T16:25:05.014000Z", "updated_at": "2020-05-20T23:49:21.925000Z", "closed_at": "2020-05-20T23:49:21.872000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2030", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34613854, "iid": 2029, "project_id": 7603319, "title": "Document how to set target-postgres and target-snowflake schema to something other than extractor namespace", "description": "Mathieu Hinderyckx [wrote on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1589494294100200):\n\n>>>\nThe fact that the \u2019namespace` is the target schema to be used is also a bit weird to me. I expect this to be part of the target configuration and not to be in the tap. It should be possible to choose where the data is being written at the side of the target, the tap isn\u2019t concerned with that?\n>>>\n\nI responded:\n\n>>>\nAs far as using the namespace for the schema, this made sense in the use cases we've been using Meltano in ourselves, when the L stage was always followed by a T stage that would essentially pull the different namespace schemas together into a new `analytics` schema, but it's definitely counter to expectations (and undesirable) in a generic ELT tool.\n\nYou can override the `schema` value that is passed to `target-postgres`  by setting the `MELTANO_LOAD_SCHEMA` environment variable, but I don't think that's even documented right now.\n\nDo you think it would be acceptable to keep the current default behavior if it's actually documented and easy for people to figure out how to override the schema?\n>>>", "state": "closed", "created_at": "2020-05-15T16:06:33.853000Z", "updated_at": "2020-05-25T22:36:30.785000Z", "closed_at": "2020-05-25T22:36:30.745000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2029", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1267575, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34613832, "iid": 2028, "project_id": 7603319, "title": "Relationship between name and namespace is confusing when adding a custom plugin", "description": "Mathieu Hinderyckx [wrote on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1589494294100200):\n\n>>>\nI also find it confusing when adding an extractor via a custom tap (so in my case tap-mysql) what the identifiers (e.g. name and namespace) are. I used the command `meltano add --custom extractor tap-mysql`  as the example on the homepage uses `tap-***` as well so I assumed the argument in that command was the type of tap I was adding. This isn\u2019t the case, the argument is the identifier of the integration (so e.g. multiple mysql integrations would be added as `meltano add --custom extractor random-name-1, meltano add --custom extractor random-name-2` )? then the first line of the wizard says `The 'namespace' refers to the data source name.` As a result I thought this was the place where I was supposed to name the integration (random-name-1). Then the executable defaults to the namespace, while it would be better to default to the package name (e.g. tap-mysql).\n>>>\n\n@aroder [responded](https://meltano.slack.com/archives/CFG3C3C66/p1589498297104400?thread_ts=1589494294.100200&cid=CFG3C3C66):\n>>>\nI found this confusing as well. I think I could get used to it, but just changing the wording from \"namespace\" would help a lot\n\nI expected to run `meltano add --custom extractor <official-tap-name>` but as I learn more I see why that wouldn't be ideal\n>>>", "state": "closed", "created_at": "2020-05-15T16:05:09.067000Z", "updated_at": "2020-05-21T19:27:03.427000Z", "closed_at": "2020-05-21T19:27:03.383000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2028", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34613736, "iid": 2027, "project_id": 7603319, "title": "tap-mysql is not supported", "description": "Mathieu Hinderyckx [wrote on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1589492205087100):\n\n>>>\nHi, I'm trying out meltano, currently using stitch and pipelinewise. \n\nSome initial questions: no MySQL/postgres tap being included is a surprise. These are basic mature db's which I would expect to be in any etl product. \n\nThen I've tried running the singer MySQL tap as custom extractor and got the following issue: I cannot select a replication method. I've modified the installed python code to enforce logbased replication. It does sync, but it does not seem to save state. \n>>>", "state": "closed", "created_at": "2020-05-15T16:00:50.821000Z", "updated_at": "2020-11-17T23:55:12.214000Z", "closed_at": "2020-11-17T23:55:11.935000Z", "labels": ["Discussion", "bug", "flow::Triage"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2027", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34613708, "iid": 2026, "project_id": 7603319, "title": "Make it possible to add properties to individual selected streams (e.g. replication key, replication method)", "description": "Mathieu Hinderyckx [wrote on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1589492205087100):\n\n>>>\nHi, I'm trying out meltano, currently using stitch and pipelinewise. \n\n[...] \n\nHowever a general issue that I:m seeing is that it does not seem possible to add properties to individual selected streams (e.g. replication key, replication method). This is important to do so for several integrations besides MySQL as well. Am I missing how to do it?\n>>>", "state": "closed", "created_at": "2020-05-15T15:59:41.586000Z", "updated_at": "2020-06-19T22:11:09.801000Z", "closed_at": "2020-06-19T22:11:09.742000Z", "labels": ["Discussion", "feature requests", "flow::Review"], "assignees": [87854], "user_notes_count": 9, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2026", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302693, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34613642, "iid": 2025, "project_id": 7603319, "title": "Document what makes plugins known to Meltano and how to add new ones", "description": "@aroder [asked on Slack](https://meltano.slack.com/archives/CFG3C3C66/p1589463169050300):\n\n>>>\nWhat makes an extractor \"known\" to meltano, and what is the process for adding new extractors? https://meltano.com/plugins/extractors/\n>>>\n\nI responded:\n\n>>>\nGood question! Known plugins are those defined in `discovery.yml`, which is looked for first in the project directory (which doesn't exist, but you can create to experiment), then at https://meltano.com/discovery.yml, and then at the version bundled with the meltano package itself.\n\nThe versions on meltano.com and in the package originate at https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/bundle/discovery.yml, so making new plugins known means adding them to that file. \n\n(Incomplete) documentation around this feature can be found at https://www.meltano.com/docs/contributor-guide.html#taps-targets-development. I intend to add a section on this process to the homepage, and/or the page you linked.\n>>>", "state": "closed", "created_at": "2020-05-15T15:56:58.094000Z", "updated_at": "2020-05-15T21:58:52.323000Z", "closed_at": "2020-05-15T21:58:52.252000Z", "labels": ["Documentation", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2025", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34579401, "iid": 2024, "project_id": 7603319, "title": "`pipelinewise-target-postgres` fails with `ModuleNotFoundError: No module named 'azure.storage.common'`", "description": "As reported by Zafar Toshpulatov on Slack:\n\n>>>\nHello everyone,\n\nI am trying to add a new loader \"pipelinewise-target-snowflake\" to Meltano (this target is not known to Meltano).\n\nI installed pipelinewise-target-snowflake with the following command:\n`meltano add loader pipelinewise-target-snowflake`\n\nMeltano created virtual environment for target and I configured it as suggested. But when I run etl process like:\n\n```\nmeltano elt mytap target-snowflake --job_id=mytap-to-snowflake\n```\n\nI am getting the following error from target:\n`ModuleNotFoundError: No module named 'azure.storage.common'`\n\nIt doesn't see the module. I checked the virtual env directory of target `.meltano/loaders/target-snowflake/venv/lib/python3.6/site-packages/` that module exists.\n\nBefore I used this target in standard singer commands and never had a problem. Is there problem between Meltano and Azure?\n\nIs it possible to create manually virtual env and install target, without using Meltano? If possible, does it communicate with Meltano?\n>>>", "state": "closed", "created_at": "2020-05-14T21:56:54.289000Z", "updated_at": "2020-05-14T22:34:51.997000Z", "closed_at": "2020-05-14T22:34:51.961000Z", "labels": ["bug", "flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2024", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34573226, "iid": 2023, "project_id": 7603319, "title": "Deployment to a production environment", "description": "How do we get past the quickstart and be able to deploy?\n\nUsing the sqlite meltano.db file could be an issue--if I remember right, because it is a file, only one connection is supported at a time. Having an option to specify Postgres or some other db would be better in a production scenario.\n\nStoring secrets in environment variables is really the only option right now, which adds an extra step every time we want to add an extractor or loader. Having the option to tie into a secrets store is a pattern I've seen. Serverless framework and Prefect both do it this way. Or maybe the .env approach is a nice middle ground. I'm not as familiar with .env files. \n\nWhat are recommended or supported deployment practices?\n1. I see a docker base image. Is the idea to use that as a base image, copy in my meltano project, and then deploy the modified image? \n2. Or `git clone my-meltano-project-repo` into the production container or instance, and then run `meltano elt` and other commands? Does meltano automatically install any missing dependencies?", "state": "closed", "created_at": "2020-05-14T19:18:26.220000Z", "updated_at": "2020-05-19T20:52:19.775000Z", "closed_at": "2020-05-19T20:52:19.627000Z", "labels": ["Discussion", "P1", "flow::Triage"], "assignees": [], "user_notes_count": 21, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2023", "weight": null, "has_tasks": false, "author_id": 71418, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34475841, "iid": 2022, "project_id": 7603319, "title": "Add \"Contributing to Meltano\" guide to homepage", "description": "Split out off https://gitlab.com/meltano/meltano/-/issues/2016", "state": "closed", "created_at": "2020-05-12T23:52:54.727000Z", "updated_at": "2020-08-28T23:12:06.833000Z", "closed_at": "2020-08-12T17:40:21.114000Z", "labels": ["flow::Triage"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2022", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34421480, "iid": 2021, "project_id": 7603319, "title": "Don't ask for capabilities when adding a custom loader", "description": "This question is only relevant when adding an extractor.", "state": "closed", "created_at": "2020-05-11T23:12:04.257000Z", "updated_at": "2020-05-11T23:33:19.378000Z", "closed_at": "2020-05-11T23:33:19.337000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2021", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34421444, "iid": 2020, "project_id": 7603319, "title": "`meltano select` adds select option to every plugin in meltano.yml", "description": "", "state": "closed", "created_at": "2020-05-11T23:09:45.293000Z", "updated_at": "2020-05-11T23:30:55.900000Z", "closed_at": "2020-05-11T23:30:55.864000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2020", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34421420, "iid": 2019, "project_id": 7603319, "title": "Ask for setting names on `meltano add --custom`", "description": "", "state": "closed", "created_at": "2020-05-11T23:07:38.820000Z", "updated_at": "2020-05-11T23:28:19.963000Z", "closed_at": "2020-05-11T23:28:19.921000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2019", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34408098, "iid": 2018, "project_id": 7603319, "title": "Clarify that `meltano add --custom` requires `docker run` `--interactive` flag", "description": "", "state": "closed", "created_at": "2020-05-11T15:43:57.130000Z", "updated_at": "2020-05-11T16:01:24.632000Z", "closed_at": "2020-05-11T16:01:24.591000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2018", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34331939, "iid": 2017, "project_id": 7603319, "title": "Show warning on docs pages that may be outdated", "description": "", "state": "closed", "created_at": "2020-05-08T22:42:10.752000Z", "updated_at": "2020-05-08T23:03:12.970000Z", "closed_at": "2020-05-08T23:03:12.933000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2017", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34324399, "iid": 2016, "project_id": 7603319, "title": "Turn homepage into CLI getting started guide", "description": "", "state": "closed", "created_at": "2020-05-08T17:29:34.914000Z", "updated_at": "2020-05-13T00:12:45.416000Z", "closed_at": "2020-05-13T00:12:45.350000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2016", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34288727, "iid": 2015, "project_id": 7603319, "title": "SSL error if Meltano behind nginx proxy", "description": "Hi all,\n\nI installed Meltano behind nginx proxy. When I go to https://mydomain.com/connections I see an error:\n```\nMixed Content: The page at 'https://mydomain.com/connections' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://mydomain.com/api/v1/plugins/installed'. This request has been blocked; the content must be served over HTTPS.\n```\nAny ideas to resolve my issue? Thank you!", "state": "closed", "created_at": "2020-05-08T02:34:00.803000Z", "updated_at": "2020-05-29T22:21:28.758000Z", "closed_at": "2020-05-25T14:55:12.459000Z", "labels": [], "assignees": [87854], "user_notes_count": 17, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2015", "weight": null, "has_tasks": false, "author_id": 5948020, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34269332, "iid": 2014, "project_id": 7603319, "title": "Make it easy to deploy Meltano and Airflow on Kubernetes", "description": "", "state": "closed", "created_at": "2020-05-07T14:45:00.611000Z", "updated_at": "2020-07-08T15:15:20.574000Z", "closed_at": "2020-07-08T15:14:51.122000Z", "labels": ["flow::Triage"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 4, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2014", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34238672, "iid": 2013, "project_id": 7603319, "title": "Have `meltano config` store in meltano.yml instead of system database by default, or based on option", "description": "Required to allow one to add a plugin, configure it, and push it up to GitLab for orchestration using GitLab CI (https://gitlab.com/meltano/meltano/-/merge_requests/1620), since the system database is gitignored, while `meltano.yml` is not.", "state": "closed", "created_at": "2020-05-06T23:08:40.096000Z", "updated_at": "2020-06-09T16:13:47.305000Z", "closed_at": "2020-06-09T16:13:47.018000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2013", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1302692, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34238495, "iid": 2012, "project_id": 7603319, "title": "Add target-jsonl loader", "description": "", "state": "closed", "created_at": "2020-05-06T22:56:11.477000Z", "updated_at": "2020-05-06T23:32:03.127000Z", "closed_at": "2020-05-06T23:32:03.091000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2012", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34238472, "iid": 2011, "project_id": 7603319, "title": "Make tap-gitlab private_token setting optional", "description": "An empty value (`\"\"`) will work fine for public groups and projects.", "state": "closed", "created_at": "2020-05-06T22:54:40.156000Z", "updated_at": "2020-05-06T23:32:03.553000Z", "closed_at": "2020-05-06T23:32:03.289000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2011", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34227743, "iid": 2010, "project_id": 7603319, "title": "Dot-separated config keys are not nested in generated tap or target config", "description": "### Problem to solve\nCM Agencies often use role accounts to manage analytics on behalf of customers; requesting that separate service accounts be granted access to GA Reporting API adds friction. Singer's `tap-google-analytics` [currently supports authentication using `oauth2`](https://github.com/singer-io/tap-google-analytics/blob/master/tap_google_analytics/client.py) as well as using a `service_account` for the `auth_method`.\n\n### Target audience\nContent marketing agencies using Meltano as part of their analytics ETL/ELT pipeline.\n\n### Further details\nPrimary goal: reduce friction in ingesting Google Analytics data on behalf of an agency's clients when the agency has already been granted access to those properties/views.\n### Proposal\nI propose adding a config option (or a separate config for the existing extractor/tap) that supports using `oauth2` credentials as the `auth_method`.", "state": "closed", "created_at": "2020-05-06T16:22:59.534000Z", "updated_at": "2020-08-10T23:46:13.069000Z", "closed_at": "2020-05-11T23:22:10.920000Z", "labels": ["bug", "flow::Review"], "assignees": [87854], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2010", "weight": null, "has_tasks": false, "author_id": 870322, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1248643, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34132196, "iid": 2009, "project_id": 7603319, "title": "Improve MR and issue templates", "description": "", "state": "opened", "created_at": "2020-05-04T23:23:53.664000Z", "updated_at": "2021-03-08T16:43:19.345000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "flow::Triage"], "assignees": [], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2009", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893430, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34117508, "iid": 2008, "project_id": 7603319, "title": "Clarify that pipelines UI only supports target-postgres", "description": "", "state": "closed", "created_at": "2020-05-04T15:57:48.385000Z", "updated_at": "2020-05-04T16:21:22.073000Z", "closed_at": "2020-05-04T16:21:22.000000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2008", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34019455, "iid": 2007, "project_id": 7603319, "title": "Stop automatic installation of airflow, postgres and dbt when running `meltano init`", "description": "Require these to be installed manually, instead, since our user wanting to use the UI is no longer a given.\n\nEffectively reverts https://gitlab.com/meltano/meltano/-/issues/1667.", "state": "closed", "created_at": "2020-05-01T04:13:28.888000Z", "updated_at": "2020-05-04T18:32:54.233000Z", "closed_at": "2020-05-04T18:32:54.172000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2007", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34016867, "iid": 2006, "project_id": 7603319, "title": "Mention built-in transformation and orchestration and add examples and screenshots to homepage", "description": "", "state": "closed", "created_at": "2020-04-30T23:47:40.756000Z", "updated_at": "2020-05-06T23:32:03.594000Z", "closed_at": "2020-05-06T23:32:03.449000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2006", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34014704, "iid": 2005, "project_id": 7603319, "title": "Restore \"Custom\" data source option in UI", "description": "- [ ] Revert https://gitlab.com/meltano/meltano/-/issues/1856\n- [ ] Implement https://gitlab.com/meltano/meltano/-/issues/1851", "state": "closed", "created_at": "2020-04-30T21:19:17.256000Z", "updated_at": "2020-05-04T16:04:20.704000Z", "closed_at": "2020-05-04T16:04:20.643000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2005", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34008422, "iid": 2003, "project_id": 7603319, "title": "Store entity selection on configuration/profile level instead of tap level", "description": "", "state": "closed", "created_at": "2020-04-30T17:10:20.862000Z", "updated_at": "2020-07-21T22:57:12.885000Z", "closed_at": "2020-07-21T22:57:12.807000Z", "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [87854], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2003", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34008395, "iid": 2002, "project_id": 7603319, "title": "Allow extractor entities to be selected in UI", "description": "We already had an \"Entity selection\" modal before, but it was removed in https://gitlab.com/meltano/meltano/-/merge_requests/1157:\n\n![](https://gitlab.com/meltano/meltano/uploads/4d03378285cecd17fbb9e8e537838471/Screen_Shot_2019-08-14_at_8.30.04_AM.png)\n\nI think we should:\n- [ ] Restore the `EntitiesSelectorModal` component from that MR\n- [ ] Add a new \"Select entities\" button to installed extractors on the Extract page, provided they support the `discovery` and `catalog`/`properties` capabilities\n- [ ] Make it clear that with anything but the full set of properties, Meltano's built-in transforms may not work, as described in https://gitlab.com/meltano/meltano/-/issues/876#note_240275676", "state": "opened", "created_at": "2020-04-30T17:09:12.114000Z", "updated_at": "2020-10-05T18:15:24.070000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "flow::Doing"], "assignees": [6175840], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2002", "weight": null, "has_tasks": true, "task_status": "0 of 3 tasks completed", "author_id": 87854, "assignee_id": 6175840, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34008234, "iid": 2001, "project_id": 7603319, "title": "Document personas for Meltano ELT", "description": "", "state": "closed", "created_at": "2020-04-30T17:02:59.419000Z", "updated_at": "2020-05-19T18:38:10.453000Z", "closed_at": "2020-05-19T18:38:10.367000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2001", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34007677, "iid": 2000, "project_id": 7603319, "title": "Update Meltano handbook page", "description": "", "state": "closed", "created_at": "2020-04-30T16:42:32.575000Z", "updated_at": "2020-05-11T15:42:21.294000Z", "closed_at": "2020-05-11T15:42:21.232000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2000", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34007666, "iid": 1998, "project_id": 7603319, "title": "Remove mentions of hosted Meltano from docs", "description": "", "state": "closed", "created_at": "2020-04-30T16:42:20.252000Z", "updated_at": "2020-05-01T00:17:28.861000Z", "closed_at": "2020-05-01T00:17:28.778000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1998", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1224656, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34007661, "iid": 1997, "project_id": 7603319, "title": "Remove hosted banner from demo instance", "description": "", "state": "closed", "created_at": "2020-04-30T16:42:11.150000Z", "updated_at": "2020-05-01T00:17:29.064000Z", "closed_at": "2020-05-01T00:17:29.011000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1997", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1224656, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34007659, "iid": 1996, "project_id": 7603319, "title": "Remove links to hosted Meltano signup form", "description": "", "state": "closed", "created_at": "2020-04-30T16:42:06.778000Z", "updated_at": "2020-05-01T00:17:29.391000Z", "closed_at": "2020-05-01T00:17:29.209000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1996", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1224656, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 34007650, "iid": 1994, "project_id": 7603319, "title": "Update homepage to position Meltano as open source self-hosted data integration pipeline platform", "description": "", "state": "closed", "created_at": "2020-04-30T16:41:47.574000Z", "updated_at": "2020-05-01T00:17:29.452000Z", "closed_at": "2020-05-01T00:17:29.410000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1994", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1224656, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33643296, "iid": 1993, "project_id": 7603319, "title": "Ensure plugin config files are stored at different locations for each profile", "description": "", "state": "closed", "created_at": "2020-04-22T17:16:34.407000Z", "updated_at": "2020-09-04T21:15:40.200000Z", "closed_at": "2020-09-04T21:15:40.058000Z", "labels": ["Accepting Merge Requests", "flow::Triage"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1993", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33635426, "iid": 1991, "project_id": 7603319, "title": "Clean up Developer Tools documentation, remove inaccuracies etc", "description": "", "state": "closed", "created_at": "2020-04-22T16:03:46.332000Z", "updated_at": "2020-08-12T17:38:22.235000Z", "closed_at": "2020-08-12T17:38:22.205000Z", "labels": [], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1991", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33635016, "iid": 1990, "project_id": 7603319, "title": "Update project readme", "description": "", "state": "closed", "created_at": "2020-04-22T15:55:17.715000Z", "updated_at": "2020-05-01T00:17:29.635000Z", "closed_at": "2020-05-01T00:17:29.591000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1990", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1224656, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33634915, "iid": 1988, "project_id": 7603319, "title": "Make it clear which persona each doc and tutorial is meant for", "description": "", "state": "closed", "created_at": "2020-04-22T15:53:05.830000Z", "updated_at": "2020-08-12T17:39:34.923000Z", "closed_at": "2020-08-12T17:39:34.894000Z", "labels": [], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1988", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33634856, "iid": 1987, "project_id": 7603319, "title": "Restore supported data sources in UI", "description": "", "state": "closed", "created_at": "2020-04-22T15:51:21.434000Z", "updated_at": "2020-05-04T15:46:26.975000Z", "closed_at": "2020-05-04T15:46:26.664000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1987", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1235418, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599718, "iid": 1976, "project_id": 7603319, "title": "Improve automated testing of Meltano", "description": "E.g. https://gitlab.com/meltano/meltano/issues/1066", "state": "closed", "created_at": "2020-04-21T23:11:55.478000Z", "updated_at": "2020-05-11T15:21:17.601000Z", "closed_at": "2020-05-11T15:21:17.130000Z", "labels": ["flow::To Do"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1976", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599707, "iid": 1975, "project_id": 7603319, "title": "Document extent of each data source's support in Meltano", "description": "", "state": "opened", "created_at": "2020-04-21T23:10:45.487000Z", "updated_at": "2020-05-11T15:08:08.518000Z", "closed_at": null, "labels": [], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1975", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599297, "iid": 1971, "project_id": 7603319, "title": "Consider recommending Docker over local install", "description": "Ensures a more predictable environment, especially when it comes to python dependencies.", "state": "opened", "created_at": "2020-04-21T22:43:40.376000Z", "updated_at": "2020-08-12T17:39:06.335000Z", "closed_at": null, "labels": ["Documentation"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1971", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599292, "iid": 1970, "project_id": 7603319, "title": "Make it easier to run Meltano UI in Docker with Airflow and Postgres containers", "description": "", "state": "closed", "created_at": "2020-04-21T22:43:07.005000Z", "updated_at": "2020-07-10T17:27:42.284000Z", "closed_at": "2020-07-10T17:27:42.241000Z", "labels": ["flow::Triage"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1970", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599086, "iid": 1969, "project_id": 7603319, "title": "Ensure Meltano UI can be set up succesfully on DigitalOcean", "description": "", "state": "opened", "created_at": "2020-04-21T22:29:06.440000Z", "updated_at": "2020-05-11T15:02:46.700000Z", "closed_at": null, "labels": ["flow::Triage"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1969", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599028, "iid": 1967, "project_id": 7603319, "title": "Make contributing docs great again", "description": "", "state": "closed", "created_at": "2020-04-21T22:24:11.650000Z", "updated_at": "2020-08-12T17:40:04.077000Z", "closed_at": "2020-08-12T17:40:04.046000Z", "labels": ["flow::Triage"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1967", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33599024, "iid": 1966, "project_id": 7603319, "title": "Make self-hosted installation docs great again", "description": "", "state": "closed", "created_at": "2020-04-21T22:23:59.030000Z", "updated_at": "2020-05-20T14:55:53.620000Z", "closed_at": "2020-05-20T14:55:53.422000Z", "labels": ["flow::Doing"], "assignees": [87854], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1966", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33598608, "iid": 1959, "project_id": 7603319, "title": "Learn what cross-source reports are desired on top of sales-funnel data sources", "description": "", "state": "closed", "created_at": "2020-04-21T22:01:45.925000Z", "updated_at": "2020-06-11T17:29:30.473000Z", "closed_at": "2020-06-11T17:29:30.400000Z", "labels": ["connect -> value"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1959", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 33439035, "iid": 1956, "project_id": 7603319, "title": "Add support for Python 3.8", "description": "In [the requirements](https://meltano.com/developer-tools/self-hosted-installation.html#requirements) it is stated \"Python 3.6.1+\", but Python 3.8 fails (at least) because there's a hard-coded dependency to psycopg2 (2.7.7).  But the earliest psycopg2 release supporting python 3.8 is [2.8.4](https://pypi.org/project/psycopg2/2.8.4/).", "state": "closed", "created_at": "2020-04-17T20:17:32.846000Z", "updated_at": "2020-11-02T22:40:39.148000Z", "closed_at": "2020-11-02T22:40:39.076000Z", "labels": ["Accepting Merge Requests", "flow::Doing"], "assignees": [2585766], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1956", "weight": null, "has_tasks": false, "author_id": 4106441, "assignee_id": 2585766, "closed_by_id": 87854, "milestone_id": 1653879, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 32988846, "iid": 1944, "project_id": 7603319, "title": "Make bundle comment returns an error", "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\nWhen I run \"make bundle\" as shown in [set up your enviroment](https://meltano.com/developer-tools/contributor-guide.html#setting-up-your-environment) It returns an error\n\nWhat could I have possibly done wrong?\n\n### What is the expected *correct* behavior?\n_What should be happening?_\n\n\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\nmake bundle\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\n\n```\nrm -rf ./build ./dist ./src/meltano/api/static/js ./src/meltano/api/static/css ./src/webapp/dist\ncd src/webapp && yarn && yarn build\n00h00m00s 0/0: : ERROR: There are no scenarios; must have at least one.\nMakefile:117: recipe for target 'ui' failed\nmake: *** [ui] Error 1\n(meltano-development) p11@Evill-P9ROFN2:~/meltano$ make bundle\n```\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team", "state": "closed", "created_at": "2020-04-07T12:33:41.624000Z", "updated_at": "2020-05-08T16:36:46.207000Z", "closed_at": "2020-05-08T16:36:46.174000Z", "labels": [], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1944", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 5678560, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 32655885, "iid": 1932, "project_id": 7603319, "title": "If start_date is in the past, scheduled Airflow DAG runs immediately after initial manual pipeline run", "description": "The DAG's start_date is set to the extractor's start date, while it should just be set to the timestamp of pipeline creation, so that the first schedule run won't come until the next day (or hour, etc).\n\nRight now though, the pipeline's start_date is used in the UI where really the extractor's start_date should be used.", "state": "closed", "created_at": "2020-03-31T00:21:19.712000Z", "updated_at": "2020-07-07T19:35:40.397000Z", "closed_at": "2020-07-07T19:35:27.118000Z", "labels": ["bug", "connect -> value", "flow::Triage"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1932", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 32516051, "iid": 1885, "project_id": 7603319, "title": "Tap appears to keep running after \"Test Connection\" is completed", "description": "Seen with Stripe and Adwords extractors.", "state": "opened", "created_at": "2020-03-26T22:34:39.067000Z", "updated_at": "2020-08-07T17:06:30.721000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1885", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 31972774, "iid": 1857, "project_id": 7603319, "title": "Rewrite \"What is Meltano?\"", "description": "", "state": "closed", "created_at": "2020-03-13T18:41:55.059000Z", "updated_at": "2020-05-19T18:38:10.633000Z", "closed_at": "2020-05-19T18:38:10.596000Z", "labels": ["flow::Review"], "assignees": [87854], "user_notes_count": 0, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1857", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1258660, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 31693997, "iid": 1841, "project_id": 7603319, "title": "Pipeline may get stuck in \"running\" mode when Meltano is upgraded and/or restarted during run", "description": "On a user's MeltanoData.com instance, we saw a pipeline job that had (according to the \"Run Log\" modal \"Elapsed\" time) been running for more than 4 days. \n\nThe log showed \"The log is too large to display inline. Download it below.\", but the \"Download Log\" button was disabled because (according to Meltano) the job hadn't finished running yet, so there was no way to see from the UI whether the job was actually still running and generating output, or not.\n\nThere is also not a way to cancel or otherwise delete a pipeline that has gotten stuck, so I ended up SSH'ing in and making the change myself. This is related to https://gitlab.com/meltano/meltano/issues/1493.", "state": "closed", "created_at": "2020-03-06T20:49:30.556000Z", "updated_at": "2020-07-20T20:09:18.791000Z", "closed_at": "2020-07-20T20:09:18.589000Z", "labels": ["bug", "connect -> value", "flow::Triage"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1841", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 1352779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 31300451, "iid": 1806, "project_id": 7603319, "title": "Run multiple MeltanoData.com instances on single node/k8s cluster", "description": "See https://gitlab.com/meltano/meltano/issues/1532#note_268071215 for context\n\n- We can consider a single node with Docker, or a Kubernetes cluster. Let's try the latter for half a day to see if it's an option, and fall back on managing the node ourselves if it proves too difficult\n- The project directories can live side by side on shared storage, which will prepare us for https://gitlab.com/meltano/meltano/issues/1532#note_268071184\n- Every instance gets 1 container that can mount its project directory and run the Meltano Docker image\n\nTo do:\n\n- [ ] Take 5 MeltanoData.com instances and get them working on a single node or Kubernetes cluster\n- [ ] Update MeltanoData Guide to have new instances be created within this setup\n- [ ] Migrate over existing instances (separate issue to be created)", "state": "closed", "created_at": "2020-02-26T17:28:25.314000Z", "updated_at": "2020-05-07T14:44:32.672000Z", "closed_at": "2020-05-07T14:44:32.616000Z", "labels": ["Exploration", "P1", "flow::To Do"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1806", "weight": null, "has_tasks": true, "task_status": "0 of 3 tasks completed", "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 31215103, "iid": 1793, "project_id": 7603319, "title": "Pipeline runs -> auto refresh dashboards -> faster renders", "description": "In chatting w/@bencodezen just now about another issue, he surfaced an idea that I think is worth exploring (and maybe even something @mbergeron is investigating as part of https://gitlab.com/meltano/meltano/issues/1748). The idea is:\n\n1. Wait for a pipeline to run\n2. Once a pipeline completes automatically parse all dashboards that leverage the pipeline's `extractor`\n3. Rerun each report within said pipeline\n4. Cache the result (which has the `queryPayload` and related response values set)\n5. Respond to the FE with these cached reports so the SQL querying doesn't need to rerun\n6. *Much* faster dashboard page responses and thus instant renders on the FE\n\nI know caching and cache invalidation is hard, but this idea seemed worth exploring.", "state": "opened", "created_at": "2020-02-24T19:35:53.249000Z", "updated_at": "2020-11-23T19:05:59.967000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "UI", "flow::Triage", "performance"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1793", "weight": null, "has_tasks": false, "author_id": 3014451, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 30651101, "iid": 1705, "project_id": 7603319, "title": "Extract `meltano permissions` into separate project", "description": "As `meltano permissions` is not relevant to our target persona, maintaining, supporting, or improving it is no longer a priority for the Meltano team. \n\nSince it is still a very useful tool that deserves more attention and care than we can give it, and since it does not depend on any other Meltano components or code, it is a perfect candidate for extraction out of our codebase so that another party whose goals are more closely aligned with maintaining this project can maintain it going forward.\n\nSince the GitLab Data Team (specifically, @tayloramurphy) has been its primary (and only?) user, that would be the most natural candidate :smiley: \n\n/cc @iroussos", "state": "closed", "created_at": "2020-02-11T22:01:38.104000Z", "updated_at": "2020-05-18T16:22:25.258000Z", "closed_at": "2020-03-06T23:05:10.015000Z", "labels": ["Accepting Merge Requests", "P4", "flow::Review"], "assignees": [87854], "user_notes_count": 11, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1705", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1116208, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 30440021, "iid": 1669, "project_id": 7603319, "title": "Bring back the Loader settings", "description": "As part of the UI refactor to a 1-step UI, we removed the `Loader` settings entirely.\n\nI think we should bring back a way to configure the Loader, as it impacts self-hosted and self-served clients.\n\nMy opinion is that removing that part obfuscated a part of the process that is very important, and our users end up not understanding how things are wired together. We need to keep in mind that self-served clients *have to wire things together*.\n\nWe can refer them to using the `.env` file, but we already have everything we need to have that in the UI (we had it).\n\nIt doesn't have to be in the primary flow: we could have a `Database` icon that is present on the navbar or somewhere so that at least we can tell users to use that.", "state": "closed", "created_at": "2020-02-05T19:18:05.745000Z", "updated_at": "2020-05-28T17:44:44.794000Z", "closed_at": "2020-05-28T17:41:27.568000Z", "labels": ["Customer Success", "Product", "flow::Triage", "ux"], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1669", "weight": null, "has_tasks": false, "author_id": 1491026, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 30425692, "iid": 1667, "project_id": 7603319, "title": "Airflow is not always installed properly, so let's move the \"meltano first run\" behaviors to `meltano init`", "description": "The current behavior is that `meltano init` only seeds some files, then you are ready to start playing with the tool. We designed it that way because users had to go through it when on-boarding, and we wanted to get them on the UI faster.\n\nInstead, we now have `first run` behaviors, where we expect the `meltano ui` run to do some work before/after starting the Meltano UI. This logic is brittle, and leads to issues where:\n\n  - Airflow is not properly installed\n  - dbt is not properly installed\n  - Huge spike in resource consumption when `meltano ui` is run\n  - Meltano UI secrets are not generated automatically `meltano ui setup` (~\"flow::Blocked\" by https://gitlab.com/meltano/meltano/issues/1668)\n  - Database migrations are expected to run at each invocation, which is an anti-pattern\n\nI think we should improve the `meltano init` command, so that it does most of this.\n\n## The new flow\n\n### Hosted instances\nOn our hosted instances, `meltano init` has already run and they should be good to go already.\n\n### Self-Hosted\n```\npip install meltano\nmeltano init test-server\n\n> Installing airflow\n> Installing dbt\n> Generating application secrets\n> Creating the system database\n> \u2026\n\n> Your project is ready at: http://localhost:5000\n```\n\nIf we still want the \"no-airflow\" use-case, then we already have `MELTANO_DISABLE_AIRFLOW` env variable that we can use, but I'm not sure it's worth to implement right now.\n\n## Drawbacks\n\n`meltano init` takes more time, which I think is totally fine as long as we properly explain to users why.\n\n## Implementation\n\nAdd each behavior described above in the `meltano init` command.\nFollow-up with #1157 in `meltano upgrade`\n\ncc @DouweM @dmor", "state": "closed", "created_at": "2020-02-05T14:09:35.803000Z", "updated_at": "2020-05-04T16:03:37.118000Z", "closed_at": "2020-04-07T23:06:54.119000Z", "labels": ["P4", "Technical Debt", "bug", "flow::Review", "ux"], "assignees": [87854], "user_notes_count": 4, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1667", "weight": null, "has_tasks": false, "author_id": 1491026, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1161807, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 29724563, "iid": 1587, "project_id": 7603319, "title": "Add \"Retry\" button to pipeline logs view and list when run failed", "description": "### Problem to solve\n(Summarize the problem we are trying to solve in the form of we need to do [A], so that [B] can [C])\n\nWe need to *add a pipeline retry button to the Meltano UI Pipeline logs view*, so that when I see that something went wrong I can retry it easily. \n\n![Screen_Shot_2020-01-18_at_7.15.57_AM](/uploads/328de49638e6d3d5e4285cd0b07d5827/Screen_Shot_2020-01-18_at_7.15.57_AM.jpg)\n\nFor example, I can see that \"Nothing to do\" happened, but something should have happened. \nI want to be able to make changes and then just hit \"retry\".\n\n### Target audience\n(For whom are we doing this? Include a persona)\n\nAnyone who is editing or building their own analyses. \n\n### Further details\n(Include use cases, benefits, and/or goals)\n\nIt will make it easier to trouble shoot. \nThis helps make solve the \"Have you tried restarting it?\" problem.\n\n\n### Proposal\n(How are we going to solve the problem? Try to include the user journey)\nI propose a Retry button in the bottom right of the modal.\n\n\n### What does success look like, and how can we measure that?\n(Define both the success metrics and acceptance criteria. Note that success metrics indicate the desired business outcomes, while acceptance criteria indicate when the solution is working correctly. If there is no way to measure success, link to an issue that will implement a way to measure this)\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_", "state": "opened", "created_at": "2020-01-18T12:19:16.515000Z", "updated_at": "2020-08-07T16:58:26.803000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Product", "UI"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1587", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 2295562, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 29543854, "iid": 1564, "project_id": 7603319, "title": "Create tap for MSSQL", "description": "For users who are storing data in a Microsoft SQL database", "state": "closed", "created_at": "2020-01-10T15:21:42.403000Z", "updated_at": "2021-01-31T01:16:30.823000Z", "closed_at": "2021-01-31T01:16:30.557000Z", "labels": ["Extract"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1564", "weight": null, "has_tasks": false, "author_id": 253119, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 29446958, "iid": 1549, "project_id": 7603319, "title": "Set up OAuth client/app for Facebook Ads API and get it approved", "description": "To do:\n\n* [x] @dmor Go through Facebook Business Verification: https://gitlab.com/meltano/meltano/issues/1567\n* [x] @dmor @DouweM Get [Supplemental Terms](https://developers.facebook.com/docs/apps/review/#supplemental-terms) and [Tech Provider Amendment](https://developers.facebook.com/docs/apps/review/#tech-provider-amendment) contracts signed (see https://gitlab.com/meltano/meltano/issues/1549#note_291179165): https://gitlab.com/meltano/meltano/issues/1760\n\n---\n\n* [x] ~~@dmor Create Privacy Policy: https://gitlab.com/meltano/meltano/issues/1330~~ We'll use GitLab's Privacy Policy: https://about.gitlab.com/privacy/\n* [x] Add Privacy Policy URL to Facebook App\n* [x] @mbergeron In our [App Review Request](https://developers.facebook.com/apps/498725591053696/app-review/submissions/current-request/?business_id=172253903856261), describe how Meltano uses the [`ads_read`](https://developers.facebook.com/docs/facebook-login/permissions/#reference-ads_read), [`ads_management`](https://developers.facebook.com/docs/facebook-login/permissions/#reference-ads_management), [`manage_pages`](https://developers.facebook.com/docs/facebook-login/permissions/#reference-manage_pages), and [Ads Management Standard Access](https://developers.facebook.com/docs/marketing-api/access#standard) permissions/features, how it adds value for a person using your app, and why it's necessary for app functionality\n* [x] @mbergeron Complete https://gitlab.com/meltano/meltano/issues/1560 \n* [x] @mbergeron Complete https://gitlab.com/meltano/meltano/issues/1550\n* [x] @mbergeron Record detailed step-by-step video walkthrough of how your app will use these permissions/features\n* [x] @mbergeron Write up detailed step-by-step instructions on how a reviewer can test the integration and how Meltano uses the requested permissions or features\n* [x] @DouweM Review video and instructions\n* [x] Submit for App Review\n* [x] Wait for feedback: Approved!\n\n---\n\n* [x] Go Live!\n\nPer https://developers.facebook.com/docs/apps/review, \"[i]t typically takes us less than one week to process your submission, and often takes only 2\u20133 days, but may take longer during peak periods.\"", "state": "closed", "created_at": "2020-01-09T14:59:06.844000Z", "updated_at": "2020-08-19T16:20:18.750000Z", "closed_at": "2020-02-27T15:21:59.164000Z", "labels": ["P1"], "assignees": [87854, 3601799], "user_notes_count": 26, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1549", "weight": null, "has_tasks": true, "task_status": "13 of 13 tasks completed", "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1116206, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 29366470, "iid": 1532, "project_id": 7603319, "title": "Exploratory Sprint: MeltanoData.com multi-tenancy", "description": "Right now, each `*.meltanodata.com` project has:\n- a dedicated DigitalOcean droplet VM that stores its Meltano project directory and runs an instance of Meltano UI, and \n- a dedicated DigitalOcean DB cluster VM that runs a Postgres database cluster that serves as the project's data warehouse.\n\nEach droplet VM and each DB cluster VM costs $15/month, for a total cost per project of $30/month.\n\nIn this issue we will explore ways to bring this cost down using multi-tenancy: moving away from the current 1-to-1-to-1 relationship between MeltanoData.com projects, droplet VMs, and DB cluster VMs.\n\n(Another avenue worth exploring is a switch to a different provider with potentially lower costs, but that will be discussed in a different issue at a different time, as the benefits of multi-tenancy topic are not specific to any provider.)\n\nIn the current setup, we can identify the following 1-to-1 relationships:\n\n- 1 project needs 1 project directory\n  - 1 project directory is stored on 1 VM\n\n- 1 project needs 1 project warehouse database\n  - 1 project warehouse database is stored in 1 database cluster\n    - 1 database cluster is run on 1 VM\n\n- 1 project needs 1 project Airflow DAG\n  - 1 project Airflow DAG is scheduled by 1 Airflow sheduler\n    - 1 Airflow scheduler is managed by 1 Meltano UI instance\n      - 1 Meltano UI instance is run on 1 VM\n\n- 1 project needs 1 project web interface\n  - 1 project web interface is served by 1 Meltano UI instance\n    - 1 Meltano UI instance is run on 1 VM\n\nThis raises the following questions, that we can discuss separately in threads on this issue:\n\n- Could multiple project directories be stored on 1 VM?\n\n- Could multiple project warehouse databases be stored in 1 database cluster?\n  - Alternatively: could multiple database clusters be run on 1 VM?\n\n- Could multiple projects' Airflow DAGs be scheduled by 1 Airflow scheduler?\n  - Alternatively: could multiple Airflow schedulers be managed by 1 Meltano UI instance?\n    - Alternatively: could multiple Meltano UI instances be run on 1 VM?\n\n- Could multiple projects' web interfaces be served by 1 Meltano UI instance?\n  - Alternatively: could multiple Meltano UI instances be run on 1 VM?\n\nIf the answer to any of these questions is Yes, that creates an opportunity to go from 1-to-1 and N-to-N to N-to-M (where M < N).\n\nWe can then prioritize these opportunities based on the estimated impact on the cost per project and effort required.", "state": "closed", "created_at": "2020-01-07T11:55:51.990000Z", "updated_at": "2020-05-07T14:44:35.984000Z", "closed_at": "2020-05-07T14:44:35.919000Z", "labels": ["Exploration", "flow::Triage"], "assignees": [87854], "user_notes_count": 28, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1532", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 28821053, "iid": 1477, "project_id": 7603319, "title": "Implement \"read-only until authenticated\" mode for meltano.meltanodata.com", "description": "Follow-up from https://gitlab.com/meltano/meltano/issues/1348\n\nAs confirmed by Danielle in https://gitlab.com/meltano/meltano/issues/1348#note_261211584, we intend for `meltano.meltanodata.com` to be our own instance of Meltano, with our own data (preferably real, but probably dummy in the case of some taps), reports and dashboards, to show guest users the value that Meltano can deliver to a team once it's fully set up.\n\nThis means that any kind of write actions by guest users are problematic, and the simplest solution would be to have the instance be in read-only mode until authenticated, with signing in unlocking all the regular read-write permissions.\n\nThis would be a third option in between the two current extremes:\n\n1. regular instances, including `meltano.meltanodata.com` right now: fully open, read-write to the world\n1. NEW for `meltano.meltanodata.com`: read-only to the world, read-write once authenticated\n1. other `*.meltanodata.com` instances: closed to the world, read-write once authenticated", "state": "closed", "created_at": "2019-12-17T10:42:17.327000Z", "updated_at": "2020-06-08T21:17:53.867000Z", "closed_at": "2020-03-31T19:46:34.960000Z", "labels": ["P1", "Security", "flow::Review"], "assignees": [87854], "user_notes_count": 15, "merge_requests_count": 2, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1477", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1161805, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 28761359, "iid": 1468, "project_id": 7603319, "title": "Cannot invoke any CLI commands after installing python environment", "description": "### Problem\n\nAfter [installing](https://meltano.com/docs/installation.html#local-installation) `meltano` locally you cannot invoke any `meltano` commands.\n\n~~This affects the latest macOS version (10.15) which now defaults to [`zsh`](https://en.wikipedia.org/wiki/Z_shell) shell.~~\n\nThis is probably related to multiple python environments.\n\nThe default python environment that ships with 10.15 is `2.7` and the user will try to install `3.6` or greater to run `meltano` but macOS is probably not handling properly aliasing and version usage.", "state": "closed", "created_at": "2019-12-16T11:13:23.280000Z", "updated_at": "2020-07-06T17:25:20.546000Z", "closed_at": "2020-02-29T20:33:57.995000Z", "labels": ["CLI", "Documentation", "P4", "flow::Review"], "assignees": [87854], "user_notes_count": 17, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1468", "weight": null, "has_tasks": false, "author_id": 1474048, "assignee_id": 87854, "closed_by_id": 87854, "milestone_id": 1116208, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 28650898, "iid": 1457, "project_id": 7603319, "title": "Remove transform step from pipeline", "description": "## Problem\n\nUsers want to toggle around the dropdown for \"Transform.\" \n\n## Solution\n\nSince we're inferring whether to run transforms or not, probably best to just hide this for now?", "state": "closed", "created_at": "2019-12-14T05:59:01.042000Z", "updated_at": "2020-05-26T22:09:08.205000Z", "closed_at": "2020-05-26T22:09:08.152000Z", "labels": [], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1457", "weight": null, "has_tasks": false, "author_id": 253119, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 28331425, "iid": 1430, "project_id": 7603319, "title": "No state stored for pipelines when Transforms run", "description": "Edit2: Title updated again to reflect the new findings\n\nBug Summary: \n\nWhen pipelines run using the `--transform run` flag, the state of the last run is not saved.\n\nThis is a consistent behavior for both the CLI and Meltano UI.\n\nWhen a pipeline runs with `--transform skip`, both using the CLI and Meltano UI, the state is properly saved and used in following runs of the same pipeline (same job_id)\n\n-----\n\nEdit: Title updated to reflect the new findings\n\nCheck my comments bellow for a detailed analysis of the issue.\n\nSummary: When pipelines run using Meltano UI, the state of the last run is not saved.\n\nBug: When the pipeline runs again there is no state to be used and the pipeline starts from scratch.\n\nThis affects only ELT pipelines run using Meltano UI. When running `meltano elt ...` in the CLI, everything works without issues.\n\nCorrect Behavior: When a pipeline finishes successfully, the state should be saved and utilized in the next run. \n\n-----\n\nOriginal Title: Potential bug - No state stored for recurring pipeline for Stripe\n\nOriginal description:\n\nWhere: https://holloway.meltanodata.com/\n\nExtractor: Stripe\n\nPipeline Interval: @hourly\n\n6 jobs have run at the moment for the same pipeline, but all followup jobs report to find no STATE: `No state was found, complete import.`\n\n[Tap Stripe](https://github.com/meltano/tap-stripe) supports states and I can see from `discovery.yml` that we have enabled that capability:\n\n```\n  - name: tap-stripe\n    label: Stripe\n    pip_url: 'git+https://github.com/meltano/tap-stripe.git@v0.2.4'\n    capabilities:\n      - catalog\n      - discover\n      - state\n```\n\nThis could be one of various possible bugs:\n1.  Our mechanism for storing and fetching STATE has broken during one of the recent updates (e.g. the pipeline id is not properly used)\n1.  Something is not working properly with Stripe specifically\n1.  Something is broken for recurring pipelines (we do not add correctly the run settings when adding the job to Airflow?)\n\nWe should investigate this and make sure that we properly track and use the STATE of previous pipeline runs.", "state": "closed", "created_at": "2019-12-11T21:03:24.339000Z", "updated_at": "2020-07-14T16:53:59.547000Z", "closed_at": "2020-01-08T16:38:20.514000Z", "labels": ["P1", "bug"], "assignees": [1982738], "user_notes_count": 16, "merge_requests_count": 2, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1430", "weight": null, "has_tasks": false, "author_id": 1982738, "assignee_id": 1982738, "closed_by_id": 87854, "milestone_id": 1091206, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 28045277, "iid": 1402, "project_id": 7603319, "title": "4-Step UI (ELT + Schedule) to Single UI (Pipelines)", "description": "The idea to converge the 4-Step Extract, Load, Transform, and Schedule sub-UIs into a single UI that is the current Schedules UI has been shared a lot. I seemingly have not created an issue so here it is.\n\nI recently made a video demonstrating the concept https://www.youtube.com/watch?v=Dr0_yUBWvWk\n\nBelow is a snapshot of the hacked together rough idea I intend for this issue. The difference being Loader and Transform would be additional columns in the top \"Add\" section. Then from these dropdowns a list (vs. our current card UI approach) of our existing connectors would be displayed. The connector \"Install\" or \"Configure\" would popup the same modal configuration we have currently.\n\n- **Due to the video demo and below screenshot having a slightly different goal, the term \"Datasets\" was used where \"Pipelines\" would be the target term for this issue**\n- **The two sections (Add and Pipelines) in a single UI is the core goal**\n\n![Screen_Shot_2019-12-06_at_4.40.57_PM](/uploads/b59c4130b9fcc99da2111fefa9244317/Screen_Shot_2019-12-06_at_4.40.57_PM.png)\n\nPros:\n  - Simplified UI\n  - Improved mental model (user feedback currently is that when setting up each connector it feels like a global setting where in this solution you're creating data pipelines where the connector settings are *for that pipeline*). Technically speaking the configurations (`Profile`s) will be reusable if desired per pipeline.\n\nCons:\n  - Existing users may dislike the change having gotten used to the current UI\n\n#### TODOS\n\n- [x] in-lining the \"Create Pipeline\" modal on the Pipelines page\n- [x] removing the \"Extract\" and \"Load\" steps\n- [x] making the \"Extractor\" and \"Loader\" dropdowns smarter, by having selection automatically trigger installation and/or configuration\n- [x] only listing extractors in the dropdown that don't already have a pipeline\n- [-] adding an Edit pipeline button and modal to modify the extractor configuration\n    - We can add this later if needed, but I think we don't actually want editing of an existing configuration that's tied to a pipeline. This is because subsequent runs (after a modified configuration) could pollute/blend data from multiple accounts (configurations) into the same analytics db. @mbergeron Can you confirm or deny? \n- [x] 'Pipeline' -> 'Dataset' & 'Analyze' to 'Report' (routes and labels)", "state": "closed", "created_at": "2019-12-07T00:47:55.776000Z", "updated_at": "2020-05-26T22:09:08.033000Z", "closed_at": "2020-01-21T23:07:49.558000Z", "labels": ["P1", "flow::Review"], "assignees": [3014451], "user_notes_count": 16, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1402", "weight": null, "has_tasks": true, "task_status": "5 of 5 tasks completed", "author_id": 3014451, "assignee_id": 3014451, "closed_by_id": 253119, "milestone_id": 1091208, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 28035657, "iid": 1394, "project_id": 7603319, "title": "Restore Profiles functionality in UI", "description": "Once https://gitlab.com/meltano/meltano/issues/1331 is resolved, we can revert the changes made to address https://gitlab.com/meltano/meltano/issues/1389 and officially launch the Profiles feature alongside documentation (https://gitlab.com/meltano/meltano/issues/1353, https://gitlab.com/meltano/meltano/issues/1349)", "state": "closed", "created_at": "2019-12-06T20:13:35.457000Z", "updated_at": "2020-11-13T19:04:43.257000Z", "closed_at": "2020-11-13T19:04:43.113000Z", "labels": ["Accepting Merge Requests", "Configuration", "UI", "flow::Triage"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1394", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 27912535, "iid": 1353, "project_id": 7603319, "title": "Document Profiles feature", "description": "Once https://gitlab.com/meltano/meltano/issues/1331 is resolved, we can deem the Profiles feature (https://gitlab.com/meltano/meltano/issues/764) complete, and document it.\n\nWe should also document how it can be used with Google Analytics in particular (https://gitlab.com/meltano/meltano/issues/1349#note_254185941).", "state": "closed", "created_at": "2019-12-04T00:11:08.697000Z", "updated_at": "2020-11-13T19:04:51.400000Z", "closed_at": "2020-11-13T19:04:51.238000Z", "labels": ["Accepting Merge Requests", "Configuration", "Documentation"], "assignees": [], "user_notes_count": 5, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1353", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 27700285, "iid": 1331, "project_id": 7603319, "title": "Take profile name into account in loader and dbt target schemas", "description": "Now that each extractor and loader can have multiple profiles (unique configurations per connector) to prevent data overwrites and clashing, we'll need a way to determine the analytics schema as well.\n\nView thread from https://gitlab.com/meltano/meltano/merge_requests/1135#note_251772607 for added context.", "state": "closed", "created_at": "2019-11-28T14:59:35.541000Z", "updated_at": "2020-11-13T19:04:40.563000Z", "closed_at": "2020-11-13T19:04:40.362000Z", "labels": ["Accepting Merge Requests", "Configuration"], "assignees": [], "user_notes_count": 20, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1331", "weight": null, "has_tasks": false, "author_id": 3014451, "assignee_id": null, "closed_by_id": 87854, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 26822321, "iid": 1279, "project_id": 7603319, "title": "Revise personas", "description": "### Problem\n\nPersonas can help highlight specific details and important features of the user group or target audience the belong to. Recent discussions like https://gitlab.com/meltano/meltano/issues/1241 and more specifically https://gitlab.com/meltano/meltano/issues/1241#note_240264574 have brought up persona related attributes that could update the existing [personas](https://meltano.com/docs/roadmap.html#personas) defined for the product.\n\n### Proposal\n\nTo help a) **instill an understanding of personas** and b) **have more accurate expectations of personas**, existing personas can be updated to reflect users' behaviors, needs, or goals as the product matures.\n\n### Data\n\nBefore proceeding, it's worth taking into account all the research that has been done in the past like https://gitlab.com/meltano/meltano-design/issues/2, https://gitlab.com/meltano/meltano-design/issues/3, and https://gitlab.com/meltano/meltano-design/issues/9.\n\n### Risk\n\nSince we're currently not using much the existing personas, there's **low risk** in revising them. In the long run, all team members could hold a better understanding of personas.", "state": "closed", "created_at": "2019-11-07T17:50:40.704000Z", "updated_at": "2020-05-01T08:18:55.888000Z", "closed_at": "2019-11-08T16:59:13.684000Z", "labels": ["Strategy", "ux"], "assignees": [3601799], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1279", "weight": null, "has_tasks": false, "author_id": 1474048, "assignee_id": 3601799, "closed_by_id": 3601799, "milestone_id": 1010981, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 26715120, "iid": 1264, "project_id": 7603319, "title": "Improve meltano.com backup strategy", "description": "Our SiteGround account, where we host meltano.com, is at 90% disk space usage (18/20GB) because we create a full backup of the site every time we deploy (https://gitlab.com/meltano/meltano/blob/6427d6bf050fe73383f0b7ef5fda6e6b1efb21ed/.gitlab-ci.yml#L36), but never actually clean up those backups. This has been the case since the website went live in March (https://gitlab.com/meltano/meltano/merge_requests/461/diffs#587d266bb27a4dc3022bbed44dfa19849df3044c_33_49).\n\nSince a new backup currently weighs in at 84MB, the disk would fill up and automatic deployment would start failing in about 23 deploys.\n\nWe only really need to back up `blog`, since that's what we want to keep from being overwritten accidentally if someone change the `scp` instruction, per https://gitlab.com/meltano/meltano/merge_requests/461#note_147791337. SiteGround may support a native way to automatically [back up WordPress blogs](https://www.siteground.com/tutorials/wordpress/backup/). On top of that, we should make sure that old backups actually get cleaned up at some point.", "state": "opened", "created_at": "2019-11-05T13:34:45.894000Z", "updated_at": "2021-03-08T16:39:00.566000Z", "closed_at": null, "labels": ["flow::To Do"], "assignees": [87854], "user_notes_count": 9, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": "2021-05-07", "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1264", "weight": null, "has_tasks": false, "author_id": 87854, "assignee_id": 87854, "closed_by_id": null, "milestone_id": 1931841, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 26564611, "iid": 1241, "project_id": 7603319, "title": "Automatically install appropriate reports and dashboards for data sources", "description": "We are automatically providing user with default transforms and models, why not also give them a default dashboard view so they immediately see value from each tap... and then they can edit from there?\n\nThis could address the problem of time-to-value from data source to dashboard for UI adoption, and exposes what Meltano can do\n\nValuable call notes on this topic here https://gitlab.com/meltano/account-management/issues/58#note_263266389\n\nFirst iteration: https://gitlab.com/meltano/meltano/issues/1241#note_272829405", "state": "closed", "created_at": "2019-11-01T17:04:36.900000Z", "updated_at": "2020-05-01T08:18:55.956000Z", "closed_at": "2020-01-24T19:44:47.818000Z", "labels": ["P1", "flow::Review", "ux"], "assignees": [87854], "user_notes_count": 40, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1241", "weight": null, "has_tasks": false, "author_id": 3601799, "assignee_id": 87854, "closed_by_id": 1491026, "milestone_id": 1091208, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 26225090, "iid": 1175, "project_id": 7603319, "title": "Add Microsoft SQL Server (MSSQL) Data Source", "description": "We are in the process of evaluating Panoply and ChartIO and from briefly looking at Meltano, I suspect it is almost capable of doing the same thing. BUT, at the moment it doesn't look like Meltano can extract from a Microsoft SQL Server source.", "state": "opened", "created_at": "2019-10-23T09:48:29.078000Z", "updated_at": "2021-03-08T16:39:54.844000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "Extract", "Load", "feature requests", "flow::Triage"], "assignees": [], "user_notes_count": 10, "merge_requests_count": 0, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1175", "weight": null, "has_tasks": false, "author_id": 1933526, "assignee_id": null, "closed_by_id": null, "milestone_id": 1893435, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 25702920, "iid": 1105, "project_id": 7603319, "title": "Inconsistent Airflow Initialization", "description": "After a comment from @dmor about Airflow not showing up for her/Sid in running v1.0.1, I started a fresh project to test for myself:\n\n1. Run 1\n    - `meltano init test-1-0-1`\n    - Went straight to Orchestration and didn't see preloader as is expected, instead saw ![Screen_Shot_2019-10-07_at_2.41.55_PM](/uploads/c99a662db4ccb57424a93fa0168ef875/Screen_Shot_2019-10-07_at_2.41.55_PM.png)\n    - After ~1-2min I hit \"Refresh Airflow\" after I noticeably saw my CLI update with Airflow-related status.\n    - Airflow now displayed as expected\n2. Run 2\n    - `meltano init test-1-0-1`\n    - Went straight to Orchestration and didn't see preloader as is expected, instead saw (same as above screenshot)\n    - Hit \"Refresh Airflow\", changed routes, and hard refresh to no avail. I never saw my CLI update with Airflow-related status\n    - Airflow did not display\n3. Run 3\n    - `meltano init test-1-0-1`\n    - Got below error pertaining to SQLite3 and Airflow:\n```\n(meltano-1-0-1)  \u2718 dknox-gitlab@Dereks-MacBook-Pro \ue0b0 ~/Documents/Projects/test-1-0-1 \ue0b0 meltano ui\n[MainThread][INFO][2019-10-07 14:42:05,058] Context impl SQLiteImpl.\n[MainThread][INFO][2019-10-07 14:42:05,059] Will assume non-transactional DDL.\nSystem database up-to-date.\n[MainThread][INFO][2019-10-07 14:42:05,081] Auto-compiling models in '/Users/dknox-gitlab/Documents/Projects/test-1-0-1/model'\n[MainThread][INFO][2019-10-07 14:42:05,084] All workers started.\n[2019-10-07 14:42:05 -0700] [77478] [INFO] Starting gunicorn 19.9.0\n[2019-10-07 14:42:05 -0700] [77478] [INFO] Listening at: http://0.0.0.0:5000 (77478)\n[2019-10-07 14:42:05 -0700] [77478] [INFO] Using worker: sync\n[2019-10-07 14:42:05 -0700] [77481] [INFO] Booting worker with pid: 77481\n[2019-10-07 14:42:05 -0700] [77482] [INFO] Booting worker with pid: 77482\n[2019-10-07 14:42:05 -0700] [77483] [INFO] Booting worker with pid: 77483\n[2019-10-07 14:42:05 -0700] [77484] [INFO] Booting worker with pid: 77484\nTraceback (most recent call last):\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1236, in _execute_context\n    cursor, statement, parameters, context\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 536, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.OperationalError: no such table: job\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/bin/airflow\", line 32, in <module>\n    args.func(args)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/utils/cli.py\", line 74, in wrapper\n    return f(*args, **kwargs)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/bin/cli.py\", line 991, in scheduler\n    job.run()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/jobs.py\", line 196, in run\n    session.commit()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 1023, in commit\n    self.transaction.commit()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 487, in commit\n    self._prepare_impl()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 466, in _prepare_impl\n    self.session.flush()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 2446, in flush\n    self._flush(objects)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 2584, in _flush\n    transaction.rollback(_capture_exception=True)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 67, in __exit__\n    compat.reraise(exc_type, exc_value, exc_tb)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 277, in reraise\n    raise value\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 2544, in _flush\n    flush_context.execute()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/unitofwork.py\", line 416, in execute\n    rec.execute(self)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/unitofwork.py\", line 583, in execute\n    uow,\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/persistence.py\", line 245, in save_obj\n    insert,\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/persistence.py\", line 1116, in _emit_insert_statements\n    statement, params\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 980, in execute\n    return meth(self, multiparams, params)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 273, in _execute_on_connection\n    return connection._execute_clauseelement(self, multiparams, params)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1099, in _execute_clauseelement\n    distilled_params,\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1240, in _execute_context\n    e, statement, parameters, cursor, context\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1458, in _handle_dbapi_exception\n    util.raise_from_cause(sqlalchemy_exception, exc_info)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 296, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 276, in reraise\n    raise value.with_traceback(tb)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1236, in _execute_context\n    cursor, statement, parameters, context\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 536, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: job [SQL: 'INSERT INTO job (dag_id, state, job_type, start_date, end_date, latest_heartbeat, executor_class, hostname, unixname) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: (None, 'running', 'SchedulerJob', '2019-10-07 21:42:07.105541', None, '2019-10-07 21:42:07.105554', 'SequentialExecutor', 'Dereks-MacBook-Pro.local', 'dknox-gitlab')] (Background on this error at: http://sqlalche.me/e/e3q8)\nTraceback (most recent call last):\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1236, in _execute_context\n    cursor, statement, parameters, context\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 536, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.OperationalError: no such table: connection\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/bin/airflow\", line 32, in <module>\n    args.func(args)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/utils/cli.py\", line 74, in wrapper\n    return f(*args, **kwargs)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/bin/cli.py\", line 855, in webserver\n    app = cached_app_rbac(conf) if settings.RBAC else cached_app(conf)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/www/app.py\", line 183, in cached_app\n    app = create_app(config, testing)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/www/app.py\", line 72, in create_app\n    from airflow.www import views\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/www/views.py\", line 2355, in <module>\n    class ChartModelView(wwwutils.DataProfilingMixin, AirflowModelView):\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/www/views.py\", line 2446, in ChartModelView\n    'conn_id': _connection_ids()\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/utils/db.py\", line 73, in wrapper\n    return func(*args, **kwargs)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/airflow/www/views.py\", line 2352, in _connection_ids\n    .group_by(models.Connection.conn_id))]\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/query.py\", line 3081, in __iter__\n    return self._execute_and_instances(context)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/orm/query.py\", line 3106, in _execute_and_instances\n    result = conn.execute(querycontext.statement, self._params)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 980, in execute\n    return meth(self, multiparams, params)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 273, in _execute_on_connection\n    return connection._execute_clauseelement(self, multiparams, params)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1099, in _execute_clauseelement\n    distilled_params,\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1240, in _execute_context\n    e, statement, parameters, cursor, context\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1458, in _handle_dbapi_exception\n    util.raise_from_cause(sqlalchemy_exception, exc_info)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 296, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 276, in reraise\n    raise value.with_traceback(tb)\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1236, in _execute_context\n    cursor, statement, parameters, context\n  File \"/Users/dknox-gitlab/Documents/Projects/test-1-0-1/.meltano/orchestrators/airflow/venv/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 536, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: connection [SQL: 'SELECT connection.conn_id AS connection_conn_id \\nFROM connection GROUP BY connection.conn_id'] (Background on this error at: http://sqlalche.me/e/e3q8)\n[http://0.0.0.0:5000/orchestrate] as <meltano.api.security.identity.FreeUser object at 0x120c51160>\n```", "state": "opened", "created_at": "2019-10-07T21:55:03.491000Z", "updated_at": "2021-01-14T20:41:07.404000Z", "closed_at": null, "labels": ["bug", "flow::To Do"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1105", "weight": null, "has_tasks": false, "author_id": 3014451, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 25390227, "iid": 1066, "project_id": 7603319, "title": "Integrate Cypress in CI/CD process", "description": "First thing first, we need to start a `meltano` service in the GitLab CI.\n\nThe way services work, they can only specify an `entrypoint` and a `command` such as the service should work with a single command.\n\nOur current `meltano/meltano` docker image cannot do that, but I have a pretty simple idea how to make that work \u2014 by using an entrypoint script that can create run `meltano init` if a certain env variable is set.\n\nThen we'll be able to use the `meltano/meltano` image built by the CI in the `build` step to spawn a network accessible Meltano instance that you'll have to wire to you cypress runner.\n\nYou'll have 3 containers running in this job, such as:\n\n* `meltano ui` from `meltano/meltano:$CI_COMMIT_SHA`\n* `postgresql` from `postgresql` (like the other tests)\n* `cypress` as the job executable from `meltano/meltano:$CI_COMMIT_SHA` (what will be in the job log)\n\nNow you'll have to make sure you `cypress` run can run on an arbitrary URL so that we can send the URL of the running service instead of `localhost:5000`.\n\nDoes it makes sense @bencodezen @DouweM?\n\nI can help you set that up.\n\nReference: https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service\n\ncc @DouweM ", "state": "opened", "created_at": "2019-09-27T16:35:26.008000Z", "updated_at": "2020-05-11T15:16:41.750000Z", "closed_at": null, "labels": ["P3", "flow::Triage"], "assignees": [], "user_notes_count": 11, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1066", "weight": null, "has_tasks": false, "author_id": 253119, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 24550334, "iid": 961, "project_id": 7603319, "title": "Inline Changelog in \"Update Available\" button", "description": "Below are the original proposed steps/notes, but we can change the implementation.\n- [ ] `changelog.md` to `changelog.json` using CI/CD to put on meltano.com\n  - run command to convert (likely as part of webapp's `package.json`)\n  - likely copy output of conversion to `docs/.vuepress/public/changelog.json`\n  - ensure it's delivered as part of the build process\n- [ ] API endpoint to consume `changelog.json` from meltano.com (or delegate to backend as part of the initial version info and update path)", "state": "opened", "created_at": "2019-09-06T19:59:30.423000Z", "updated_at": "2020-06-08T16:03:27.772000Z", "closed_at": null, "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/961", "weight": null, "has_tasks": true, "task_status": "0 of 2 tasks completed", "author_id": 3014451, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 23783917, "iid": 876, "project_id": 7603319, "title": "Default entities", "description": "Implement the defaults/\"Recommended\" (which is currently a disabled placeholder to the left of the \"Custom\" button) via the UI:\n\n![Screen_Shot_2019-08-14_at_8.30.04_AM](/uploads/4d03378285cecd17fbb9e8e537838471/Screen_Shot_2019-08-14_at_8.30.04_AM.png)\n\n- To streamline the onboarding flow we can make this UI be opt-in only where the Entities Selection step is skipped automatically unless explicitly clicked on after the Extractor installation completion UI. This would lead the user straight to the Loaders step.", "state": "closed", "created_at": "2019-08-14T15:02:18.128000Z", "updated_at": "2020-05-28T17:37:34.476000Z", "closed_at": "2020-03-10T22:48:29.387000Z", "labels": ["flow::To Do"], "assignees": [3014451], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/876", "weight": null, "has_tasks": false, "author_id": 3014451, "assignee_id": 3014451, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 22911219, "iid": 800, "project_id": 7603319, "title": "Meltano UI Connections Update breaks old projects.", "description": "Old projects before the connection update are stuck with the old connection not usable and the form for adding a new connection having the save button disabled.\n\n![image](/uploads/bb2d1289cf521cac806ce2b106286165/image.png)\n\nTested in MacOs with the latest version of meltano from master and an old project initialized before the update.\n\nIn contrast, I confirm that the interface for saving a connection works as expected in a newly initialized project.\n\n## Todos\n- [x] Fix save button `disabled` issue\n- [x] Ensure old projects use connections properly", "state": "closed", "created_at": "2019-07-17T08:35:03.272000Z", "updated_at": "2021-03-02T18:10:48.316000Z", "closed_at": "2019-08-09T03:34:37.916000Z", "labels": ["bug", "flow::Review"], "assignees": [3014451], "user_notes_count": 3, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/800", "weight": null, "has_tasks": true, "task_status": "2 of 2 tasks completed", "author_id": 1982738, "assignee_id": 3014451, "closed_by_id": 253119, "milestone_id": 921117, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 20539251, "iid": 631, "project_id": 7603319, "title": "Enhance tap-mongodb extractor", "description": "Currently the tap-mongodb has a warning on it for only being a proof of concept. We need to find a way to make this more reliable.", "state": "closed", "created_at": "2019-05-02T19:52:53.909000Z", "updated_at": "2020-11-05T18:13:25.810000Z", "closed_at": "2020-11-05T18:13:25.783000Z", "labels": [], "assignees": [], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/631", "weight": null, "has_tasks": false, "author_id": 253119, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 19353423, "iid": 516, "project_id": 7603319, "title": "Exploratory/Planning Sprint: Enable collaboration on Meltano projects", "description": "### Full Opportunity Assessment\n[WIP] https://docs.google.com/document/d/1rxzXySQj_9vKRjr1VfMiyqXaeH-wLdAHX1EBstq8wcI/edit#\n\n### Problem to solve\nRarely do knowledge workers exist in isolation. Meltano makes it possible to bring entire teams (could be the data team, could be a functional business operations team like Finance or Customer Support) onboard with access to up-to-date data dashboards, but currently sharing is complicated requiring users to version control their entire Meltano project, share the repo, and the recipient must git clone and then re-deploy locally. We need to simplify this process.\n\n### Proposed Solution\nTBD - need to walk through the possible options in this planning discussion\n\n### Tasks to Complete Planning/Exploration Sprint\n* [x]  @dmor write opportunity assessment for Collaboration -- started here: https://docs.google.com/document/d/1rxzXySQj_9vKRjr1VfMiyqXaeH-wLdAHX1EBstq8wcI/edit#\n* [ ] Write Product Requirements Doc that clearly spells out what needs to be built based on critical success factors \n* [ ]  Scope the absolute minimum features necessary to satisfy Phase 1 \n* [ ]  discuss technical feasibility and additional scoping\n* [ ]  come up with design/engineering plan (checklist) for 1 week MVC\n* [ ]  make go / no-go decision for 1 week MVC\n* [ ]  IFF decision is *GO*: discuss best engineer(s) to execute on the MVC, write and assign issue", "state": "opened", "created_at": "2019-03-21T20:49:05.000000Z", "updated_at": "2020-07-30T20:33:37.815000Z", "closed_at": null, "labels": ["Collaboration", "Exploration"], "assignees": [], "user_notes_count": 6, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/516", "weight": null, "has_tasks": true, "task_status": "1 of 7 tasks completed", "author_id": 3601799, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 19575113, "iid": 539, "project_id": 7603319, "title": "Exploratory Sprint: Enable users to use Meltano with Jupyter Notebooks", "description": "We already produce tables and an analytics schema after ELT and transform, and it would technically work for us to connect this to a Jupyter Notebook.\n\nThis is a potential easy win for us.\n\n* [x]  @dmor Figure out if this is even possible\n* [x]  @iroussos make first draft of a simple tutorial to get set up\n* [x]  Look at the old Jupyter Hub setup\n* [ ]  Look for some generic tutorials we can copy\n* [ ]  Add this to our documentation", "state": "closed", "created_at": "2019-03-20T14:51:04.352000Z", "updated_at": "2021-02-22T00:10:53.951000Z", "closed_at": "2019-04-09T18:56:26.423000Z", "labels": ["Documentation"], "assignees": [1982738, 3601799], "user_notes_count": 6, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/539", "weight": null, "has_tasks": true, "task_status": "3 of 5 tasks completed", "author_id": 3601799, "assignee_id": 1982738, "closed_by_id": 3601799, "milestone_id": 834037, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 15296074, "iid": 141, "project_id": 7603319, "title": "Installing plugin into dedicated venv fails when Meltano was installed using pipenv", "description": "Meltano relies on creating enviroments within meltano to install packages in isolation. \n\nCreation of virtual envs from within a venv created by virtualenv or pipenv will work when sub env is created with python -m venv venv.\n\nReproduce:\n```bash\n\u276f mkvirtualenv meltano\nUsing base prefix '/usr'\nNew python executable in /home/micael/.venvs/meltano/bin/python\nInstalling setuptools, pip, wheel...done.\nvirtualenvwrapper.user_scripts creating /home/micael/.venvs/meltano/bin/predeactivate\nvirtualenvwrapper.user_scripts creating /home/micael/.venvs/meltano/bin/postdeactivate\nvirtualenvwrapper.user_scripts creating /home/micael/.venvs/meltano/bin/preactivate\nvirtualenvwrapper.user_scripts creating /home/micael/.venvs/meltano/bin/postactivate\nvirtualenvwrapper.user_scripts creating /home/micael/.venvs/meltano/bin/get_env_details\n\n~\n(meltano) \u276f python -m venv sub\n\n~\n(meltano) \u276f tree sub\nsub\n\u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500 activate\n\u2502   \u251c\u2500\u2500 activate.csh\n\u2502   \u251c\u2500\u2500 activate.fish\n\u2502   \u251c\u2500\u2500 python -> /home/micael/.venvs/meltano/bin/python\n\u2502   \u2514\u2500\u2500 python3 -> python\n\u251c\u2500\u2500 include\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 python3.7\n\u2502       \u2514\u2500\u2500 site-packages\n\u251c\u2500\u2500 lib64 -> lib\n\u2514\u2500\u2500 pyvenv.cfg\n\n6 directories, 6 files\n\n~\n(meltano) \u276f \n```\n\nhttps://gitlab.slack.com/archives/C7HD6Q0RE/p1540559152000400\n\npipenv has the same problem.\n\nNotice that subvenv is missing `pip`", "state": "opened", "created_at": "2018-10-26T15:44:14.406000Z", "updated_at": "2020-10-07T23:09:35.915000Z", "closed_at": null, "labels": ["Accepting Merge Requests", "bug"], "assignees": [], "user_notes_count": 3, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/141", "weight": null, "has_tasks": false, "author_id": 300478, "assignee_id": null, "closed_by_id": null, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 15293466, "iid": 140, "project_id": 7603319, "title": "Handle psycopg2 2.8 release", "description": "See http://initd.org/psycopg/docs/install.html#binary-install-from-pypi\n\nTL;DR: `psycopg2` will become a source only package that will require `libpq` (and build headers) to be installed on the system. Let's make sure our docker image has all the necessary stuff installed and add to the README this dependency.", "state": "closed", "created_at": "2018-10-26T14:30:53.129000Z", "updated_at": "2020-05-26T21:29:11.848000Z", "closed_at": "2020-05-26T21:29:11.797000Z", "labels": ["Technical Debt"], "assignees": [], "user_notes_count": 1, "merge_requests_count": 1, "upvotes": 1, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/140", "weight": null, "has_tasks": false, "author_id": 1491026, "assignee_id": null, "closed_by_id": 87854, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 14703306, "iid": 113, "project_id": 7603319, "title": "MongoDB extractor", "description": "Needed for this issue https://gitlab.com/meltano/analytics/issues/443#note_106638802\n\nWhile this is being built, it might be worth considering how a extractor would work that could also be a target :thinking: \n\ncc @jschatz1", "state": "closed", "created_at": "2018-10-04T22:20:11.645000Z", "updated_at": "2020-06-01T21:45:51.951000Z", "closed_at": "2019-05-01T19:32:40.490000Z", "labels": ["Accepting Merge Requests"], "assignees": [], "user_notes_count": 18, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": "2019-01-05", "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/113", "weight": null, "has_tasks": false, "author_id": 1942272, "assignee_id": null, "closed_by_id": 3601799, "milestone_id": 814779, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 14338040, "iid": 94, "project_id": 7603319, "title": "Using Singer Taps/Targets in Meltano", "description": "This is a discussion issue documenting the pros and cons of using [Singer.io](https://www.singer.io/) Taps/Targets as Meltano's core Extractors and Loaders. It will be updated as we are going through the process of checking Singer's Protocol and supported Extractors/Loaders.\r\n\r\n## Info on Singer Taps/Targets\r\n\r\nTo start with, [Singer's Communication Standard](https://github.com/singer-io/getting-started) seems like a solid one, providing a simple way to create Extractors (Taps), Loaders (Targets) and sending data and schema definitions from Extractors to Loaders. I am not 100% sure how extensible and scalable it is for large chunks of data, as it uses stdout/stdin and JSON to pipe the data, but it seems like a good starting point.\r\n\r\nSome overall notes to start with:\r\n*  There are 3 types of Taps/Targets available:\r\n   1.  Those maintained by [Stich](https://www.stitchdata.com) and provided through their platform (labeled as Stitch-certified in the [Stich Platform](https://www.stitchdata.com/integrations/sources/)). Those should work perfectly fine and without issues. \r\n   1.  Those provided in one of [Singer.io's Repositories](https://github.com/singer-io) and also offered through the [Stich Platform](https://www.stitchdata.com/integrations/sources/). They should be at least stable and should work without issues.\r\n   1.  Third party Taps/Targets and those provided in one of [Singer.io's Repositories](https://github.com/singer-io) but not promoted through the [Singer.io](https://www.singer.io/) page or the [Stich Platform](https://www.stitchdata.com/integrations/sources/). Those could range from unstable to totally broken.\r\n\r\n*  There is poor documentation for most not officially certified taps that I checked. A lot do not even have a README and most of them require you to check their code in order to even understand the available configuration options. Most Taps/Targets are still a work in progress with their definitions changing and new features not always reported in their documentation.\r\n\r\n   Check for example the [Tap for extracting data from Zendesk](https://github.com/singer-io/tap-zendesk) which is [certified and promoted by Stitch](https://www.stitchdata.com/docs/integrations/saas/zendesk).\r\n\r\n*  The Singer.io community is not as active as I would expect. As an example, the tap used as the main example in [Singer.io homepage](https://www.singer.io/) (tap-fixerio) is broken (`fixerio 404 - PLEASE UPDATE YOUR API ENDPOINT`), it has not been updated and the issue reporting the problem has not been addressed since June 18th.\r\n\r\n*  Not all Sources/Loaders available in the [Stich Platform](https://www.stitchdata.com/integrations/sources/) are openly available. \r\n\r\n   That's really obvious in the [Loaders (Destinations) Section](https://www.stitchdata.com/integrations/destinations/). There is no Target for Postgres or Snowflake in the [Singer.io's Repositories](https://github.com/singer-io), nor is there any mention by Stich on what they are using in general for loading data to the Target Data Stores. We'll have to create our own Targets or use third party, less used/tested implementations, like the one available for [Loading data to Postgres](https://github.com/statsbotco/target-postgres).\r\n\r\n*  As with the initial Extractor Implementations in Meltano, most Taps maintained by Stich (e.g. SFDC, Zendesk, etc) serve the needs of the Stich Platform.\r\n\r\n   They are pretty complete and support most of the Entities available by those APIs, but they are built to work in conjunction with a web platform like Stitch and less as stand alone extraction tools to be run in isolation.\r\n\r\n   That means, for example, that whenever available, an OAth Authentication flow approach is used as the only option to authenticate the user and connect to the API. That approach requires a server with a static IP at least and a user authenticating through a browser. \r\n\r\n   This is in contrast to the current Meltano approach of using the Authentication option that directly utilizes a username/password and/or an API token. We have to think about the best approach to follow, but for sure our approach allows for an extractor to run even from a data scientist's home laptop as long as she has the credentials to connect to an API, while the OAth Authentication flow approach would require a web server and an interface similar to Meltano Analysis for generating and storing the tokens to be used while running the Taps.\r\n\r\n   What's more important, as I mentioned in the beginning of this section, is that the approach by Stich is to only support the option that is of interest to the Stitch Platform, even when there are other options available (e.g. in the SFDC and Zendesk Taps and APIs that I checked). That means that if we want those taps running as stand alone extractors we'll have to either contribute to their Tap code base and add additional login options (hoping that those MRs are merged) or fork the Tap implementations and maintain our own version for most Taps.\r\n\r\n   This is the most important hurdle I found while investigating some of the high profile Taps, so I'll continue my analysis and elaborate more on that bellow with examples per Tap.\r\n\r\n## Notes on specific Taps/Targets\r\n\r\n### SFDC Tap\r\n\r\nStitch-certified - [link to tap-salesforce](https://github.com/singer-io/tap-salesforce)\r\n\r\nThis Tap requires:\r\n1.  An active [Salesforce Connected App](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_defining_remote_access_applications.htm) (in order to acquire a client_id and a client_secret)\r\n1.  A server in order to use [Salesforce's Web Server OAuth Authentication Flow](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_understanding_web_server_oauth_flow.htm) and acquire a valid refresh_token\r\n\r\nUnfortunately, it does not support the [Username-Password Authentication Flow](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_understanding_username_password_oauth_flow.htm) that we currently use in the Meltano SFDC extractor and in all other extractors we currently maintain. \r\n\r\nAs I wrote in the previous Section, that raises the bar in order to use this Tap for extracting data from SFDC, as whoever is going to be the end user has to also somehow acquire the OAuth token (refresh_token). That is in comparison to the less secure, but better suited for a CI/CD pipeline environment of using a username, a password and a secure token for authenticating with Salesforce.\r\n\r\nOne solution in the case of running Meltano as a standalone app would be to provide the OAuth Authentication Flow through the Mentano Analysis web interface and (securely) store the refresh_token in Meltano Analysis DB.\r\n\r\nBut that approach does not solve the requirement that the user running the Meltano Project should have at least a static IP, as [Salesforce's Web Server OAuth Authentication Flow](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_understanding_web_server_oauth_flow.htm) requires a redirect_uri in order to send back a temporary token (after the user authenticates in Salesforce) that will be then used in order to fetch the permanent OAuth token (refresh_token). This is more or less a standard flow when using OAuth Authentication. \r\n\r\nAnother option would be to update the SFDC Tap and add an alternative login method (through username, password and secure_token):\r\n*  That should be OK as long as the access tokens fetched through the two authentication options (using an OAuth refresh_token and user/pass creds) are the same and can be used interchangeably in the followup calls (so that we will be able to make as few updates to the SFDC Tap as possible).\r\n*  What I am not sure about is how open they are to accepting contributions to Stitch-certified Taps in case we follow that path.\r\n\r\n### Zendesk Tap\r\n\r\nStitch-certified - [link to tap-zendesk](https://github.com/singer-io/tap-zendesk)\r\n\r\nThis Tap has no documentation at all, not even on the configuration options in order to run it.\r\n\r\nBy checking the Tap's code, I can see that [they require the following](https://github.com/singer-io/tap-zendesk/blob/master/tap_zendesk/__init__.py#L13):\r\n```\r\nREQUIRED_CONFIG_KEYS = [\r\n    \"start_date\",\r\n    \"subdomain\",      ==>  XXXXX in https://XXXXX.zendesk.com/api/v2/\r\n    \"access_token\"    ==>  the OAuth token for accessing Zendesk.\r\n]\r\n```\r\n\r\nOnce more, only [Authentication by using an OAuth access token](https://developer.zendesk.com/rest_api/docs/core/introduction#oauth-access-token) is supported and not the option of [Authenticating by using an API token](https://developer.zendesk.com/rest_api/docs/core/introduction#api-token) like our current approach.\r\n\r\nAs with SFDC, that approach is best suited for a web platform like [Stich](https://www.stitchdata.com) and not for running an extractor in stand alone mode. It requires the user to:\r\n1.  Have an active, [registered Application with Zendesk](https://support.zendesk.com/hc/en-us/articles/203663836-Using-OAuth-authentication-with-your-application#topic_s21_lfs_qk)\r\n1.  A server in order to use [Zendesk's OAuth authorization flow](https://support.zendesk.com/hc/en-us/articles/203663836-Using-OAuth-authentication-with-your-application#topic_ar1_mfs_qk) and get an access token. \r\n\r\nThe limitations and options are the same as the ones discussed in the SFDC Tap Section.\r\n\r\nThey use [Zenpy](https://github.com/facetoe/zenpy) in order to connect to Zendesk, which has support for [all types of authenticating with Zendesk](http://docs.facetoe.com.au/zenpy.html#usage), so it should not be difficult to update Zendesk Tap's code if we follow that path.\r\n\r\n### Marketo Tap\r\n\r\nStitch-certified - [link to tap-marketo](https://github.com/singer-io/tap-marketo)\r\n\r\nIt uses the same CLIENT_ID/CLIENT_SECRET authentication method as Meltano's Marketo Extractor.\r\n\r\nI was able to set it up and request Marketo's schema (schema discovery mode), but when I run it in extraction mode the Tap terminates immediately without any message shown, info returned, log created.\r\n\r\nWe should check this more and find out what happens there, but this is one of the cases where an officially supported Tap does not work without any info returned (in order to debug the process). It could be that we have reached the daily quota or that something is missing from my config, but I can not know without any feedback returned. \r\n\r\nIf we are going to continue checking the option of using Singer.io Taps/Targets in Meltano, someone should check this one more, find a way to debug it, contact the Singer.io community through Slack, etc.  \r\n\r\n### Zuora Tap\r\n\r\nStitch-certified - [link to tap-zuora](https://github.com/singer-io/tap-zuora)\r\n\r\nThis Tap has no documentation at all, not even on the configuration options in order to run it.\r\n\r\nBy checking the Tap's code, I can see that they require the following:\r\n```\r\nREQUIRED_CONFIG_KEYS = [\r\n    \"start_date\",\r\n    \"api_type\",\r\n    \"username\",\r\n    \"password\",\r\n]\r\n```\r\n\r\nThat makes the Zuora Tap a good candidate for testing a Tap and comparing it with what we currently have.\r\n\r\n### Stripe Tap\r\n\r\nStitch-certified but no link to a public repository from Stitch or Singer.io\r\n\r\nLike with a couple other Taps/Targets (namely the Postgres one), there exists a single public repo of a Stripe Tap provided by [Statsbot](https://github.com/statsbotco): [link to tap-stripe](https://github.com/statsbotco/tap-stripe)\r\n\r\nThis Target has no documentation at all, is not verified by Stitch or the Singer.io community, so we should carefully test it and check its quality before using it.\r\n\r\n### Gitlab Tap\r\n\r\nCommunity-supported - [link to tap-gitlab](https://github.com/singer-io/tap-gitlab)\r\n\r\nA tap that can be used for testing things out, especially Targets (Loaders).\r\n\r\nI set it up without issues and I was able to fetch relevant data from the meltano/meltano project.  \r\n\r\n### Postgres Target\r\n\r\nThere is no link to a public repository for a Postgres Target from Stitch or Singer.io\r\n\r\nThere exists a single public repo of a Stripe Tap provided by [Statsbot](https://github.com/statsbotco): [link to target-postgres](https://github.com/statsbotco/target-postgres)\r\n\r\nThis Target has no documentation at all, is not verified by Stitch or the Singer.io community, so we should carefully test it and check its quality before using it.\r\n\r\n### Snowflake Target\r\n\r\nThere is no link to a public repository for a Snowflake Target from Stitch or Singer.io, nor could I find a target for Snowflake in general.\r\n\r\n### Comments on other Taps/Targets\r\n\r\nTaps provided in Stich with no open source project\r\n*  [Netsuite](https://www.stitchdata.com/docs/integrations/saas/netsuite)\r\n*  [Mixpanel](https://www.stitchdata.com/docs/integrations/saas/mixpanel)\r\n*  [Google Analytics](https://www.stitchdata.com/docs/integrations/saas/google-analytics)\r\n\r\nTaps that require an OAuth Token:\r\n*  [tap-doubleclick-campaign-manager](https://github.com/singer-io/tap-doubleclick-campaign-manager)\r\n\r\n\r\n## Options on how to use Taps/Targets inside meltano\r\n\r\n(WIP)(ToDo) Let's discuss this first and then I am going to add more info on that.", "state": "closed", "created_at": "2018-09-20T13:14:11.032000Z", "updated_at": "2020-06-06T17:37:18.561000Z", "closed_at": "2019-02-26T20:27:14.470000Z", "labels": ["Discussion", "Documentation"], "assignees": [], "user_notes_count": 13, "merge_requests_count": 0, "upvotes": 2, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/94", "weight": null, "has_tasks": false, "author_id": 1982738, "assignee_id": null, "closed_by_id": 3511154, "milestone_id": 797629, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 12985270, "iid": 4, "project_id": 7603319, "title": "Document how to use extractors on their own", "description": "", "state": "closed", "created_at": "2018-07-25T16:57:05.196000Z", "updated_at": "2021-03-02T22:08:41.287000Z", "closed_at": "2018-11-23T20:23:03.359000Z", "labels": ["flow::To Do"], "assignees": [], "user_notes_count": 4, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/4", "weight": null, "has_tasks": false, "author_id": 926632, "assignee_id": null, "closed_by_id": 1491026, "milestone_id": null, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 12985261, "iid": 3, "project_id": 7603319, "title": "Melt pivot table support", "description": "", "state": "closed", "created_at": "2018-07-25T16:56:18.560000Z", "updated_at": "2021-03-02T22:08:41.406000Z", "closed_at": "2019-02-28T23:15:53.663000Z", "labels": [], "assignees": [300478], "user_notes_count": 0, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/3", "weight": null, "has_tasks": false, "author_id": 926632, "assignee_id": 300478, "closed_by_id": 3511154, "milestone_id": 799705, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 12985102, "iid": 2, "project_id": 7603319, "title": "Melt CI: make docker images and CI pipeline to deploy and update melt", "description": "", "state": "closed", "created_at": "2018-07-25T16:43:06.423000Z", "updated_at": "2021-03-02T22:08:41.355000Z", "closed_at": "2019-02-26T20:43:17.555000Z", "labels": ["flow::To Do"], "assignees": [926632], "user_notes_count": 2, "merge_requests_count": 0, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/2", "weight": null, "has_tasks": false, "author_id": 926632, "assignee_id": 926632, "closed_by_id": 3511154, "milestone_id": 545725, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
{"id": 12985078, "iid": 1, "project_id": 7603319, "title": "Authentication for Meltano Analyze", "description": "We need to add user authentication to Meltano Analyze. As an MVC we should:\n1. Support OAuth with GitLab (others are a bonus, but no need to test for now)\n\nImplement social login (GitLab only for now) with [Flask Security](https://pythonhosted.org/Flask-Security/)", "state": "closed", "created_at": "2018-07-25T16:40:57.247000Z", "updated_at": "2021-03-02T22:08:41.322000Z", "closed_at": "2019-01-31T21:31:53.750000Z", "labels": ["flow::Review"], "assignees": [1491026], "user_notes_count": 6, "merge_requests_count": 1, "upvotes": 0, "downvotes": 0, "due_date": null, "confidential": false, "discussion_locked": false, "web_url": "https://gitlab.com/meltano/meltano/-/issues/1", "weight": null, "has_tasks": false, "author_id": 926632, "assignee_id": 1491026, "closed_by_id": 300478, "milestone_id": 757347, "time_estimate": 0, "total_time_spent": 0, "human_time_estimate": null, "human_total_time_spent": null}
